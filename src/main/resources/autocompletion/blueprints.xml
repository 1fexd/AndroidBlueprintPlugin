<!--
  ~ This Source Code Form is subject to the terms of the Mozilla Public
  ~ License, v. 2.0. If a copy of the MPL was not distributed with this
  ~ file, You can obtain one at https://mozilla.org/MPL/2.0/.
  -->

<blueprints>
    <blueprint name="perfHaldefaults">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="list of source files used to compile the C/C++ module.  May be .c, .cpp, or .S files. srcs may reference the outputs of other modules that produce source files like genrule or filegroup using the syntax &quot;:module&quot;."/>
        <field name="host_supported" type="bool" descr="If set to true, build a variant of the module for the host.  Defaults to false."/>
        <field name="device_supported" type="bool" descr="If set to true, build a variant of the module for the device.  Defaults to true."/>
        <object-field name="aidl">
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the aidl include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the aidl include paths."/>
            <field name="generate_traces" type="bool" descr="whether to generate traces (for systrace) for this interface"/>
            <field name="export_aidl_headers" type="bool" descr="export headers generated from .aidl sources"/>
        </object-field>
        <field name="allow_undefined_symbols" type="bool" descr="allow the module to contain undefined symbols.  By default, modules cannot contain undefined symbols that are not satisified by their immediate dependencies.  Set this flag to true to remove --no-undefined from the linker flags. This flag should only be necessary for compiling low-level libraries like libc."/>
        <field name="asflags" type="string[]" descr="list of module-specific flags that will be used for .S compiles"/>
        <field name="bootstrap" type="bool" descr="Allows this module to use non-APEX version of libraries. Useful for building binaries that are started before APEXes are activated."/>
        <field name="c_std" type="string" descr="C standard version to use. Can be a specific version (such as &quot;gnu11&quot;), &quot;experimental&quot; (which will use draft versions like C1x when available), or the empty string (which will use the default)."/>
        <field name="cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles."/>
        <field name="clang" type="bool" descr="Deprecated. true is the default, false is invalid."/>
        <field name="clang_asflags" type="string[]" descr="list of module-specific flags that will be used for .S compiles when compiling with clang"/>
        <field name="clang_cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles when compiling with clang"/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="conlyflags" type="string[]" descr="list of module-specific flags that will be used for C compiles"/>
        <field name="cpp_std" type="string" descr="C++ standard version to use. Can be a specific version (such as &quot;gnu++11&quot;), &quot;experimental&quot; (which will use draft versions like C++1z when available), or the empty string (which will use the default)."/>
        <field name="cppflags" type="string[]" descr="list of module-specific flags that will be used for C++ compiles"/>
        <field name="data" type="string[]" descr="list of files or filegroup modules that provide data that should be installed alongside the test"/>
        <object-field name="debug" descr="release">
            <field name="cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles in debug or release builds"/>
        </object-field>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="double_loadable" type="bool" descr="whether this module is capable of being loaded with other instance (possibly an older version) of the same module in the same process. Currently, a shared library that is a member of VNDK (vndk: {enabled: true}) can be double loaded in a vendor process if the library is also a (direct and indirect) dependency of an LLNDK library. Such libraries must be explicitly marked as `double_loadable: true` by the owner, or the dependency from the LLNDK lib should be cut if the lib is not designed to be double loaded."/>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the C/C++ module. This is most useful in the arch/multilib variants to remove non-common files"/>
        <field name="export_generated_headers" type="blueprint[]" descr="list of generated headers to re-export include directories from. Entries must be present in generated_headers."/>
        <field name="export_header_lib_headers" type="blueprint[]" descr="list of header libraries to re-export include directories from. Entries must be present in header_libs."/>
        <field name="export_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the include path (using -I) for this module and any module that links against this module.  Directories listed in export_include_dirs do not need to be listed in local_include_dirs."/>
        <field name="export_shared_lib_headers" type="blueprint[]" descr="list of shared libraries to re-export include directories from. Entries must be present in shared_libs."/>
        <field name="export_static_lib_headers" type="blueprint[]" descr="list of static libraries to re-export include directories from. Entries must be present in static_libs."/>
        <field name="force_symbols_not_weak_list" type="string" descr="local file name to pass to the linker as -force_symbols_not_weak_list"/>
        <field name="force_symbols_weak_list" type="string" descr="local file name to pass to the linker as -force_symbols_weak_list"/>
        <field name="generated_headers" type="blueprint[]" descr="list of generated headers to add to the include path. These are the names of genrule modules."/>
        <field name="generated_sources" type="blueprint[]" descr="list of generated sources to compile. These are the names of gensrcs or genrule modules."/>
        <field name="gnu_extensions" type="bool" descr="if set to false, use -std=c++* instead of -std=gnu++*"/>
        <field name="group_static_libs" type="bool" descr="group static libraries.  This can resolve missing symbols issues with interdependencies between static libraries, but it is generally better to order them correctly instead."/>
        <field name="gtest" type="bool" descr="if set, build against the gtest library. Defaults to true."/>
        <object-field name="header_abi_checker">
            <field name="symbol_file" type="string" descr="Path to a symbol file that specifies the symbols to be included in the generated ABI dump file"/>
            <field name="exclude_symbol_versions" type="string[]" descr="Symbol versions that should be ignored from the symbol file"/>
            <field name="exclude_symbol_tags" type="string[]" descr="Symbol tags that should be ignored from the symbol file"/>
        </object-field>
        <field name="header_libs" type="blueprint[]" descr="list of modules that should only provide headers for this module."/>
        <field name="host_ldlibs" type="string[]" descr="-l arguments to pass to linker for host-provided shared libraries"/>
        <field name="include_build_directory" type="bool" descr="Add the directory containing the Android.bp file to the list of include directories. Defaults to true."/>
        <field name="include_dirs" type="string[]" descr="list of directories relative to the root of the source tree that will be added to the include path using -I. If possible, don't use this.  If adding paths from the current directory use local_include_dirs, if adding paths from other modules use export_include_dirs in that module."/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="instruction_set" type="string" descr="the instruction set architecture to use to compile the C/C++ module."/>
        <field name="isolated" type="bool" descr="if set, use the isolated gtest runner. Defaults to false."/>
        <field name="ldflags" type="string[]" descr="list of module-specific flags that will be used for all link steps"/>
        <field name="local_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the include path using -I"/>
        <field name="logtags" type="string[]" descr="*.logtags files, to combine together in order to generate the /system/etc/event-log-tags file"/>
        <object-field name="lto">
            <field name="never" type="bool"/>
            <field name="full" type="bool"/>
            <field name="thin" type="bool"/>
        </object-field>
        <field name="native_coverage" type="bool"/>
        <field name="no_libcrt" type="bool" descr="don't link in libclang_rt.builtins-*.a"/>
        <field name="no_libgcc" type="bool" descr="don't link in libgcc.a"/>
        <field name="no_named_install_directory" type="bool" descr="Disables the creation of a test-specific directory when used with relative_install_path. Useful if several tests need to be in the same directory, but test_per_src doesn't work."/>
        <field name="nocrt" type="bool" descr="don't link in crt_begin and crt_end.  This flag should only be necessary for compiling crt or libc."/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="openmp" type="bool" descr="Build and link with OpenMP"/>
        <field name="overrides" type="blueprint[]" descr="Names of modules to be overridden. Listed modules can only be other shared libraries (in Make or Soong). This does not completely prevent installation of the overridden libraries, but if both binaries would be installed by default (in PRODUCT_PACKAGES) the other library will be removed from PRODUCT_PACKAGES."/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="pack_relocations" type="bool" descr="Generate compact dynamic relocation table, default true."/>
        <object-field name="pgo">
            <field name="instrumentation" type="bool"/>
            <field name="sampling" type="bool"/>
            <field name="profile_file" type="string"/>
            <field name="benchmarks" type="string[]"/>
            <field name="enable_profile_use" type="bool"/>
            <field name="cflags" type="string[]" descr="Additional compiler flags to use when building this module for profiling (either instrumentation or sampling)."/>
        </object-field>
        <field name="prefix_symbols" type="string" descr="if set, add an extra objcopy --prefix-symbols= step"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <object-field name="proto">
            <field name="export_proto_headers" type="bool" descr="export headers generated from .proto sources"/>
            <field name="static" type="bool" descr="Link statically against the protobuf runtime"/>
            <field name="type" type="string" descr="Proto generator type.  C++: full or lite.  Java: micro, nano, stream, or lite."/>
            <field name="plugin" type="string" descr="Proto plugin to use as the generator.  Must be a cc_binary_host module."/>
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the protoc include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the bp file that will be added to the protoc include paths."/>
            <field name="canonical_path_from_root" type="bool" descr="whether to identify the proto files from the root of the source tree (the original method in Android, useful for android-specific protos), or relative from where they were specified (useful for external/third party protos). This defaults to true today, but is expected to default to false in the future."/>
        </object-field>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="recovery_available" type="bool" descr="Make this module available when building for recovery"/>
        <field name="reexportedIncludeFlags" type="string[]"/>
        <field name="relative_install_path" type="string" descr="install to a subdirectory of the default install path for the module"/>
        <object-field name="renderscript">
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the llvm-rs-cc include paths"/>
            <field name="flags" type="string[]" descr="list of flags that will be passed to llvm-rs-cc"/>
            <field name="target_api" type="string" descr="Renderscript API level to target"/>
        </object-field>
        <field name="require_root" type="bool" descr="Add RootTargetPreparer to auto generated test config. This guarantees the test to run with root permission."/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="rtti" type="bool" descr="pass -frtti instead of -fno-rtti"/>
        <field name="runtime_libs" type="blueprint[]" descr="list of modules that should be installed with this module.  This is similar to 'required' but '.vendor' suffix will be appended to the module names if the shared libraries have vendor variants and this module uses VNDK."/>
        <object-field name="sanitize">
            <field name="never" type="bool"/>
            <field name="address" type="bool" descr="main sanitizers"/>
            <field name="thread" type="bool"/>
            <field name="hwaddress" type="bool"/>
            <field name="undefined" type="bool" descr="local sanitizers"/>
            <field name="all_undefined" type="bool"/>
            <field name="misc_undefined" type="string[]"/>
            <field name="coverage" type="bool"/>
            <field name="safestack" type="bool"/>
            <field name="cfi" type="bool"/>
            <field name="integer_overflow" type="bool"/>
            <field name="scudo" type="bool"/>
            <field name="scs" type="bool"/>
            <object-field name="diag">
                <field name="undefined" type="bool"/>
                <field name="cfi" type="bool"/>
                <field name="integer_overflow" type="bool"/>
                <field name="misc_undefined" type="string[]"/>
                <field name="no_recover" type="string[]"/>
            </object-field>
            <field name="recover" type="string[]" descr="value to pass to -fsanitize-recover="/>
            <field name="blacklist" type="string" descr="value to pass to -fsanitize-blacklist"/>
        </object-field>
        <field name="sdclang" type="bool" descr="compile module with SDLLVM instead of AOSP LLVM"/>
        <field name="sdk_version" type="string" descr="Minimum sdk version supported when compiling against the ndk"/>
        <field name="shared" type="string[]"/>
        <field name="shared_libs" type="blueprint[]" descr="list of modules that should be dynamically linked into this module."/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="static" type="string[]"/>
        <field name="static_executable" type="bool" descr="compile executable with -static"/>
        <field name="static_libs" type="blueprint[]" descr="list of modules that should be statically linked into this module."/>
        <field name="static_ndk_lib" type="bool"/>
        <field name="stem" type="string" descr="set the name of the output"/>
        <field name="stl" type="string" descr="Select the STL library to use.  Possible values are &quot;libc++&quot;, &quot;libc++_static&quot;, &quot;libstdc++&quot;, or &quot;none&quot;. Leave blank to select the default."/>
        <object-field name="strip">
            <field name="none" type="bool"/>
            <field name="all" type="bool"/>
            <field name="keep_symbols" type="bool"/>
            <field name="keep_symbols_list" type="string[]"/>
            <field name="use_gnu_strip" type="bool"/>
        </object-field>
        <object-field name="stubs">
            <field name="symbol_file" type="string" descr="Relative path to the symbol map. The symbol map provides the list of symbols that are exported for stubs variant of this library."/>
            <field name="versions" type="string[]" descr="List versions to generate stubs libs for."/>
        </object-field>
        <field name="suffix" type="string" descr="append to the name of the output"/>
        <field name="symbol_ordering_file" type="string" descr="Local file name to pass to the linker as --symbol-ordering-file"/>
        <field name="symlink_preferred_arch" type="bool" descr="if set, install a symlink to the preferred architecture"/>
        <field name="symlinks" type="string[]" descr="install symlinks to the binary.  Symlink names will have the suffix and the binary extension (if any) appended"/>
        <field name="system_shared_libs" type="blueprint[]" descr="list of system libraries that will be dynamically linked to shared library and executable modules.  If unset, generally defaults to libc, libm, and libdl.  Set to [] to prevent linking against the defaults."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
            <object-field name="recovery">
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="srcs" type="string[]" descr="list of source files that should only be used in the recovery variant of the C/C++ module."/>
                <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="cflags" type="string[]" descr="List of additional cflags that should be used to build the recovery variant of the C/C++ module."/>
            </object-field>
            <object-field name="vendor">
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_runtime_libs" type="blueprint[]" descr="list of runtime libs that should not be installed along with the vendor variant of the C/C++ module."/>
                <field name="version_script" type="string" descr="version script for this vendor variant"/>
                <field name="override_export_include_dirs" type="string[]" descr="list of exported include directories, like export_include_dirs, that will be applied to the vendor variant of this library. This will overwrite any other declarations."/>
                <field name="srcs" type="string[]" descr="list of source files that should only be used in the vendor variant of the C/C++ module."/>
                <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="cflags" type="string[]" descr="List of additional cflags that should be used to build the vendor variant of the C/C++ module."/>
            </object-field>
        </object-field>
        <field name="test_config" type="string" descr="the name of the test configuration (for example &quot;AndroidTest.xml&quot;) that should be installed with the module."/>
        <field name="test_config_template" type="string" descr="the name of the test configuration template (for example &quot;AndroidTestTemplate.xml&quot;) that should be installed with the module."/>
        <field name="test_options" type="string[]" descr="Test options."/>
        <field name="test_per_src" type="bool" descr="Create a separate binary for each source file.  Useful when there is global state that can not be torn down and reset between each test suite."/>
        <field name="test_suites" type="string[]" descr="list of compatibility suites (for example &quot;cts&quot;, &quot;vts&quot;) that the module should be installed into."/>
        <field name="tidy" type="bool" descr="whether to run clang-tidy over C-like sources."/>
        <field name="tidy_checks" type="string[]" descr="Extra checks to enable or disable in clang-tidy"/>
        <field name="tidy_checks_as_errors" type="string[]" descr="Checks that should be treated as errors."/>
        <field name="tidy_flags" type="string[]" descr="Extra flags to pass to clang-tidy"/>
        <field name="unexported_symbols_list" type="string" descr="local file name to pass to the linker as -unexported_symbols_list"/>
        <field name="unique_host_soname" type="bool" descr="rename host libraries to prevent overlap with system installed libraries"/>
        <field name="use_clang_lld" type="bool" descr="Use clang lld instead of gnu ld."/>
        <field name="use_version_lib" type="bool" descr="make android::build:GetBuildNumber() available containing the build ID."/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vendor_available" type="bool" descr="whether this module should be allowed to be directly depended by other modules with `vendor: true`, `proprietary: true`, or `vendor_available:true`. If set to true, two variants will be built separately, one like normal, and the other limited to the set of libraries and headers that are exposed to /vendor modules. The vendor variant may be used with a different (newer) /system, so it shouldn't have any unversioned runtime dependencies, or make assumptions about the system that may not be true in the future. If set to false, this module becomes inaccessible from /vendor modules. Default value is true when vndk: {enabled: true} or vendor: true. Nothing happens if BOARD_VNDK_VERSION isn't set in the BoardConfig.mk"/>
        <field name="version_script" type="string" descr="local file name to pass to the linker as --version_script"/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
        <object-field name="vndk">
            <field name="enabled" type="bool" descr="declared as a VNDK or VNDK-SP module. The vendor variant will be installed in /system instead of /vendor partition. `vendor_vailable` must be explicitly set to either true or false together with `vndk: {enabled: true}`."/>
            <field name="support_system_process" type="bool" descr="declared as a VNDK-SP module, which is a subset of VNDK. `vndk: { enabled: true }` must set together. All these modules are allowed to link to VNDK-SP or LL-NDK modules only. Other dependency will cause link-type errors. If `support_system_process` is not set or set to false, the module is VNDK-core and can link to other VNDK-core, VNDK-SP or LL-NDK modules only."/>
            <field name="extends" type="string" descr="Extending another module"/>
        </object-field>
        <field name="whole_static_libs" type="blueprint[]" descr="list of modules whose object files should be linked into this module in their entirety.  For static library modules, all of the .o files from the intermediate directory of the dependency will be linked into this modules .a file.  For a shared library, the dependency's .a file will be linked into this module using -Wl,--whole-archive."/>
        <field name="xom" type="bool"/>
        <field name="yaccflags" type="string[]" descr="list of module-specific flags that will be used for .y and .yy compiles"/>
    </blueprint>
    <blueprint name="filegroup">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="srcs lists files that will be included in this filegroup"/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="exclude_srcs" type="string[]"/>
        <field name="export_to_make_var" type="string" descr="Create a make variable with the specified name that contains the list of files in the filegroup, relative to the root of the source tree."/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="path" type="string" descr="The base path to the files.  May be used by other modules to determine which portion of the path to use.  For example, when a filegroup is used as data in a cc_test rule, the base path is stripped off the path and the remaining path is used as the installation directory."/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
        </object-field>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="prebuilt_etc">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="src" type="string" descr="Source file of this prebuilt."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="filename" type="string" descr="optional name for the installed file. If unspecified, name of the module is used as the file name"/>
        <field name="filename_from_src" type="bool" descr="when set to true, and filename property is not set, the name for the installed file is the same as the file name of the source file."/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="installable" type="bool" descr="Whether this module is directly installable to one of the partitions. Default: true."/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="recovery_available" type="bool" descr="Make this module available when building for recovery."/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="sub_dir" type="string" descr="optional subdirectory under which this file is installed into"/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
        </object-field>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="prebuilt_etc_host">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="src" type="string" descr="Source file of this prebuilt."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="filename" type="string" descr="optional name for the installed file. If unspecified, name of the module is used as the file name"/>
        <field name="filename_from_src" type="bool" descr="when set to true, and filename property is not set, the name for the installed file is the same as the file name of the source file."/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="installable" type="bool" descr="Whether this module is directly installable to one of the partitions. Default: true."/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="recovery_available" type="bool" descr="Make this module available when building for recovery."/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="sub_dir" type="string" descr="optional subdirectory under which this file is installed into"/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
        </object-field>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="prebuilt_usr_share">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="src" type="string" descr="Source file of this prebuilt."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="filename" type="string" descr="optional name for the installed file. If unspecified, name of the module is used as the file name"/>
        <field name="filename_from_src" type="bool" descr="when set to true, and filename property is not set, the name for the installed file is the same as the file name of the source file."/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="installable" type="bool" descr="Whether this module is directly installable to one of the partitions. Default: true."/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="recovery_available" type="bool" descr="Make this module available when building for recovery."/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="sub_dir" type="string" descr="optional subdirectory under which this file is installed into"/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
        </object-field>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="prebuilt_usr_share_host">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="src" type="string" descr="Source file of this prebuilt."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="filename" type="string" descr="optional name for the installed file. If unspecified, name of the module is used as the file name"/>
        <field name="filename_from_src" type="bool" descr="when set to true, and filename property is not set, the name for the installed file is the same as the file name of the source file."/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="installable" type="bool" descr="Whether this module is directly installable to one of the partitions. Default: true."/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="recovery_available" type="bool" descr="Make this module available when building for recovery."/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="sub_dir" type="string" descr="optional subdirectory under which this file is installed into"/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
        </object-field>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="sh_binary">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="src" type="string" descr="Source file of this prebuilt."/>
        <field name="host_supported" type="bool" descr="If set to true, build a variant of the module for the host.  Defaults to false."/>
        <field name="device_supported" type="bool" descr="If set to true, build a variant of the module for the device.  Defaults to true."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="filename" type="string" descr="optional name for the installed file. If unspecified, name of the module is used as the file name"/>
        <field name="filename_from_src" type="bool" descr="when set to true, and filename property is not set, the name for the installed file is the same as the file name of the source file."/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="installable" type="bool" descr="Whether this module is directly installable to one of the partitions. Default: true."/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="sub_dir" type="string" descr="optional subdirectory under which this file is installed into"/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
        </object-field>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="sh_binary_host">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="src" type="string" descr="Source file of this prebuilt."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="filename" type="string" descr="optional name for the installed file. If unspecified, name of the module is used as the file name"/>
        <field name="filename_from_src" type="bool" descr="when set to true, and filename property is not set, the name for the installed file is the same as the file name of the source file."/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="installable" type="bool" descr="Whether this module is directly installable to one of the partitions. Default: true."/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="sub_dir" type="string" descr="optional subdirectory under which this file is installed into"/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
        </object-field>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="sh_test">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="src" type="string" descr="Source file of this prebuilt."/>
        <field name="host_supported" type="bool" descr="If set to true, build a variant of the module for the host.  Defaults to false."/>
        <field name="device_supported" type="bool" descr="If set to true, build a variant of the module for the device.  Defaults to true."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="filename" type="string" descr="optional name for the installed file. If unspecified, name of the module is used as the file name"/>
        <field name="filename_from_src" type="bool" descr="when set to true, and filename property is not set, the name for the installed file is the same as the file name of the source file."/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="installable" type="bool" descr="Whether this module is directly installable to one of the partitions. Default: true."/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="sub_dir" type="string" descr="optional subdirectory under which this file is installed into"/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
        </object-field>
        <field name="test_config" type="string" descr="the name of the test configuration (for example &quot;AndroidTest.xml&quot;) that should be installed with the module."/>
        <field name="test_suites" type="string[]" descr="list of compatibility suites (for example &quot;cts&quot;, &quot;vts&quot;) that the module should be installed into."/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="soong_namespace">
        <field name="imports" type="string[]" descr="a list of namespaces that contain modules that will be referenced by modules in this namespace."/>
    </blueprint>
    <blueprint name="vts_config">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
        </object-field>
        <field name="test_config" type="string" descr="Override the default (AndroidTest.xml) test manifest file name."/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="apex">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="host_supported" type="bool" descr="If set to true, build a variant of the module for the host.  Defaults to false."/>
        <field name="device_supported" type="bool" descr="If set to true, build a variant of the module for the device.  Defaults to true."/>
        <field name="androidManifest" type="string" descr="AndroidManifest.xml file used for the zip container of this APEX bundle. If unspecified, a default one is automatically generated."/>
        <field name="apex_name" type="string" descr="Canonical name of the APEX bundle in the manifest file. If unspecified, defaults to the value of name"/>
        <field name="binaries" type="string[]" descr="List of native executables that are embedded inside this APEX bundle"/>
        <field name="certificate" type="string" descr="The name of a certificate in the default certificate directory, blank to use the default product certificate, or an android_app_certificate module name in the form &quot;:module&quot;."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="file_contexts" type="string" descr="Determines the file contexts file for setting security context to each file in this APEX bundle. Specifically, when this is set to <value>, /system/sepolicy/apex/<value>_file_contexts file is used. Default: <name_of_this_module>"/>
        <field name="ignore_system_library_special_case" type="bool" descr="For telling the apex to ignore special handling for system libraries such as bionic. Default is false."/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="installable" type="bool" descr="Whether this APEX is installable to one of the partitions. Default: true."/>
        <field name="java_libs" type="blueprint[]" descr="List of java libraries that are embedded inside this APEX bundle"/>
        <field name="key" type="string" descr="Name of the apex_key module that provides the private key to sign APEX"/>
        <field name="manifest" type="string" descr="Json manifest file describing meta info of this APEX bundle. Default: &quot;apex_manifest.json&quot;"/>
        <field name="multilib" type="string[]"/>
        <field name="native_shared_libs" type="blueprint[]" descr="List of native shared libs that are embedded inside this APEX bundle"/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="payload_type" type="string" descr="The type of APEX to build. Controls what the APEX payload is. Either 'image', 'zip' or 'both'. Default: 'image'."/>
        <field name="prebuilts" type="string[]" descr="List of prebuilt files that are embedded inside this APEX bundle"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <object-field name="target">
            <object-field name="android">
                <field name="multilib" type="string[]"/>
            </object-field>
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
        </object-field>
        <field name="use_vendor" type="bool" descr="For native libraries and binaries, use the vendor variant instead of the core (platform) variant. Default is false."/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="apex_defaults">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="host_supported" type="bool" descr="If set to true, build a variant of the module for the host.  Defaults to false."/>
        <field name="device_supported" type="bool" descr="If set to true, build a variant of the module for the device.  Defaults to true."/>
        <field name="androidManifest" type="string" descr="AndroidManifest.xml file used for the zip container of this APEX bundle. If unspecified, a default one is automatically generated."/>
        <field name="apex_name" type="string" descr="Canonical name of the APEX bundle in the manifest file. If unspecified, defaults to the value of name"/>
        <field name="binaries" type="string[]" descr="List of native executables that are embedded inside this APEX bundle"/>
        <field name="certificate" type="string" descr="The name of a certificate in the default certificate directory, blank to use the default product certificate, or an android_app_certificate module name in the form &quot;:module&quot;."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="file_contexts" type="string" descr="Determines the file contexts file for setting security context to each file in this APEX bundle. Specifically, when this is set to <value>, /system/sepolicy/apex/<value>_file_contexts file is used. Default: <name_of_this_module>"/>
        <field name="ignore_system_library_special_case" type="bool" descr="For telling the apex to ignore special handling for system libraries such as bionic. Default is false."/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="installable" type="bool" descr="Whether this APEX is installable to one of the partitions. Default: true."/>
        <field name="java_libs" type="blueprint[]" descr="List of java libraries that are embedded inside this APEX bundle"/>
        <field name="key" type="string" descr="Name of the apex_key module that provides the private key to sign APEX"/>
        <field name="manifest" type="string" descr="Json manifest file describing meta info of this APEX bundle. Default: &quot;apex_manifest.json&quot;"/>
        <field name="multilib" type="string[]"/>
        <field name="native_shared_libs" type="blueprint[]" descr="List of native shared libs that are embedded inside this APEX bundle"/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="payload_type" type="string" descr="The type of APEX to build. Controls what the APEX payload is. Either 'image', 'zip' or 'both'. Default: 'image'."/>
        <field name="prebuilts" type="string[]" descr="List of prebuilt files that are embedded inside this APEX bundle"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <object-field name="target">
            <object-field name="android">
                <field name="multilib" type="string[]"/>
            </object-field>
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
        </object-field>
        <field name="use_vendor" type="bool" descr="For native libraries and binaries, use the vendor variant instead of the core (platform) variant. Default is false."/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="apex_key">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="installable" type="bool" descr="Whether this key is installable to one of the partitions. Defualt: true."/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="private_key" type="string" descr="Path or module to the private key file in pem format. Used to sign APEXs."/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <field name="public_key" type="string" descr="Path or module to the public key file in avbpubkey format. Installed to the device. Base name of the file is used as the ID for the key."/>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
        </object-field>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="apex_test">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="host_supported" type="bool" descr="If set to true, build a variant of the module for the host.  Defaults to false."/>
        <field name="device_supported" type="bool" descr="If set to true, build a variant of the module for the device.  Defaults to true."/>
        <field name="androidManifest" type="string" descr="AndroidManifest.xml file used for the zip container of this APEX bundle. If unspecified, a default one is automatically generated."/>
        <field name="apex_name" type="string" descr="Canonical name of the APEX bundle in the manifest file. If unspecified, defaults to the value of name"/>
        <field name="binaries" type="string[]" descr="List of native executables that are embedded inside this APEX bundle"/>
        <field name="certificate" type="string" descr="The name of a certificate in the default certificate directory, blank to use the default product certificate, or an android_app_certificate module name in the form &quot;:module&quot;."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="file_contexts" type="string" descr="Determines the file contexts file for setting security context to each file in this APEX bundle. Specifically, when this is set to <value>, /system/sepolicy/apex/<value>_file_contexts file is used. Default: <name_of_this_module>"/>
        <field name="ignore_system_library_special_case" type="bool" descr="For telling the apex to ignore special handling for system libraries such as bionic. Default is false."/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="installable" type="bool" descr="Whether this APEX is installable to one of the partitions. Default: true."/>
        <field name="java_libs" type="blueprint[]" descr="List of java libraries that are embedded inside this APEX bundle"/>
        <field name="key" type="string" descr="Name of the apex_key module that provides the private key to sign APEX"/>
        <field name="manifest" type="string" descr="Json manifest file describing meta info of this APEX bundle. Default: &quot;apex_manifest.json&quot;"/>
        <field name="multilib" type="string[]"/>
        <field name="native_shared_libs" type="blueprint[]" descr="List of native shared libs that are embedded inside this APEX bundle"/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="payload_type" type="string" descr="The type of APEX to build. Controls what the APEX payload is. Either 'image', 'zip' or 'both'. Default: 'image'."/>
        <field name="prebuilts" type="string[]" descr="List of prebuilt files that are embedded inside this APEX bundle"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <object-field name="target">
            <object-field name="android">
                <field name="multilib" type="string[]"/>
            </object-field>
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
        </object-field>
        <field name="use_vendor" type="bool" descr="For native libraries and binaries, use the vendor variant instead of the core (platform) variant. Default is false."/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="prebuilt_apex">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="src" type="string"/>
        <object-field name="arch">
            <object-field name="arm">
                <field name="src" type="string"/>
            </object-field>
        </object-field>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="filename" type="string" descr="Optional name for the installed apex. If unspecified, name of the module is used as the file name"/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="installable" type="bool"/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="prefer" type="bool" descr="When prefer is set to true the prebuilt will be used instead of any source module with a matching name."/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
        </object-field>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="vintf_compatibility_matrix">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="list of source compatibility matrix XML files"/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="kernel_configs" type="string[]" descr="list of kernel_config modules to be combined to final output"/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="stem" type="string" descr="set the name of the output"/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
        </object-field>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="kernel_config">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="list of source files that should be named &quot;android-base.config&quot; for common requirements and &quot;android-base-foo.config&quot; for requirements on condition CONFIG_FOO=y."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="meta" type="string" descr="metadata XML file that contains minlts and complex conditional requirements."/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
        </object-field>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="target_fs_config_gen_filegroup">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
        </object-field>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="clang_builtin_headers">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="list of input files"/>
        <field name="cmd" type="string" descr="The command to run on one or more input files. Cmd supports substitution of a few variables (the actual substitution is implemented in GenerateAndroidBuildActions below) Available variables for substitution: All files used must be declared as inputs (to ensure proper up-to-date checks). Use &quot;$(in)&quot; directly in Cmd to ensure that all inputs used are declared."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="defaults" type="blueprint[]"/>
        <field name="depfile" type="bool" descr="Enable reading a file containing dependencies in gcc format after the command completes"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="exclude_srcs" type="string[]" descr="input files to exclude"/>
        <field name="export_include_dirs" type="string[]" descr="List of directories to export generated headers from"/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="out" type="string[]" descr="names of the output files that will be generated"/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
        </object-field>
        <field name="tool_files" type="string[]" descr="Local file that is used as the tool"/>
        <field name="tools" type="string[]" descr="name of the modules (if any) that produces the host executable.   Leave empty for prebuilts or scripts that do not need a module to build them."/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="libclang_rt_llndk_library">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="list of source files used to compile the C/C++ module.  May be .c, .cpp, or .S files. srcs may reference the outputs of other modules that produce source files like genrule or filegroup using the syntax &quot;:module&quot;."/>
        <object-field name="aidl">
            <field name="export_aidl_headers" type="bool" descr="export headers generated from .aidl sources"/>
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the aidl include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the aidl include paths."/>
            <field name="generate_traces" type="bool" descr="whether to generate traces (for systrace) for this interface"/>
        </object-field>
        <field name="allow_undefined_symbols" type="bool" descr="allow the module to contain undefined symbols.  By default, modules cannot contain undefined symbols that are not satisified by their immediate dependencies.  Set this flag to true to remove --no-undefined from the linker flags. This flag should only be necessary for compiling low-level libraries like libc."/>
        <field name="asflags" type="string[]" descr="list of module-specific flags that will be used for .S compiles"/>
        <field name="bootstrap" type="bool" descr="Allows this module to use non-APEX version of libraries. Useful for building binaries that are started before APEXes are activated."/>
        <field name="c_std" type="string" descr="C standard version to use. Can be a specific version (such as &quot;gnu11&quot;), &quot;experimental&quot; (which will use draft versions like C1x when available), or the empty string (which will use the default)."/>
        <field name="cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles."/>
        <field name="clang" type="bool" descr="Deprecated. true is the default, false is invalid."/>
        <field name="clang_asflags" type="string[]" descr="list of module-specific flags that will be used for .S compiles when compiling with clang"/>
        <field name="clang_cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles when compiling with clang"/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="conlyflags" type="string[]" descr="list of module-specific flags that will be used for C compiles"/>
        <field name="cpp_std" type="string" descr="C++ standard version to use. Can be a specific version (such as &quot;gnu++11&quot;), &quot;experimental&quot; (which will use draft versions like C++1z when available), or the empty string (which will use the default)."/>
        <field name="cppflags" type="string[]" descr="list of module-specific flags that will be used for C++ compiles"/>
        <object-field name="debug" descr="release">
            <field name="cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles in debug or release builds"/>
        </object-field>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="double_loadable" type="bool" descr="whether this module is capable of being loaded with other instance (possibly an older version) of the same module in the same process. Currently, a shared library that is a member of VNDK (vndk: {enabled: true}) can be double loaded in a vendor process if the library is also a (direct and indirect) dependency of an LLNDK library. Such libraries must be explicitly marked as `double_loadable: true` by the owner, or the dependency from the LLNDK lib should be cut if the lib is not designed to be double loaded."/>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the C/C++ module. This is most useful in the arch/multilib variants to remove non-common files"/>
        <field name="export_generated_headers" type="blueprint[]" descr="list of generated headers to re-export include directories from. Entries must be present in generated_headers."/>
        <field name="export_header_lib_headers" type="blueprint[]" descr="list of header libraries to re-export include directories from. Entries must be present in header_libs."/>
        <field name="export_headers_as_system" type="bool" descr="Whether to export any headers as -isystem instead of -I. Mainly for use by bionic/libc."/>
        <field name="export_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the include path (using -I) for this module and any module that links against this module.  Directories listed in export_include_dirs do not need to be listed in local_include_dirs."/>
        <field name="export_llndk_headers" type="string[]" descr="list of llndk headers to re-export include directories from."/>
        <field name="export_preprocessed_headers" type="string[]" descr="Which headers to process with versioner. This really only handles bionic/libc/include right now."/>
        <field name="export_shared_lib_headers" type="blueprint[]" descr="list of shared libraries to re-export include directories from. Entries must be present in shared_libs."/>
        <field name="export_static_lib_headers" type="blueprint[]" descr="list of static libraries to re-export include directories from. Entries must be present in static_libs."/>
        <field name="force_symbols_not_weak_list" type="string" descr="local file name to pass to the linker as -force_symbols_not_weak_list"/>
        <field name="force_symbols_weak_list" type="string" descr="local file name to pass to the linker as -force_symbols_weak_list"/>
        <field name="generated_headers" type="blueprint[]" descr="list of generated headers to add to the include path. These are the names of genrule modules."/>
        <field name="generated_sources" type="blueprint[]" descr="list of generated sources to compile. These are the names of gensrcs or genrule modules."/>
        <field name="gnu_extensions" type="bool" descr="if set to false, use -std=c++* instead of -std=gnu++*"/>
        <field name="group_static_libs" type="bool" descr="group static libraries.  This can resolve missing symbols issues with interdependencies between static libraries, but it is generally better to order them correctly instead."/>
        <object-field name="header_abi_checker">
            <field name="symbol_file" type="string" descr="Path to a symbol file that specifies the symbols to be included in the generated ABI dump file"/>
            <field name="exclude_symbol_versions" type="string[]" descr="Symbol versions that should be ignored from the symbol file"/>
            <field name="exclude_symbol_tags" type="string[]" descr="Symbol tags that should be ignored from the symbol file"/>
        </object-field>
        <field name="header_libs" type="blueprint[]" descr="list of modules that should only provide headers for this module."/>
        <field name="host_ldlibs" type="string[]" descr="-l arguments to pass to linker for host-provided shared libraries"/>
        <field name="include_build_directory" type="bool" descr="Add the directory containing the Android.bp file to the list of include directories. Defaults to true."/>
        <field name="include_dirs" type="string[]" descr="list of directories relative to the root of the source tree that will be added to the include path using -I. If possible, don't use this.  If adding paths from the current directory use local_include_dirs, if adding paths from other modules use export_include_dirs in that module."/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="instruction_set" type="string" descr="the instruction set architecture to use to compile the C/C++ module."/>
        <field name="ldflags" type="string[]" descr="list of module-specific flags that will be used for all link steps"/>
        <field name="local_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the include path using -I"/>
        <field name="logtags" type="string[]" descr="*.logtags files, to combine together in order to generate the /system/etc/event-log-tags file"/>
        <object-field name="lto">
            <field name="never" type="bool"/>
            <field name="full" type="bool"/>
            <field name="thin" type="bool"/>
        </object-field>
        <field name="native_coverage" type="bool"/>
        <field name="no_libcrt" type="bool" descr="don't link in libclang_rt.builtins-*.a"/>
        <field name="no_libgcc" type="bool" descr="don't link in libgcc.a"/>
        <field name="nocrt" type="bool" descr="don't link in crt_begin and crt_end.  This flag should only be necessary for compiling crt or libc."/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="openmp" type="bool" descr="Build and link with OpenMP"/>
        <field name="overrides" type="blueprint[]" descr="Names of modules to be overridden. Listed modules can only be other shared libraries (in Make or Soong). This does not completely prevent installation of the overridden libraries, but if both binaries would be installed by default (in PRODUCT_PACKAGES) the other library will be removed from PRODUCT_PACKAGES."/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="pack_relocations" type="bool" descr="Generate compact dynamic relocation table, default true."/>
        <object-field name="pgo">
            <field name="instrumentation" type="bool"/>
            <field name="sampling" type="bool"/>
            <field name="profile_file" type="string"/>
            <field name="benchmarks" type="string[]"/>
            <field name="enable_profile_use" type="bool"/>
            <field name="cflags" type="string[]" descr="Additional compiler flags to use when building this module for profiling (either instrumentation or sampling)."/>
        </object-field>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <object-field name="proto">
            <field name="export_proto_headers" type="bool" descr="export headers generated from .proto sources"/>
            <field name="static" type="bool" descr="Link statically against the protobuf runtime"/>
            <field name="type" type="string" descr="Proto generator type.  C++: full or lite.  Java: micro, nano, stream, or lite."/>
            <field name="plugin" type="string" descr="Proto plugin to use as the generator.  Must be a cc_binary_host module."/>
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the protoc include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the bp file that will be added to the protoc include paths."/>
            <field name="canonical_path_from_root" type="bool" descr="whether to identify the proto files from the root of the source tree (the original method in Android, useful for android-specific protos), or relative from where they were specified (useful for external/third party protos). This defaults to true today, but is expected to default to false in the future."/>
        </object-field>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="recovery_available" type="bool" descr="Make this module available when building for recovery"/>
        <field name="reexportedIncludeFlags" type="string[]"/>
        <object-field name="renderscript">
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the llvm-rs-cc include paths"/>
            <field name="flags" type="string[]" descr="list of flags that will be passed to llvm-rs-cc"/>
            <field name="target_api" type="string" descr="Renderscript API level to target"/>
        </object-field>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="rtti" type="bool" descr="pass -frtti instead of -fno-rtti"/>
        <field name="runtime_libs" type="blueprint[]" descr="list of modules that should be installed with this module.  This is similar to 'required' but '.vendor' suffix will be appended to the module names if the shared libraries have vendor variants and this module uses VNDK."/>
        <field name="sdclang" type="bool" descr="compile module with SDLLVM instead of AOSP LLVM"/>
        <field name="sdk_version" type="string" descr="Minimum sdk version supported when compiling against the ndk"/>
        <field name="shared" type="string[]"/>
        <field name="shared_libs" type="blueprint[]" descr="list of modules that should be dynamically linked into this module."/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="static" type="string[]"/>
        <field name="static_libs" type="blueprint[]" descr="list of modules that should be statically linked into this module."/>
        <field name="static_ndk_lib" type="bool"/>
        <field name="stem" type="string" descr="set the name of the output"/>
        <object-field name="strip">
            <field name="none" type="bool"/>
            <field name="all" type="bool"/>
            <field name="keep_symbols" type="bool"/>
            <field name="keep_symbols_list" type="string[]"/>
            <field name="use_gnu_strip" type="bool"/>
        </object-field>
        <object-field name="stubs">
            <field name="symbol_file" type="string" descr="Relative path to the symbol map. The symbol map provides the list of symbols that are exported for stubs variant of this library."/>
            <field name="versions" type="string[]" descr="List versions to generate stubs libs for."/>
        </object-field>
        <field name="symbol_file" type="string" descr="Relative path to the symbol map. An example file can be seen here: TODO(danalbert): Make an example."/>
        <field name="symbol_ordering_file" type="string" descr="Local file name to pass to the linker as --symbol-ordering-file"/>
        <field name="system_shared_libs" type="blueprint[]" descr="list of system libraries that will be dynamically linked to shared library and executable modules.  If unset, generally defaults to libc, libm, and libdl.  Set to [] to prevent linking against the defaults."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
            <object-field name="recovery">
                <field name="srcs" type="string[]" descr="list of source files that should only be used in the recovery variant of the C/C++ module."/>
                <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="cflags" type="string[]" descr="List of additional cflags that should be used to build the recovery variant of the C/C++ module."/>
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the recovery variant of the C/C++ module."/>
            </object-field>
            <object-field name="vendor">
                <field name="override_export_include_dirs" type="string[]" descr="list of exported include directories, like export_include_dirs, that will be applied to the vendor variant of this library. This will overwrite any other declarations."/>
                <field name="srcs" type="string[]" descr="list of source files that should only be used in the vendor variant of the C/C++ module."/>
                <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="cflags" type="string[]" descr="List of additional cflags that should be used to build the vendor variant of the C/C++ module."/>
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_runtime_libs" type="blueprint[]" descr="list of runtime libs that should not be installed along with the vendor variant of the C/C++ module."/>
                <field name="version_script" type="string" descr="version script for this vendor variant"/>
            </object-field>
        </object-field>
        <field name="tidy" type="bool" descr="whether to run clang-tidy over C-like sources."/>
        <field name="tidy_checks" type="string[]" descr="Extra checks to enable or disable in clang-tidy"/>
        <field name="tidy_checks_as_errors" type="string[]" descr="Checks that should be treated as errors."/>
        <field name="tidy_flags" type="string[]" descr="Extra flags to pass to clang-tidy"/>
        <field name="unexported_symbols_list" type="string" descr="local file name to pass to the linker as -unexported_symbols_list"/>
        <field name="unique_host_soname" type="bool" descr="rename host libraries to prevent overlap with system installed libraries"/>
        <field name="unversioned" type="bool" descr="Whether the system library uses symbol versions."/>
        <field name="use_clang_lld" type="bool" descr="Use clang lld instead of gnu ld."/>
        <field name="use_version_lib" type="bool" descr="make android::build:GetBuildNumber() available containing the build ID."/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vendor_available" type="bool" descr="whether this module can be directly depended upon by libs that are installed to /vendor. When set to false, this module can only be depended on by VNDK libraries, not vendor libraries. This effectively hides this module from vendors. Default value is true."/>
        <field name="version_script" type="string" descr="local file name to pass to the linker as --version_script"/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
        <object-field name="vndk">
            <field name="enabled" type="bool" descr="declared as a VNDK or VNDK-SP module. The vendor variant will be installed in /system instead of /vendor partition. `vendor_vailable` must be explicitly set to either true or false together with `vndk: {enabled: true}`."/>
            <field name="support_system_process" type="bool" descr="declared as a VNDK-SP module, which is a subset of VNDK. `vndk: { enabled: true }` must set together. All these modules are allowed to link to VNDK-SP or LL-NDK modules only. Other dependency will cause link-type errors. If `support_system_process` is not set or set to false, the module is VNDK-core and can link to other VNDK-core, VNDK-SP or LL-NDK modules only."/>
            <field name="extends" type="string" descr="Extending another module"/>
        </object-field>
        <field name="whole_static_libs" type="blueprint[]" descr="list of modules whose object files should be linked into this module in their entirety.  For static library modules, all of the .o files from the intermediate directory of the dependency will be linked into this modules .a file.  For a shared library, the dependency's .a file will be linked into this module using -Wl,--whole-archive."/>
        <field name="xom" type="bool"/>
        <field name="yaccflags" type="string[]" descr="list of module-specific flags that will be used for .y and .yy compiles"/>
    </blueprint>
    <blueprint name="libclang_rt_prebuilt_library_shared">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="a prebuilt library or binary. Can reference a genrule module that generates an executable file."/>
        <field name="host_supported" type="bool" descr="If set to true, build a variant of the module for the host.  Defaults to false."/>
        <field name="device_supported" type="bool" descr="If set to true, build a variant of the module for the device.  Defaults to true."/>
        <object-field name="aidl">
            <field name="export_aidl_headers" type="bool" descr="export headers generated from .aidl sources"/>
        </object-field>
        <field name="allow_undefined_symbols" type="bool" descr="allow the module to contain undefined symbols.  By default, modules cannot contain undefined symbols that are not satisified by their immediate dependencies.  Set this flag to true to remove --no-undefined from the linker flags. This flag should only be necessary for compiling low-level libraries like libc."/>
        <field name="bootstrap" type="bool" descr="Allows this module to use non-APEX version of libraries. Useful for building binaries that are started before APEXes are activated."/>
        <field name="check_elf_files" type="bool" descr="Check the prebuilt ELF files (e.g. DT_SONAME, DT_NEEDED, resolution of undefined symbols, etc), default true."/>
        <field name="clang" type="bool" descr="Deprecated. true is the default, false is invalid."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="double_loadable" type="bool" descr="whether this module is capable of being loaded with other instance (possibly an older version) of the same module in the same process. Currently, a shared library that is a member of VNDK (vndk: {enabled: true}) can be double loaded in a vendor process if the library is also a (direct and indirect) dependency of an LLNDK library. Such libraries must be explicitly marked as `double_loadable: true` by the owner, or the dependency from the LLNDK lib should be cut if the lib is not designed to be double loaded."/>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="export_generated_headers" type="blueprint[]" descr="list of generated headers to re-export include directories from. Entries must be present in generated_headers."/>
        <field name="export_header_lib_headers" type="blueprint[]" descr="list of header libraries to re-export include directories from. Entries must be present in header_libs."/>
        <field name="export_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the include path (using -I) for this module and any module that links against this module.  Directories listed in export_include_dirs do not need to be listed in local_include_dirs."/>
        <field name="export_shared_lib_headers" type="blueprint[]" descr="list of shared libraries to re-export include directories from. Entries must be present in shared_libs."/>
        <field name="export_static_lib_headers" type="blueprint[]" descr="list of static libraries to re-export include directories from. Entries must be present in static_libs."/>
        <field name="force_symbols_not_weak_list" type="string" descr="local file name to pass to the linker as -force_symbols_not_weak_list"/>
        <field name="force_symbols_weak_list" type="string" descr="local file name to pass to the linker as -force_symbols_weak_list"/>
        <field name="group_static_libs" type="bool" descr="group static libraries.  This can resolve missing symbols issues with interdependencies between static libraries, but it is generally better to order them correctly instead."/>
        <field name="has_stubs" type="bool"/>
        <object-field name="header_abi_checker">
            <field name="symbol_file" type="string" descr="Path to a symbol file that specifies the symbols to be included in the generated ABI dump file"/>
            <field name="exclude_symbol_versions" type="string[]" descr="Symbol versions that should be ignored from the symbol file"/>
            <field name="exclude_symbol_tags" type="string[]" descr="Symbol tags that should be ignored from the symbol file"/>
        </object-field>
        <field name="header_libs" type="blueprint[]" descr="list of modules that should only provide headers for this module."/>
        <field name="host_ldlibs" type="string[]" descr="-l arguments to pass to linker for host-provided shared libraries"/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="ldflags" type="string[]" descr="list of module-specific flags that will be used for all link steps"/>
        <field name="logtags" type="string[]" descr="*.logtags files, to combine together in order to generate the /system/etc/event-log-tags file"/>
        <object-field name="lto">
            <field name="never" type="bool"/>
            <field name="full" type="bool"/>
            <field name="thin" type="bool"/>
        </object-field>
        <field name="native_coverage" type="bool"/>
        <field name="no_libcrt" type="bool" descr="don't link in libclang_rt.builtins-*.a"/>
        <field name="no_libgcc" type="bool" descr="don't link in libgcc.a"/>
        <field name="nocrt" type="bool" descr="don't link in crt_begin and crt_end.  This flag should only be necessary for compiling crt or libc."/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="overrides" type="blueprint[]" descr="Names of modules to be overridden. Listed modules can only be other shared libraries (in Make or Soong). This does not completely prevent installation of the overridden libraries, but if both binaries would be installed by default (in PRODUCT_PACKAGES) the other library will be removed from PRODUCT_PACKAGES."/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="pack_relocations" type="bool" descr="Generate compact dynamic relocation table, default true."/>
        <object-field name="pgo">
            <field name="instrumentation" type="bool"/>
            <field name="sampling" type="bool"/>
            <field name="profile_file" type="string"/>
            <field name="benchmarks" type="string[]"/>
            <field name="enable_profile_use" type="bool"/>
            <field name="cflags" type="string[]" descr="Additional compiler flags to use when building this module for profiling (either instrumentation or sampling)."/>
        </object-field>
        <field name="prefer" type="bool" descr="When prefer is set to true the prebuilt will be used instead of any source module with a matching name."/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <object-field name="proto">
            <field name="export_proto_headers" type="bool" descr="export headers generated from .proto sources"/>
        </object-field>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="recovery_available" type="bool" descr="Make this module available when building for recovery"/>
        <field name="reexportedIncludeFlags" type="string[]"/>
        <field name="relative_install_path" type="string" descr="install to a subdirectory of the default install path for the module"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="runtime_libs" type="blueprint[]" descr="list of modules that should be installed with this module.  This is similar to 'required' but '.vendor' suffix will be appended to the module names if the shared libraries have vendor variants and this module uses VNDK."/>
        <object-field name="sanitize">
            <field name="never" type="bool"/>
            <field name="address" type="bool" descr="main sanitizers"/>
            <field name="thread" type="bool"/>
            <field name="hwaddress" type="bool"/>
            <field name="undefined" type="bool" descr="local sanitizers"/>
            <field name="all_undefined" type="bool"/>
            <field name="misc_undefined" type="string[]"/>
            <field name="coverage" type="bool"/>
            <field name="safestack" type="bool"/>
            <field name="cfi" type="bool"/>
            <field name="integer_overflow" type="bool"/>
            <field name="scudo" type="bool"/>
            <field name="scs" type="bool"/>
            <object-field name="diag">
                <field name="undefined" type="bool"/>
                <field name="cfi" type="bool"/>
                <field name="integer_overflow" type="bool"/>
                <field name="misc_undefined" type="string[]"/>
                <field name="no_recover" type="string[]"/>
            </object-field>
            <field name="recover" type="string[]" descr="value to pass to -fsanitize-recover="/>
            <field name="blacklist" type="string" descr="value to pass to -fsanitize-blacklist"/>
        </object-field>
        <field name="sdclang" type="bool" descr="compile module with SDLLVM instead of AOSP LLVM"/>
        <field name="sdk_version" type="string" descr="Minimum sdk version supported when compiling against the ndk"/>
        <field name="shared" type="string[]"/>
        <field name="shared_libs" type="blueprint[]" descr="list of modules that should be dynamically linked into this module."/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="static" type="string[]"/>
        <field name="static_libs" type="blueprint[]" descr="list of modules that should be statically linked into this module."/>
        <field name="static_ndk_lib" type="bool"/>
        <field name="stem" type="string" descr="set the name of the output"/>
        <field name="stl" type="string" descr="Select the STL library to use.  Possible values are &quot;libc++&quot;, &quot;libc++_static&quot;, &quot;libstdc++&quot;, or &quot;none&quot;. Leave blank to select the default."/>
        <object-field name="strip">
            <field name="none" type="bool"/>
            <field name="all" type="bool"/>
            <field name="keep_symbols" type="bool"/>
            <field name="keep_symbols_list" type="string[]"/>
            <field name="use_gnu_strip" type="bool"/>
        </object-field>
        <object-field name="stubs">
            <field name="symbol_file" type="string" descr="Relative path to the symbol map. The symbol map provides the list of symbols that are exported for stubs variant of this library."/>
            <field name="versions" type="string[]" descr="List versions to generate stubs libs for."/>
        </object-field>
        <field name="symbol_ordering_file" type="string" descr="Local file name to pass to the linker as --symbol-ordering-file"/>
        <field name="system_shared_libs" type="blueprint[]" descr="list of system libraries that will be dynamically linked to shared library and executable modules.  If unset, generally defaults to libc, libm, and libdl.  Set to [] to prevent linking against the defaults."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
            <object-field name="recovery">
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the recovery variant of the C/C++ module."/>
            </object-field>
            <object-field name="vendor">
                <field name="override_export_include_dirs" type="string[]" descr="list of exported include directories, like export_include_dirs, that will be applied to the vendor variant of this library. This will overwrite any other declarations."/>
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_runtime_libs" type="blueprint[]" descr="list of runtime libs that should not be installed along with the vendor variant of the C/C++ module."/>
                <field name="version_script" type="string" descr="version script for this vendor variant"/>
            </object-field>
        </object-field>
        <field name="tidy" type="bool" descr="whether to run clang-tidy over C-like sources."/>
        <field name="tidy_checks" type="string[]" descr="Extra checks to enable or disable in clang-tidy"/>
        <field name="tidy_checks_as_errors" type="string[]" descr="Checks that should be treated as errors."/>
        <field name="tidy_flags" type="string[]" descr="Extra flags to pass to clang-tidy"/>
        <field name="unexported_symbols_list" type="string" descr="local file name to pass to the linker as -unexported_symbols_list"/>
        <field name="unique_host_soname" type="bool" descr="rename host libraries to prevent overlap with system installed libraries"/>
        <field name="use_clang_lld" type="bool" descr="Use clang lld instead of gnu ld."/>
        <field name="use_version_lib" type="bool" descr="make android::build:GetBuildNumber() available containing the build ID."/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vendor_available" type="bool" descr="whether this module should be allowed to be directly depended by other modules with `vendor: true`, `proprietary: true`, or `vendor_available:true`. If set to true, two variants will be built separately, one like normal, and the other limited to the set of libraries and headers that are exposed to /vendor modules. The vendor variant may be used with a different (newer) /system, so it shouldn't have any unversioned runtime dependencies, or make assumptions about the system that may not be true in the future. If set to false, this module becomes inaccessible from /vendor modules. Default value is true when vndk: {enabled: true} or vendor: true. Nothing happens if BOARD_VNDK_VERSION isn't set in the BoardConfig.mk"/>
        <field name="version_script" type="string" descr="local file name to pass to the linker as --version_script"/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
        <object-field name="vndk">
            <field name="enabled" type="bool" descr="declared as a VNDK or VNDK-SP module. The vendor variant will be installed in /system instead of /vendor partition. `vendor_vailable` must be explicitly set to either true or false together with `vndk: {enabled: true}`."/>
            <field name="support_system_process" type="bool" descr="declared as a VNDK-SP module, which is a subset of VNDK. `vndk: { enabled: true }` must set together. All these modules are allowed to link to VNDK-SP or LL-NDK modules only. Other dependency will cause link-type errors. If `support_system_process` is not set or set to false, the module is VNDK-core and can link to other VNDK-core, VNDK-SP or LL-NDK modules only."/>
            <field name="extends" type="string" descr="Extending another module"/>
        </object-field>
        <field name="whole_static_libs" type="blueprint[]" descr="list of modules whose object files should be linked into this module in their entirety.  For static library modules, all of the .o files from the intermediate directory of the dependency will be linked into this modules .a file.  For a shared library, the dependency's .a file will be linked into this module using -Wl,--whole-archive."/>
        <field name="xom" type="bool"/>
    </blueprint>
    <blueprint name="libclang_rt_prebuilt_library_static">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="a prebuilt library or binary. Can reference a genrule module that generates an executable file."/>
        <field name="host_supported" type="bool" descr="If set to true, build a variant of the module for the host.  Defaults to false."/>
        <field name="device_supported" type="bool" descr="If set to true, build a variant of the module for the device.  Defaults to true."/>
        <object-field name="aidl">
            <field name="export_aidl_headers" type="bool" descr="export headers generated from .aidl sources"/>
        </object-field>
        <field name="allow_undefined_symbols" type="bool" descr="allow the module to contain undefined symbols.  By default, modules cannot contain undefined symbols that are not satisified by their immediate dependencies.  Set this flag to true to remove --no-undefined from the linker flags. This flag should only be necessary for compiling low-level libraries like libc."/>
        <field name="bootstrap" type="bool" descr="Allows this module to use non-APEX version of libraries. Useful for building binaries that are started before APEXes are activated."/>
        <field name="check_elf_files" type="bool" descr="Check the prebuilt ELF files (e.g. DT_SONAME, DT_NEEDED, resolution of undefined symbols, etc), default true."/>
        <field name="clang" type="bool" descr="Deprecated. true is the default, false is invalid."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="double_loadable" type="bool" descr="whether this module is capable of being loaded with other instance (possibly an older version) of the same module in the same process. Currently, a shared library that is a member of VNDK (vndk: {enabled: true}) can be double loaded in a vendor process if the library is also a (direct and indirect) dependency of an LLNDK library. Such libraries must be explicitly marked as `double_loadable: true` by the owner, or the dependency from the LLNDK lib should be cut if the lib is not designed to be double loaded."/>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="export_generated_headers" type="blueprint[]" descr="list of generated headers to re-export include directories from. Entries must be present in generated_headers."/>
        <field name="export_header_lib_headers" type="blueprint[]" descr="list of header libraries to re-export include directories from. Entries must be present in header_libs."/>
        <field name="export_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the include path (using -I) for this module and any module that links against this module.  Directories listed in export_include_dirs do not need to be listed in local_include_dirs."/>
        <field name="export_shared_lib_headers" type="blueprint[]" descr="list of shared libraries to re-export include directories from. Entries must be present in shared_libs."/>
        <field name="export_static_lib_headers" type="blueprint[]" descr="list of static libraries to re-export include directories from. Entries must be present in static_libs."/>
        <field name="force_symbols_not_weak_list" type="string" descr="local file name to pass to the linker as -force_symbols_not_weak_list"/>
        <field name="force_symbols_weak_list" type="string" descr="local file name to pass to the linker as -force_symbols_weak_list"/>
        <field name="group_static_libs" type="bool" descr="group static libraries.  This can resolve missing symbols issues with interdependencies between static libraries, but it is generally better to order them correctly instead."/>
        <object-field name="header_abi_checker">
            <field name="symbol_file" type="string" descr="Path to a symbol file that specifies the symbols to be included in the generated ABI dump file"/>
            <field name="exclude_symbol_versions" type="string[]" descr="Symbol versions that should be ignored from the symbol file"/>
            <field name="exclude_symbol_tags" type="string[]" descr="Symbol tags that should be ignored from the symbol file"/>
        </object-field>
        <field name="header_libs" type="blueprint[]" descr="list of modules that should only provide headers for this module."/>
        <field name="host_ldlibs" type="string[]" descr="-l arguments to pass to linker for host-provided shared libraries"/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="ldflags" type="string[]" descr="list of module-specific flags that will be used for all link steps"/>
        <field name="logtags" type="string[]" descr="*.logtags files, to combine together in order to generate the /system/etc/event-log-tags file"/>
        <object-field name="lto">
            <field name="never" type="bool"/>
            <field name="full" type="bool"/>
            <field name="thin" type="bool"/>
        </object-field>
        <field name="native_coverage" type="bool"/>
        <field name="no_libcrt" type="bool" descr="don't link in libclang_rt.builtins-*.a"/>
        <field name="no_libgcc" type="bool" descr="don't link in libgcc.a"/>
        <field name="nocrt" type="bool" descr="don't link in crt_begin and crt_end.  This flag should only be necessary for compiling crt or libc."/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="overrides" type="blueprint[]" descr="Names of modules to be overridden. Listed modules can only be other shared libraries (in Make or Soong). This does not completely prevent installation of the overridden libraries, but if both binaries would be installed by default (in PRODUCT_PACKAGES) the other library will be removed from PRODUCT_PACKAGES."/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="pack_relocations" type="bool" descr="Generate compact dynamic relocation table, default true."/>
        <object-field name="pgo">
            <field name="instrumentation" type="bool"/>
            <field name="sampling" type="bool"/>
            <field name="profile_file" type="string"/>
            <field name="benchmarks" type="string[]"/>
            <field name="enable_profile_use" type="bool"/>
            <field name="cflags" type="string[]" descr="Additional compiler flags to use when building this module for profiling (either instrumentation or sampling)."/>
        </object-field>
        <field name="prefer" type="bool" descr="When prefer is set to true the prebuilt will be used instead of any source module with a matching name."/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <object-field name="proto">
            <field name="export_proto_headers" type="bool" descr="export headers generated from .proto sources"/>
        </object-field>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="recovery_available" type="bool" descr="Make this module available when building for recovery"/>
        <field name="reexportedIncludeFlags" type="string[]"/>
        <field name="relative_install_path" type="string" descr="install to a subdirectory of the default install path for the module"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="runtime_libs" type="blueprint[]" descr="list of modules that should be installed with this module.  This is similar to 'required' but '.vendor' suffix will be appended to the module names if the shared libraries have vendor variants and this module uses VNDK."/>
        <object-field name="sanitize">
            <field name="never" type="bool"/>
            <field name="address" type="bool" descr="main sanitizers"/>
            <field name="thread" type="bool"/>
            <field name="hwaddress" type="bool"/>
            <field name="undefined" type="bool" descr="local sanitizers"/>
            <field name="all_undefined" type="bool"/>
            <field name="misc_undefined" type="string[]"/>
            <field name="coverage" type="bool"/>
            <field name="safestack" type="bool"/>
            <field name="cfi" type="bool"/>
            <field name="integer_overflow" type="bool"/>
            <field name="scudo" type="bool"/>
            <field name="scs" type="bool"/>
            <object-field name="diag">
                <field name="undefined" type="bool"/>
                <field name="cfi" type="bool"/>
                <field name="integer_overflow" type="bool"/>
                <field name="misc_undefined" type="string[]"/>
                <field name="no_recover" type="string[]"/>
            </object-field>
            <field name="recover" type="string[]" descr="value to pass to -fsanitize-recover="/>
            <field name="blacklist" type="string" descr="value to pass to -fsanitize-blacklist"/>
        </object-field>
        <field name="sdclang" type="bool" descr="compile module with SDLLVM instead of AOSP LLVM"/>
        <field name="sdk_version" type="string" descr="Minimum sdk version supported when compiling against the ndk"/>
        <field name="shared" type="string[]"/>
        <field name="shared_libs" type="blueprint[]" descr="list of modules that should be dynamically linked into this module."/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="static" type="string[]"/>
        <field name="static_libs" type="blueprint[]" descr="list of modules that should be statically linked into this module."/>
        <field name="static_ndk_lib" type="bool"/>
        <field name="stem" type="string" descr="set the name of the output"/>
        <field name="stl" type="string" descr="Select the STL library to use.  Possible values are &quot;libc++&quot;, &quot;libc++_static&quot;, &quot;libstdc++&quot;, or &quot;none&quot;. Leave blank to select the default."/>
        <object-field name="strip">
            <field name="none" type="bool"/>
            <field name="all" type="bool"/>
            <field name="keep_symbols" type="bool"/>
            <field name="keep_symbols_list" type="string[]"/>
            <field name="use_gnu_strip" type="bool"/>
        </object-field>
        <object-field name="stubs">
            <field name="symbol_file" type="string" descr="Relative path to the symbol map. The symbol map provides the list of symbols that are exported for stubs variant of this library."/>
            <field name="versions" type="string[]" descr="List versions to generate stubs libs for."/>
        </object-field>
        <field name="symbol_ordering_file" type="string" descr="Local file name to pass to the linker as --symbol-ordering-file"/>
        <field name="system_shared_libs" type="blueprint[]" descr="list of system libraries that will be dynamically linked to shared library and executable modules.  If unset, generally defaults to libc, libm, and libdl.  Set to [] to prevent linking against the defaults."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
            <object-field name="recovery">
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the recovery variant of the C/C++ module."/>
            </object-field>
            <object-field name="vendor">
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_runtime_libs" type="blueprint[]" descr="list of runtime libs that should not be installed along with the vendor variant of the C/C++ module."/>
                <field name="version_script" type="string" descr="version script for this vendor variant"/>
                <field name="override_export_include_dirs" type="string[]" descr="list of exported include directories, like export_include_dirs, that will be applied to the vendor variant of this library. This will overwrite any other declarations."/>
            </object-field>
        </object-field>
        <field name="tidy" type="bool" descr="whether to run clang-tidy over C-like sources."/>
        <field name="tidy_checks" type="string[]" descr="Extra checks to enable or disable in clang-tidy"/>
        <field name="tidy_checks_as_errors" type="string[]" descr="Checks that should be treated as errors."/>
        <field name="tidy_flags" type="string[]" descr="Extra flags to pass to clang-tidy"/>
        <field name="unexported_symbols_list" type="string" descr="local file name to pass to the linker as -unexported_symbols_list"/>
        <field name="unique_host_soname" type="bool" descr="rename host libraries to prevent overlap with system installed libraries"/>
        <field name="use_clang_lld" type="bool" descr="Use clang lld instead of gnu ld."/>
        <field name="use_version_lib" type="bool" descr="make android::build:GetBuildNumber() available containing the build ID."/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vendor_available" type="bool" descr="whether this module should be allowed to be directly depended by other modules with `vendor: true`, `proprietary: true`, or `vendor_available:true`. If set to true, two variants will be built separately, one like normal, and the other limited to the set of libraries and headers that are exposed to /vendor modules. The vendor variant may be used with a different (newer) /system, so it shouldn't have any unversioned runtime dependencies, or make assumptions about the system that may not be true in the future. If set to false, this module becomes inaccessible from /vendor modules. Default value is true when vndk: {enabled: true} or vendor: true. Nothing happens if BOARD_VNDK_VERSION isn't set in the BoardConfig.mk"/>
        <field name="version_script" type="string" descr="local file name to pass to the linker as --version_script"/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
        <object-field name="vndk">
            <field name="enabled" type="bool" descr="declared as a VNDK or VNDK-SP module. The vendor variant will be installed in /system instead of /vendor partition. `vendor_vailable` must be explicitly set to either true or false together with `vndk: {enabled: true}`."/>
            <field name="support_system_process" type="bool" descr="declared as a VNDK-SP module, which is a subset of VNDK. `vndk: { enabled: true }` must set together. All these modules are allowed to link to VNDK-SP or LL-NDK modules only. Other dependency will cause link-type errors. If `support_system_process` is not set or set to false, the module is VNDK-core and can link to other VNDK-core, VNDK-SP or LL-NDK modules only."/>
            <field name="extends" type="string" descr="Extending another module"/>
        </object-field>
        <field name="whole_static_libs" type="blueprint[]" descr="list of modules whose object files should be linked into this module in their entirety.  For static library modules, all of the .o files from the intermediate directory of the dependency will be linked into this modules .a file.  For a shared library, the dependency's .a file will be linked into this module using -Wl,--whole-archive."/>
        <field name="xom" type="bool"/>
    </blueprint>
    <blueprint name="llvm_darwin_filegroup">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="srcs lists files that will be included in this filegroup"/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="exclude_srcs" type="string[]"/>
        <field name="export_to_make_var" type="string" descr="Create a make variable with the specified name that contains the list of files in the filegroup, relative to the root of the source tree."/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="path" type="string" descr="The base path to the files.  May be used by other modules to determine which portion of the path to use.  For example, when a filegroup is used as data in a cc_test rule, the base path is stripped off the path and the remaining path is used as the installation directory."/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
        </object-field>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="llvm_host_defaults">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="list of source files used to compile the C/C++ module.  May be .c, .cpp, or .S files. srcs may reference the outputs of other modules that produce source files like genrule or filegroup using the syntax &quot;:module&quot;."/>
        <field name="host_supported" type="bool" descr="If set to true, build a variant of the module for the host.  Defaults to false."/>
        <field name="device_supported" type="bool" descr="If set to true, build a variant of the module for the device.  Defaults to true."/>
        <object-field name="aidl">
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the aidl include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the aidl include paths."/>
            <field name="generate_traces" type="bool" descr="whether to generate traces (for systrace) for this interface"/>
            <field name="export_aidl_headers" type="bool" descr="export headers generated from .aidl sources"/>
        </object-field>
        <field name="allow_undefined_symbols" type="bool" descr="allow the module to contain undefined symbols.  By default, modules cannot contain undefined symbols that are not satisified by their immediate dependencies.  Set this flag to true to remove --no-undefined from the linker flags. This flag should only be necessary for compiling low-level libraries like libc."/>
        <field name="asflags" type="string[]" descr="list of module-specific flags that will be used for .S compiles"/>
        <field name="bootstrap" type="bool" descr="Allows this module to use non-APEX version of libraries. Useful for building binaries that are started before APEXes are activated."/>
        <field name="c_std" type="string" descr="C standard version to use. Can be a specific version (such as &quot;gnu11&quot;), &quot;experimental&quot; (which will use draft versions like C1x when available), or the empty string (which will use the default)."/>
        <field name="cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles."/>
        <field name="clang" type="bool" descr="Deprecated. true is the default, false is invalid."/>
        <field name="clang_asflags" type="string[]" descr="list of module-specific flags that will be used for .S compiles when compiling with clang"/>
        <field name="clang_cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles when compiling with clang"/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="conlyflags" type="string[]" descr="list of module-specific flags that will be used for C compiles"/>
        <field name="cpp_std" type="string" descr="C++ standard version to use. Can be a specific version (such as &quot;gnu++11&quot;), &quot;experimental&quot; (which will use draft versions like C++1z when available), or the empty string (which will use the default)."/>
        <field name="cppflags" type="string[]" descr="list of module-specific flags that will be used for C++ compiles"/>
        <field name="data" type="string[]" descr="list of files or filegroup modules that provide data that should be installed alongside the test"/>
        <object-field name="debug" descr="release">
            <field name="cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles in debug or release builds"/>
        </object-field>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="double_loadable" type="bool" descr="whether this module is capable of being loaded with other instance (possibly an older version) of the same module in the same process. Currently, a shared library that is a member of VNDK (vndk: {enabled: true}) can be double loaded in a vendor process if the library is also a (direct and indirect) dependency of an LLNDK library. Such libraries must be explicitly marked as `double_loadable: true` by the owner, or the dependency from the LLNDK lib should be cut if the lib is not designed to be double loaded."/>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the C/C++ module. This is most useful in the arch/multilib variants to remove non-common files"/>
        <field name="export_generated_headers" type="blueprint[]" descr="list of generated headers to re-export include directories from. Entries must be present in generated_headers."/>
        <field name="export_header_lib_headers" type="blueprint[]" descr="list of header libraries to re-export include directories from. Entries must be present in header_libs."/>
        <field name="export_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the include path (using -I) for this module and any module that links against this module.  Directories listed in export_include_dirs do not need to be listed in local_include_dirs."/>
        <field name="export_shared_lib_headers" type="blueprint[]" descr="list of shared libraries to re-export include directories from. Entries must be present in shared_libs."/>
        <field name="export_static_lib_headers" type="blueprint[]" descr="list of static libraries to re-export include directories from. Entries must be present in static_libs."/>
        <field name="force_symbols_not_weak_list" type="string" descr="local file name to pass to the linker as -force_symbols_not_weak_list"/>
        <field name="force_symbols_weak_list" type="string" descr="local file name to pass to the linker as -force_symbols_weak_list"/>
        <field name="generated_headers" type="blueprint[]" descr="list of generated headers to add to the include path. These are the names of genrule modules."/>
        <field name="generated_sources" type="blueprint[]" descr="list of generated sources to compile. These are the names of gensrcs or genrule modules."/>
        <field name="gnu_extensions" type="bool" descr="if set to false, use -std=c++* instead of -std=gnu++*"/>
        <field name="group_static_libs" type="bool" descr="group static libraries.  This can resolve missing symbols issues with interdependencies between static libraries, but it is generally better to order them correctly instead."/>
        <field name="gtest" type="bool" descr="if set, build against the gtest library. Defaults to true."/>
        <object-field name="header_abi_checker">
            <field name="symbol_file" type="string" descr="Path to a symbol file that specifies the symbols to be included in the generated ABI dump file"/>
            <field name="exclude_symbol_versions" type="string[]" descr="Symbol versions that should be ignored from the symbol file"/>
            <field name="exclude_symbol_tags" type="string[]" descr="Symbol tags that should be ignored from the symbol file"/>
        </object-field>
        <field name="header_libs" type="blueprint[]" descr="list of modules that should only provide headers for this module."/>
        <field name="host_ldlibs" type="string[]" descr="-l arguments to pass to linker for host-provided shared libraries"/>
        <field name="include_build_directory" type="bool" descr="Add the directory containing the Android.bp file to the list of include directories. Defaults to true."/>
        <field name="include_dirs" type="string[]" descr="list of directories relative to the root of the source tree that will be added to the include path using -I. If possible, don't use this.  If adding paths from the current directory use local_include_dirs, if adding paths from other modules use export_include_dirs in that module."/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="instruction_set" type="string" descr="the instruction set architecture to use to compile the C/C++ module."/>
        <field name="isolated" type="bool" descr="if set, use the isolated gtest runner. Defaults to false."/>
        <field name="ldflags" type="string[]" descr="list of module-specific flags that will be used for all link steps"/>
        <field name="local_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the include path using -I"/>
        <field name="logtags" type="string[]" descr="*.logtags files, to combine together in order to generate the /system/etc/event-log-tags file"/>
        <object-field name="lto">
            <field name="never" type="bool"/>
            <field name="full" type="bool"/>
            <field name="thin" type="bool"/>
        </object-field>
        <field name="native_coverage" type="bool"/>
        <field name="no_libcrt" type="bool" descr="don't link in libclang_rt.builtins-*.a"/>
        <field name="no_libgcc" type="bool" descr="don't link in libgcc.a"/>
        <field name="no_named_install_directory" type="bool" descr="Disables the creation of a test-specific directory when used with relative_install_path. Useful if several tests need to be in the same directory, but test_per_src doesn't work."/>
        <field name="nocrt" type="bool" descr="don't link in crt_begin and crt_end.  This flag should only be necessary for compiling crt or libc."/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="openmp" type="bool" descr="Build and link with OpenMP"/>
        <field name="overrides" type="blueprint[]" descr="Names of modules to be overridden. Listed modules can only be other shared libraries (in Make or Soong). This does not completely prevent installation of the overridden libraries, but if both binaries would be installed by default (in PRODUCT_PACKAGES) the other library will be removed from PRODUCT_PACKAGES."/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="pack_relocations" type="bool" descr="Generate compact dynamic relocation table, default true."/>
        <object-field name="pgo">
            <field name="instrumentation" type="bool"/>
            <field name="sampling" type="bool"/>
            <field name="profile_file" type="string"/>
            <field name="benchmarks" type="string[]"/>
            <field name="enable_profile_use" type="bool"/>
            <field name="cflags" type="string[]" descr="Additional compiler flags to use when building this module for profiling (either instrumentation or sampling)."/>
        </object-field>
        <field name="prefix_symbols" type="string" descr="if set, add an extra objcopy --prefix-symbols= step"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <object-field name="proto">
            <field name="export_proto_headers" type="bool" descr="export headers generated from .proto sources"/>
            <field name="static" type="bool" descr="Link statically against the protobuf runtime"/>
            <field name="type" type="string" descr="Proto generator type.  C++: full or lite.  Java: micro, nano, stream, or lite."/>
            <field name="plugin" type="string" descr="Proto plugin to use as the generator.  Must be a cc_binary_host module."/>
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the protoc include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the bp file that will be added to the protoc include paths."/>
            <field name="canonical_path_from_root" type="bool" descr="whether to identify the proto files from the root of the source tree (the original method in Android, useful for android-specific protos), or relative from where they were specified (useful for external/third party protos). This defaults to true today, but is expected to default to false in the future."/>
        </object-field>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="recovery_available" type="bool" descr="Make this module available when building for recovery"/>
        <field name="reexportedIncludeFlags" type="string[]"/>
        <field name="relative_install_path" type="string" descr="install to a subdirectory of the default install path for the module"/>
        <object-field name="renderscript">
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the llvm-rs-cc include paths"/>
            <field name="flags" type="string[]" descr="list of flags that will be passed to llvm-rs-cc"/>
            <field name="target_api" type="string" descr="Renderscript API level to target"/>
        </object-field>
        <field name="require_root" type="bool" descr="Add RootTargetPreparer to auto generated test config. This guarantees the test to run with root permission."/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="rtti" type="bool" descr="pass -frtti instead of -fno-rtti"/>
        <field name="runtime_libs" type="blueprint[]" descr="list of modules that should be installed with this module.  This is similar to 'required' but '.vendor' suffix will be appended to the module names if the shared libraries have vendor variants and this module uses VNDK."/>
        <object-field name="sanitize">
            <field name="never" type="bool"/>
            <field name="address" type="bool" descr="main sanitizers"/>
            <field name="thread" type="bool"/>
            <field name="hwaddress" type="bool"/>
            <field name="undefined" type="bool" descr="local sanitizers"/>
            <field name="all_undefined" type="bool"/>
            <field name="misc_undefined" type="string[]"/>
            <field name="coverage" type="bool"/>
            <field name="safestack" type="bool"/>
            <field name="cfi" type="bool"/>
            <field name="integer_overflow" type="bool"/>
            <field name="scudo" type="bool"/>
            <field name="scs" type="bool"/>
            <object-field name="diag">
                <field name="undefined" type="bool"/>
                <field name="cfi" type="bool"/>
                <field name="integer_overflow" type="bool"/>
                <field name="misc_undefined" type="string[]"/>
                <field name="no_recover" type="string[]"/>
            </object-field>
            <field name="recover" type="string[]" descr="value to pass to -fsanitize-recover="/>
            <field name="blacklist" type="string" descr="value to pass to -fsanitize-blacklist"/>
        </object-field>
        <field name="sdclang" type="bool" descr="compile module with SDLLVM instead of AOSP LLVM"/>
        <field name="sdk_version" type="string" descr="Minimum sdk version supported when compiling against the ndk"/>
        <field name="shared" type="string[]"/>
        <field name="shared_libs" type="blueprint[]" descr="list of modules that should be dynamically linked into this module."/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="static" type="string[]"/>
        <field name="static_executable" type="bool" descr="compile executable with -static"/>
        <field name="static_libs" type="blueprint[]" descr="list of modules that should be statically linked into this module."/>
        <field name="static_ndk_lib" type="bool"/>
        <field name="stem" type="string" descr="set the name of the output"/>
        <field name="stl" type="string" descr="Select the STL library to use.  Possible values are &quot;libc++&quot;, &quot;libc++_static&quot;, &quot;libstdc++&quot;, or &quot;none&quot;. Leave blank to select the default."/>
        <object-field name="strip">
            <field name="none" type="bool"/>
            <field name="all" type="bool"/>
            <field name="keep_symbols" type="bool"/>
            <field name="keep_symbols_list" type="string[]"/>
            <field name="use_gnu_strip" type="bool"/>
        </object-field>
        <object-field name="stubs">
            <field name="symbol_file" type="string" descr="Relative path to the symbol map. The symbol map provides the list of symbols that are exported for stubs variant of this library."/>
            <field name="versions" type="string[]" descr="List versions to generate stubs libs for."/>
        </object-field>
        <field name="suffix" type="string" descr="append to the name of the output"/>
        <field name="symbol_ordering_file" type="string" descr="Local file name to pass to the linker as --symbol-ordering-file"/>
        <field name="symlink_preferred_arch" type="bool" descr="if set, install a symlink to the preferred architecture"/>
        <field name="symlinks" type="string[]" descr="install symlinks to the binary.  Symlink names will have the suffix and the binary extension (if any) appended"/>
        <field name="system_shared_libs" type="blueprint[]" descr="list of system libraries that will be dynamically linked to shared library and executable modules.  If unset, generally defaults to libc, libm, and libdl.  Set to [] to prevent linking against the defaults."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
            <object-field name="recovery">
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="srcs" type="string[]" descr="list of source files that should only be used in the recovery variant of the C/C++ module."/>
                <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="cflags" type="string[]" descr="List of additional cflags that should be used to build the recovery variant of the C/C++ module."/>
            </object-field>
            <object-field name="vendor">
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_runtime_libs" type="blueprint[]" descr="list of runtime libs that should not be installed along with the vendor variant of the C/C++ module."/>
                <field name="version_script" type="string" descr="version script for this vendor variant"/>
                <field name="override_export_include_dirs" type="string[]" descr="list of exported include directories, like export_include_dirs, that will be applied to the vendor variant of this library. This will overwrite any other declarations."/>
                <field name="srcs" type="string[]" descr="list of source files that should only be used in the vendor variant of the C/C++ module."/>
                <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="cflags" type="string[]" descr="List of additional cflags that should be used to build the vendor variant of the C/C++ module."/>
            </object-field>
        </object-field>
        <field name="test_config" type="string" descr="the name of the test configuration (for example &quot;AndroidTest.xml&quot;) that should be installed with the module."/>
        <field name="test_config_template" type="string" descr="the name of the test configuration template (for example &quot;AndroidTestTemplate.xml&quot;) that should be installed with the module."/>
        <field name="test_options" type="string[]" descr="Test options."/>
        <field name="test_per_src" type="bool" descr="Create a separate binary for each source file.  Useful when there is global state that can not be torn down and reset between each test suite."/>
        <field name="test_suites" type="string[]" descr="list of compatibility suites (for example &quot;cts&quot;, &quot;vts&quot;) that the module should be installed into."/>
        <field name="tidy" type="bool" descr="whether to run clang-tidy over C-like sources."/>
        <field name="tidy_checks" type="string[]" descr="Extra checks to enable or disable in clang-tidy"/>
        <field name="tidy_checks_as_errors" type="string[]" descr="Checks that should be treated as errors."/>
        <field name="tidy_flags" type="string[]" descr="Extra flags to pass to clang-tidy"/>
        <field name="unexported_symbols_list" type="string" descr="local file name to pass to the linker as -unexported_symbols_list"/>
        <field name="unique_host_soname" type="bool" descr="rename host libraries to prevent overlap with system installed libraries"/>
        <field name="use_clang_lld" type="bool" descr="Use clang lld instead of gnu ld."/>
        <field name="use_version_lib" type="bool" descr="make android::build:GetBuildNumber() available containing the build ID."/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vendor_available" type="bool" descr="whether this module should be allowed to be directly depended by other modules with `vendor: true`, `proprietary: true`, or `vendor_available:true`. If set to true, two variants will be built separately, one like normal, and the other limited to the set of libraries and headers that are exposed to /vendor modules. The vendor variant may be used with a different (newer) /system, so it shouldn't have any unversioned runtime dependencies, or make assumptions about the system that may not be true in the future. If set to false, this module becomes inaccessible from /vendor modules. Default value is true when vndk: {enabled: true} or vendor: true. Nothing happens if BOARD_VNDK_VERSION isn't set in the BoardConfig.mk"/>
        <field name="version_script" type="string" descr="local file name to pass to the linker as --version_script"/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
        <object-field name="vndk">
            <field name="enabled" type="bool" descr="declared as a VNDK or VNDK-SP module. The vendor variant will be installed in /system instead of /vendor partition. `vendor_vailable` must be explicitly set to either true or false together with `vndk: {enabled: true}`."/>
            <field name="support_system_process" type="bool" descr="declared as a VNDK-SP module, which is a subset of VNDK. `vndk: { enabled: true }` must set together. All these modules are allowed to link to VNDK-SP or LL-NDK modules only. Other dependency will cause link-type errors. If `support_system_process` is not set or set to false, the module is VNDK-core and can link to other VNDK-core, VNDK-SP or LL-NDK modules only."/>
            <field name="extends" type="string" descr="Extending another module"/>
        </object-field>
        <field name="whole_static_libs" type="blueprint[]" descr="list of modules whose object files should be linked into this module in their entirety.  For static library modules, all of the .o files from the intermediate directory of the dependency will be linked into this modules .a file.  For a shared library, the dependency's .a file will be linked into this module using -Wl,--whole-archive."/>
        <field name="xom" type="bool"/>
        <field name="yaccflags" type="string[]" descr="list of module-specific flags that will be used for .y and .yy compiles"/>
    </blueprint>
    <blueprint name="llvm_host_prebuilt_library_shared">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="a prebuilt library or binary. Can reference a genrule module that generates an executable file."/>
        <object-field name="aidl">
            <field name="export_aidl_headers" type="bool" descr="export headers generated from .aidl sources"/>
        </object-field>
        <field name="allow_undefined_symbols" type="bool" descr="allow the module to contain undefined symbols.  By default, modules cannot contain undefined symbols that are not satisified by their immediate dependencies.  Set this flag to true to remove --no-undefined from the linker flags. This flag should only be necessary for compiling low-level libraries like libc."/>
        <field name="bootstrap" type="bool" descr="Allows this module to use non-APEX version of libraries. Useful for building binaries that are started before APEXes are activated."/>
        <field name="check_elf_files" type="bool" descr="Check the prebuilt ELF files (e.g. DT_SONAME, DT_NEEDED, resolution of undefined symbols, etc), default true."/>
        <field name="clang" type="bool" descr="Deprecated. true is the default, false is invalid."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="double_loadable" type="bool" descr="whether this module is capable of being loaded with other instance (possibly an older version) of the same module in the same process. Currently, a shared library that is a member of VNDK (vndk: {enabled: true}) can be double loaded in a vendor process if the library is also a (direct and indirect) dependency of an LLNDK library. Such libraries must be explicitly marked as `double_loadable: true` by the owner, or the dependency from the LLNDK lib should be cut if the lib is not designed to be double loaded."/>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="export_generated_headers" type="blueprint[]" descr="list of generated headers to re-export include directories from. Entries must be present in generated_headers."/>
        <field name="export_header_lib_headers" type="blueprint[]" descr="list of header libraries to re-export include directories from. Entries must be present in header_libs."/>
        <field name="export_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the include path (using -I) for this module and any module that links against this module.  Directories listed in export_include_dirs do not need to be listed in local_include_dirs."/>
        <field name="export_shared_lib_headers" type="blueprint[]" descr="list of shared libraries to re-export include directories from. Entries must be present in shared_libs."/>
        <field name="export_static_lib_headers" type="blueprint[]" descr="list of static libraries to re-export include directories from. Entries must be present in static_libs."/>
        <field name="force_symbols_not_weak_list" type="string" descr="local file name to pass to the linker as -force_symbols_not_weak_list"/>
        <field name="force_symbols_weak_list" type="string" descr="local file name to pass to the linker as -force_symbols_weak_list"/>
        <field name="group_static_libs" type="bool" descr="group static libraries.  This can resolve missing symbols issues with interdependencies between static libraries, but it is generally better to order them correctly instead."/>
        <object-field name="header_abi_checker">
            <field name="symbol_file" type="string" descr="Path to a symbol file that specifies the symbols to be included in the generated ABI dump file"/>
            <field name="exclude_symbol_versions" type="string[]" descr="Symbol versions that should be ignored from the symbol file"/>
            <field name="exclude_symbol_tags" type="string[]" descr="Symbol tags that should be ignored from the symbol file"/>
        </object-field>
        <field name="header_libs" type="blueprint[]" descr="list of modules that should only provide headers for this module."/>
        <field name="host_ldlibs" type="string[]" descr="-l arguments to pass to linker for host-provided shared libraries"/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="ldflags" type="string[]" descr="list of module-specific flags that will be used for all link steps"/>
        <field name="logtags" type="string[]" descr="*.logtags files, to combine together in order to generate the /system/etc/event-log-tags file"/>
        <object-field name="lto">
            <field name="never" type="bool"/>
            <field name="full" type="bool"/>
            <field name="thin" type="bool"/>
        </object-field>
        <field name="native_coverage" type="bool"/>
        <field name="no_libcrt" type="bool" descr="don't link in libclang_rt.builtins-*.a"/>
        <field name="no_libgcc" type="bool" descr="don't link in libgcc.a"/>
        <field name="nocrt" type="bool" descr="don't link in crt_begin and crt_end.  This flag should only be necessary for compiling crt or libc."/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="overrides" type="blueprint[]" descr="Names of modules to be overridden. Listed modules can only be other shared libraries (in Make or Soong). This does not completely prevent installation of the overridden libraries, but if both binaries would be installed by default (in PRODUCT_PACKAGES) the other library will be removed from PRODUCT_PACKAGES."/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="pack_relocations" type="bool" descr="Generate compact dynamic relocation table, default true."/>
        <object-field name="pgo">
            <field name="instrumentation" type="bool"/>
            <field name="sampling" type="bool"/>
            <field name="profile_file" type="string"/>
            <field name="benchmarks" type="string[]"/>
            <field name="enable_profile_use" type="bool"/>
            <field name="cflags" type="string[]" descr="Additional compiler flags to use when building this module for profiling (either instrumentation or sampling)."/>
        </object-field>
        <field name="prefer" type="bool" descr="When prefer is set to true the prebuilt will be used instead of any source module with a matching name."/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <object-field name="proto">
            <field name="export_proto_headers" type="bool" descr="export headers generated from .proto sources"/>
        </object-field>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="recovery_available" type="bool" descr="Make this module available when building for recovery"/>
        <field name="reexportedIncludeFlags" type="string[]"/>
        <field name="relative_install_path" type="string" descr="install to a subdirectory of the default install path for the module"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="runtime_libs" type="blueprint[]" descr="list of modules that should be installed with this module.  This is similar to 'required' but '.vendor' suffix will be appended to the module names if the shared libraries have vendor variants and this module uses VNDK."/>
        <object-field name="sanitize">
            <field name="never" type="bool"/>
            <field name="address" type="bool" descr="main sanitizers"/>
            <field name="thread" type="bool"/>
            <field name="hwaddress" type="bool"/>
            <field name="undefined" type="bool" descr="local sanitizers"/>
            <field name="all_undefined" type="bool"/>
            <field name="misc_undefined" type="string[]"/>
            <field name="coverage" type="bool"/>
            <field name="safestack" type="bool"/>
            <field name="cfi" type="bool"/>
            <field name="integer_overflow" type="bool"/>
            <field name="scudo" type="bool"/>
            <field name="scs" type="bool"/>
            <object-field name="diag">
                <field name="undefined" type="bool"/>
                <field name="cfi" type="bool"/>
                <field name="integer_overflow" type="bool"/>
                <field name="misc_undefined" type="string[]"/>
                <field name="no_recover" type="string[]"/>
            </object-field>
            <field name="recover" type="string[]" descr="value to pass to -fsanitize-recover="/>
            <field name="blacklist" type="string" descr="value to pass to -fsanitize-blacklist"/>
        </object-field>
        <field name="sdclang" type="bool" descr="compile module with SDLLVM instead of AOSP LLVM"/>
        <field name="sdk_version" type="string" descr="Minimum sdk version supported when compiling against the ndk"/>
        <field name="shared" type="string[]"/>
        <field name="shared_libs" type="blueprint[]" descr="list of modules that should be dynamically linked into this module."/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="static" type="string[]"/>
        <field name="static_libs" type="blueprint[]" descr="list of modules that should be statically linked into this module."/>
        <field name="static_ndk_lib" type="bool"/>
        <field name="stem" type="string" descr="set the name of the output"/>
        <field name="stl" type="string" descr="Select the STL library to use.  Possible values are &quot;libc++&quot;, &quot;libc++_static&quot;, &quot;libstdc++&quot;, or &quot;none&quot;. Leave blank to select the default."/>
        <object-field name="strip">
            <field name="none" type="bool"/>
            <field name="all" type="bool"/>
            <field name="keep_symbols" type="bool"/>
            <field name="keep_symbols_list" type="string[]"/>
            <field name="use_gnu_strip" type="bool"/>
        </object-field>
        <object-field name="stubs">
            <field name="symbol_file" type="string" descr="Relative path to the symbol map. The symbol map provides the list of symbols that are exported for stubs variant of this library."/>
            <field name="versions" type="string[]" descr="List versions to generate stubs libs for."/>
        </object-field>
        <field name="symbol_ordering_file" type="string" descr="Local file name to pass to the linker as --symbol-ordering-file"/>
        <field name="system_shared_libs" type="blueprint[]" descr="list of system libraries that will be dynamically linked to shared library and executable modules.  If unset, generally defaults to libc, libm, and libdl.  Set to [] to prevent linking against the defaults."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
            <object-field name="recovery">
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the recovery variant of the C/C++ module."/>
            </object-field>
            <object-field name="vendor">
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_runtime_libs" type="blueprint[]" descr="list of runtime libs that should not be installed along with the vendor variant of the C/C++ module."/>
                <field name="version_script" type="string" descr="version script for this vendor variant"/>
                <field name="override_export_include_dirs" type="string[]" descr="list of exported include directories, like export_include_dirs, that will be applied to the vendor variant of this library. This will overwrite any other declarations."/>
            </object-field>
        </object-field>
        <field name="tidy" type="bool" descr="whether to run clang-tidy over C-like sources."/>
        <field name="tidy_checks" type="string[]" descr="Extra checks to enable or disable in clang-tidy"/>
        <field name="tidy_checks_as_errors" type="string[]" descr="Checks that should be treated as errors."/>
        <field name="tidy_flags" type="string[]" descr="Extra flags to pass to clang-tidy"/>
        <field name="unexported_symbols_list" type="string" descr="local file name to pass to the linker as -unexported_symbols_list"/>
        <field name="unique_host_soname" type="bool" descr="rename host libraries to prevent overlap with system installed libraries"/>
        <field name="use_clang_lld" type="bool" descr="Use clang lld instead of gnu ld."/>
        <field name="use_version_lib" type="bool" descr="make android::build:GetBuildNumber() available containing the build ID."/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vendor_available" type="bool" descr="whether this module should be allowed to be directly depended by other modules with `vendor: true`, `proprietary: true`, or `vendor_available:true`. If set to true, two variants will be built separately, one like normal, and the other limited to the set of libraries and headers that are exposed to /vendor modules. The vendor variant may be used with a different (newer) /system, so it shouldn't have any unversioned runtime dependencies, or make assumptions about the system that may not be true in the future. If set to false, this module becomes inaccessible from /vendor modules. Default value is true when vndk: {enabled: true} or vendor: true. Nothing happens if BOARD_VNDK_VERSION isn't set in the BoardConfig.mk"/>
        <field name="version_script" type="string" descr="local file name to pass to the linker as --version_script"/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
        <object-field name="vndk">
            <field name="enabled" type="bool" descr="declared as a VNDK or VNDK-SP module. The vendor variant will be installed in /system instead of /vendor partition. `vendor_vailable` must be explicitly set to either true or false together with `vndk: {enabled: true}`."/>
            <field name="support_system_process" type="bool" descr="declared as a VNDK-SP module, which is a subset of VNDK. `vndk: { enabled: true }` must set together. All these modules are allowed to link to VNDK-SP or LL-NDK modules only. Other dependency will cause link-type errors. If `support_system_process` is not set or set to false, the module is VNDK-core and can link to other VNDK-core, VNDK-SP or LL-NDK modules only."/>
            <field name="extends" type="string" descr="Extending another module"/>
        </object-field>
        <field name="whole_static_libs" type="blueprint[]" descr="list of modules whose object files should be linked into this module in their entirety.  For static library modules, all of the .o files from the intermediate directory of the dependency will be linked into this modules .a file.  For a shared library, the dependency's .a file will be linked into this module using -Wl,--whole-archive."/>
        <field name="xom" type="bool"/>
    </blueprint>
    <blueprint name="llvm_prebuilt_library_static">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="a prebuilt library or binary. Can reference a genrule module that generates an executable file."/>
        <object-field name="aidl">
            <field name="export_aidl_headers" type="bool" descr="export headers generated from .aidl sources"/>
        </object-field>
        <field name="allow_undefined_symbols" type="bool" descr="allow the module to contain undefined symbols.  By default, modules cannot contain undefined symbols that are not satisified by their immediate dependencies.  Set this flag to true to remove --no-undefined from the linker flags. This flag should only be necessary for compiling low-level libraries like libc."/>
        <field name="bootstrap" type="bool" descr="Allows this module to use non-APEX version of libraries. Useful for building binaries that are started before APEXes are activated."/>
        <field name="check_elf_files" type="bool" descr="Check the prebuilt ELF files (e.g. DT_SONAME, DT_NEEDED, resolution of undefined symbols, etc), default true."/>
        <field name="clang" type="bool" descr="Deprecated. true is the default, false is invalid."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="double_loadable" type="bool" descr="whether this module is capable of being loaded with other instance (possibly an older version) of the same module in the same process. Currently, a shared library that is a member of VNDK (vndk: {enabled: true}) can be double loaded in a vendor process if the library is also a (direct and indirect) dependency of an LLNDK library. Such libraries must be explicitly marked as `double_loadable: true` by the owner, or the dependency from the LLNDK lib should be cut if the lib is not designed to be double loaded."/>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="export_generated_headers" type="blueprint[]" descr="list of generated headers to re-export include directories from. Entries must be present in generated_headers."/>
        <field name="export_header_lib_headers" type="blueprint[]" descr="list of header libraries to re-export include directories from. Entries must be present in header_libs."/>
        <field name="export_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the include path (using -I) for this module and any module that links against this module.  Directories listed in export_include_dirs do not need to be listed in local_include_dirs."/>
        <field name="export_shared_lib_headers" type="blueprint[]" descr="list of shared libraries to re-export include directories from. Entries must be present in shared_libs."/>
        <field name="export_static_lib_headers" type="blueprint[]" descr="list of static libraries to re-export include directories from. Entries must be present in static_libs."/>
        <field name="force_symbols_not_weak_list" type="string" descr="local file name to pass to the linker as -force_symbols_not_weak_list"/>
        <field name="force_symbols_weak_list" type="string" descr="local file name to pass to the linker as -force_symbols_weak_list"/>
        <field name="group_static_libs" type="bool" descr="group static libraries.  This can resolve missing symbols issues with interdependencies between static libraries, but it is generally better to order them correctly instead."/>
        <object-field name="header_abi_checker">
            <field name="symbol_file" type="string" descr="Path to a symbol file that specifies the symbols to be included in the generated ABI dump file"/>
            <field name="exclude_symbol_versions" type="string[]" descr="Symbol versions that should be ignored from the symbol file"/>
            <field name="exclude_symbol_tags" type="string[]" descr="Symbol tags that should be ignored from the symbol file"/>
        </object-field>
        <field name="header_libs" type="blueprint[]" descr="list of modules that should only provide headers for this module."/>
        <field name="host_ldlibs" type="string[]" descr="-l arguments to pass to linker for host-provided shared libraries"/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="ldflags" type="string[]" descr="list of module-specific flags that will be used for all link steps"/>
        <field name="logtags" type="string[]" descr="*.logtags files, to combine together in order to generate the /system/etc/event-log-tags file"/>
        <object-field name="lto">
            <field name="never" type="bool"/>
            <field name="full" type="bool"/>
            <field name="thin" type="bool"/>
        </object-field>
        <field name="native_coverage" type="bool"/>
        <field name="no_libcrt" type="bool" descr="don't link in libclang_rt.builtins-*.a"/>
        <field name="no_libgcc" type="bool" descr="don't link in libgcc.a"/>
        <field name="nocrt" type="bool" descr="don't link in crt_begin and crt_end.  This flag should only be necessary for compiling crt or libc."/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="overrides" type="blueprint[]" descr="Names of modules to be overridden. Listed modules can only be other shared libraries (in Make or Soong). This does not completely prevent installation of the overridden libraries, but if both binaries would be installed by default (in PRODUCT_PACKAGES) the other library will be removed from PRODUCT_PACKAGES."/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="pack_relocations" type="bool" descr="Generate compact dynamic relocation table, default true."/>
        <object-field name="pgo">
            <field name="instrumentation" type="bool"/>
            <field name="sampling" type="bool"/>
            <field name="profile_file" type="string"/>
            <field name="benchmarks" type="string[]"/>
            <field name="enable_profile_use" type="bool"/>
            <field name="cflags" type="string[]" descr="Additional compiler flags to use when building this module for profiling (either instrumentation or sampling)."/>
        </object-field>
        <field name="prefer" type="bool" descr="When prefer is set to true the prebuilt will be used instead of any source module with a matching name."/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <object-field name="proto">
            <field name="export_proto_headers" type="bool" descr="export headers generated from .proto sources"/>
        </object-field>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="recovery_available" type="bool" descr="Make this module available when building for recovery"/>
        <field name="reexportedIncludeFlags" type="string[]"/>
        <field name="relative_install_path" type="string" descr="install to a subdirectory of the default install path for the module"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="runtime_libs" type="blueprint[]" descr="list of modules that should be installed with this module.  This is similar to 'required' but '.vendor' suffix will be appended to the module names if the shared libraries have vendor variants and this module uses VNDK."/>
        <object-field name="sanitize">
            <field name="never" type="bool"/>
            <field name="address" type="bool" descr="main sanitizers"/>
            <field name="thread" type="bool"/>
            <field name="hwaddress" type="bool"/>
            <field name="undefined" type="bool" descr="local sanitizers"/>
            <field name="all_undefined" type="bool"/>
            <field name="misc_undefined" type="string[]"/>
            <field name="coverage" type="bool"/>
            <field name="safestack" type="bool"/>
            <field name="cfi" type="bool"/>
            <field name="integer_overflow" type="bool"/>
            <field name="scudo" type="bool"/>
            <field name="scs" type="bool"/>
            <object-field name="diag">
                <field name="undefined" type="bool"/>
                <field name="cfi" type="bool"/>
                <field name="integer_overflow" type="bool"/>
                <field name="misc_undefined" type="string[]"/>
                <field name="no_recover" type="string[]"/>
            </object-field>
            <field name="recover" type="string[]" descr="value to pass to -fsanitize-recover="/>
            <field name="blacklist" type="string" descr="value to pass to -fsanitize-blacklist"/>
        </object-field>
        <field name="sdclang" type="bool" descr="compile module with SDLLVM instead of AOSP LLVM"/>
        <field name="sdk_version" type="string" descr="Minimum sdk version supported when compiling against the ndk"/>
        <field name="shared" type="string[]"/>
        <field name="shared_libs" type="blueprint[]" descr="list of modules that should be dynamically linked into this module."/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="static" type="string[]"/>
        <field name="static_libs" type="blueprint[]" descr="list of modules that should be statically linked into this module."/>
        <field name="static_ndk_lib" type="bool"/>
        <field name="stem" type="string" descr="set the name of the output"/>
        <field name="stl" type="string" descr="Select the STL library to use.  Possible values are &quot;libc++&quot;, &quot;libc++_static&quot;, &quot;libstdc++&quot;, or &quot;none&quot;. Leave blank to select the default."/>
        <object-field name="strip">
            <field name="none" type="bool"/>
            <field name="all" type="bool"/>
            <field name="keep_symbols" type="bool"/>
            <field name="keep_symbols_list" type="string[]"/>
            <field name="use_gnu_strip" type="bool"/>
        </object-field>
        <object-field name="stubs">
            <field name="symbol_file" type="string" descr="Relative path to the symbol map. The symbol map provides the list of symbols that are exported for stubs variant of this library."/>
            <field name="versions" type="string[]" descr="List versions to generate stubs libs for."/>
        </object-field>
        <field name="symbol_ordering_file" type="string" descr="Local file name to pass to the linker as --symbol-ordering-file"/>
        <field name="system_shared_libs" type="blueprint[]" descr="list of system libraries that will be dynamically linked to shared library and executable modules.  If unset, generally defaults to libc, libm, and libdl.  Set to [] to prevent linking against the defaults."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
            <object-field name="recovery">
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the recovery variant of the C/C++ module."/>
            </object-field>
            <object-field name="vendor">
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_runtime_libs" type="blueprint[]" descr="list of runtime libs that should not be installed along with the vendor variant of the C/C++ module."/>
                <field name="version_script" type="string" descr="version script for this vendor variant"/>
                <field name="override_export_include_dirs" type="string[]" descr="list of exported include directories, like export_include_dirs, that will be applied to the vendor variant of this library. This will overwrite any other declarations."/>
            </object-field>
        </object-field>
        <field name="tidy" type="bool" descr="whether to run clang-tidy over C-like sources."/>
        <field name="tidy_checks" type="string[]" descr="Extra checks to enable or disable in clang-tidy"/>
        <field name="tidy_checks_as_errors" type="string[]" descr="Checks that should be treated as errors."/>
        <field name="tidy_flags" type="string[]" descr="Extra flags to pass to clang-tidy"/>
        <field name="unexported_symbols_list" type="string" descr="local file name to pass to the linker as -unexported_symbols_list"/>
        <field name="unique_host_soname" type="bool" descr="rename host libraries to prevent overlap with system installed libraries"/>
        <field name="use_clang_lld" type="bool" descr="Use clang lld instead of gnu ld."/>
        <field name="use_version_lib" type="bool" descr="make android::build:GetBuildNumber() available containing the build ID."/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vendor_available" type="bool" descr="whether this module should be allowed to be directly depended by other modules with `vendor: true`, `proprietary: true`, or `vendor_available:true`. If set to true, two variants will be built separately, one like normal, and the other limited to the set of libraries and headers that are exposed to /vendor modules. The vendor variant may be used with a different (newer) /system, so it shouldn't have any unversioned runtime dependencies, or make assumptions about the system that may not be true in the future. If set to false, this module becomes inaccessible from /vendor modules. Default value is true when vndk: {enabled: true} or vendor: true. Nothing happens if BOARD_VNDK_VERSION isn't set in the BoardConfig.mk"/>
        <field name="version_script" type="string" descr="local file name to pass to the linker as --version_script"/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
        <object-field name="vndk">
            <field name="enabled" type="bool" descr="declared as a VNDK or VNDK-SP module. The vendor variant will be installed in /system instead of /vendor partition. `vendor_vailable` must be explicitly set to either true or false together with `vndk: {enabled: true}`."/>
            <field name="support_system_process" type="bool" descr="declared as a VNDK-SP module, which is a subset of VNDK. `vndk: { enabled: true }` must set together. All these modules are allowed to link to VNDK-SP or LL-NDK modules only. Other dependency will cause link-type errors. If `support_system_process` is not set or set to false, the module is VNDK-core and can link to other VNDK-core, VNDK-SP or LL-NDK modules only."/>
            <field name="extends" type="string" descr="Extending another module"/>
        </object-field>
        <field name="whole_static_libs" type="blueprint[]" descr="list of modules whose object files should be linked into this module in their entirety.  For static library modules, all of the .o files from the intermediate directory of the dependency will be linked into this modules .a file.  For a shared library, the dependency's .a file will be linked into this module using -Wl,--whole-archive."/>
        <field name="xom" type="bool"/>
    </blueprint>
    <blueprint name="genrule">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="list of input files"/>
        <field name="cmd" type="string" descr="The command to run on one or more input files. Cmd supports substitution of a few variables (the actual substitution is implemented in GenerateAndroidBuildActions below) Available variables for substitution: All files used must be declared as inputs (to ensure proper up-to-date checks). Use &quot;$(in)&quot; directly in Cmd to ensure that all inputs used are declared."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="defaults" type="blueprint[]"/>
        <field name="depfile" type="bool" descr="Enable reading a file containing dependencies in gcc format after the command completes"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="exclude_srcs" type="string[]" descr="input files to exclude"/>
        <field name="export_include_dirs" type="string[]" descr="List of directories to export generated headers from"/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="out" type="string[]" descr="names of the output files that will be generated"/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
        </object-field>
        <field name="tool_files" type="string[]" descr="Local file that is used as the tool"/>
        <field name="tools" type="string[]" descr="name of the modules (if any) that produces the host executable.   Leave empty for prebuilts or scripts that do not need a module to build them."/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="genrule_defaults">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="list of input files"/>
        <field name="host_supported" type="bool" descr="If set to true, build a variant of the module for the host.  Defaults to false."/>
        <field name="device_supported" type="bool" descr="If set to true, build a variant of the module for the device.  Defaults to true."/>
        <field name="cmd" type="string" descr="The command to run on one or more input files. Cmd supports substitution of a few variables (the actual substitution is implemented in GenerateAndroidBuildActions below) Available variables for substitution: All files used must be declared as inputs (to ensure proper up-to-date checks). Use &quot;$(in)&quot; directly in Cmd to ensure that all inputs used are declared."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="defaults" type="blueprint[]"/>
        <field name="depfile" type="bool" descr="Enable reading a file containing dependencies in gcc format after the command completes"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="exclude_srcs" type="string[]" descr="input files to exclude"/>
        <field name="export_include_dirs" type="string[]" descr="List of directories to export generated headers from"/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="out" type="string[]" descr="names of the output files that will be generated"/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
        </object-field>
        <field name="tool_files" type="string[]" descr="Local file that is used as the tool"/>
        <field name="tools" type="string[]" descr="name of the modules (if any) that produces the host executable.   Leave empty for prebuilts or scripts that do not need a module to build them."/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="gensrcs">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="list of input files"/>
        <field name="cmd" type="string" descr="The command to run on one or more input files. Cmd supports substitution of a few variables (the actual substitution is implemented in GenerateAndroidBuildActions below) Available variables for substitution: All files used must be declared as inputs (to ensure proper up-to-date checks). Use &quot;$(in)&quot; directly in Cmd to ensure that all inputs used are declared."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="depfile" type="bool" descr="Enable reading a file containing dependencies in gcc format after the command completes"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="exclude_srcs" type="string[]" descr="input files to exclude"/>
        <field name="export_include_dirs" type="string[]" descr="List of directories to export generated headers from"/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="output_extension" type="string" descr="extension that will be substituted for each output file"/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="shard_size" type="number" descr="maximum number of files that will be passed on a single command line."/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
        </object-field>
        <field name="tool_files" type="string[]" descr="Local file that is used as the tool"/>
        <field name="tools" type="string[]" descr="name of the modules (if any) that produces the host executable.   Leave empty for prebuilts or scripts that do not need a module to build them."/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="phony">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="host_supported" type="bool" descr="If set to true, build a variant of the module for the host.  Defaults to false."/>
        <field name="device_supported" type="bool" descr="If set to true, build a variant of the module for the device.  Defaults to true."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
        </object-field>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="force_build_llvm_components_defaults">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="list of source files used to compile the C/C++ module.  May be .c, .cpp, or .S files. srcs may reference the outputs of other modules that produce source files like genrule or filegroup using the syntax &quot;:module&quot;."/>
        <field name="host_supported" type="bool" descr="If set to true, build a variant of the module for the host.  Defaults to false."/>
        <field name="device_supported" type="bool" descr="If set to true, build a variant of the module for the device.  Defaults to true."/>
        <object-field name="aidl">
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the aidl include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the aidl include paths."/>
            <field name="generate_traces" type="bool" descr="whether to generate traces (for systrace) for this interface"/>
            <field name="export_aidl_headers" type="bool" descr="export headers generated from .aidl sources"/>
        </object-field>
        <field name="allow_undefined_symbols" type="bool" descr="allow the module to contain undefined symbols.  By default, modules cannot contain undefined symbols that are not satisified by their immediate dependencies.  Set this flag to true to remove --no-undefined from the linker flags. This flag should only be necessary for compiling low-level libraries like libc."/>
        <field name="asflags" type="string[]" descr="list of module-specific flags that will be used for .S compiles"/>
        <field name="bootstrap" type="bool" descr="Allows this module to use non-APEX version of libraries. Useful for building binaries that are started before APEXes are activated."/>
        <field name="c_std" type="string" descr="C standard version to use. Can be a specific version (such as &quot;gnu11&quot;), &quot;experimental&quot; (which will use draft versions like C1x when available), or the empty string (which will use the default)."/>
        <field name="cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles."/>
        <field name="clang" type="bool" descr="Deprecated. true is the default, false is invalid."/>
        <field name="clang_asflags" type="string[]" descr="list of module-specific flags that will be used for .S compiles when compiling with clang"/>
        <field name="clang_cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles when compiling with clang"/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="conlyflags" type="string[]" descr="list of module-specific flags that will be used for C compiles"/>
        <field name="cpp_std" type="string" descr="C++ standard version to use. Can be a specific version (such as &quot;gnu++11&quot;), &quot;experimental&quot; (which will use draft versions like C++1z when available), or the empty string (which will use the default)."/>
        <field name="cppflags" type="string[]" descr="list of module-specific flags that will be used for C++ compiles"/>
        <field name="data" type="string[]" descr="list of files or filegroup modules that provide data that should be installed alongside the test"/>
        <object-field name="debug" descr="release">
            <field name="cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles in debug or release builds"/>
        </object-field>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="double_loadable" type="bool" descr="whether this module is capable of being loaded with other instance (possibly an older version) of the same module in the same process. Currently, a shared library that is a member of VNDK (vndk: {enabled: true}) can be double loaded in a vendor process if the library is also a (direct and indirect) dependency of an LLNDK library. Such libraries must be explicitly marked as `double_loadable: true` by the owner, or the dependency from the LLNDK lib should be cut if the lib is not designed to be double loaded."/>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the C/C++ module. This is most useful in the arch/multilib variants to remove non-common files"/>
        <field name="export_generated_headers" type="blueprint[]" descr="list of generated headers to re-export include directories from. Entries must be present in generated_headers."/>
        <field name="export_header_lib_headers" type="blueprint[]" descr="list of header libraries to re-export include directories from. Entries must be present in header_libs."/>
        <field name="export_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the include path (using -I) for this module and any module that links against this module.  Directories listed in export_include_dirs do not need to be listed in local_include_dirs."/>
        <field name="export_shared_lib_headers" type="blueprint[]" descr="list of shared libraries to re-export include directories from. Entries must be present in shared_libs."/>
        <field name="export_static_lib_headers" type="blueprint[]" descr="list of static libraries to re-export include directories from. Entries must be present in static_libs."/>
        <field name="force_symbols_not_weak_list" type="string" descr="local file name to pass to the linker as -force_symbols_not_weak_list"/>
        <field name="force_symbols_weak_list" type="string" descr="local file name to pass to the linker as -force_symbols_weak_list"/>
        <field name="generated_headers" type="blueprint[]" descr="list of generated headers to add to the include path. These are the names of genrule modules."/>
        <field name="generated_sources" type="blueprint[]" descr="list of generated sources to compile. These are the names of gensrcs or genrule modules."/>
        <field name="gnu_extensions" type="bool" descr="if set to false, use -std=c++* instead of -std=gnu++*"/>
        <field name="group_static_libs" type="bool" descr="group static libraries.  This can resolve missing symbols issues with interdependencies between static libraries, but it is generally better to order them correctly instead."/>
        <field name="gtest" type="bool" descr="if set, build against the gtest library. Defaults to true."/>
        <object-field name="header_abi_checker">
            <field name="symbol_file" type="string" descr="Path to a symbol file that specifies the symbols to be included in the generated ABI dump file"/>
            <field name="exclude_symbol_versions" type="string[]" descr="Symbol versions that should be ignored from the symbol file"/>
            <field name="exclude_symbol_tags" type="string[]" descr="Symbol tags that should be ignored from the symbol file"/>
        </object-field>
        <field name="header_libs" type="blueprint[]" descr="list of modules that should only provide headers for this module."/>
        <field name="host_ldlibs" type="string[]" descr="-l arguments to pass to linker for host-provided shared libraries"/>
        <field name="include_build_directory" type="bool" descr="Add the directory containing the Android.bp file to the list of include directories. Defaults to true."/>
        <field name="include_dirs" type="string[]" descr="list of directories relative to the root of the source tree that will be added to the include path using -I. If possible, don't use this.  If adding paths from the current directory use local_include_dirs, if adding paths from other modules use export_include_dirs in that module."/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="instruction_set" type="string" descr="the instruction set architecture to use to compile the C/C++ module."/>
        <field name="isolated" type="bool" descr="if set, use the isolated gtest runner. Defaults to false."/>
        <field name="ldflags" type="string[]" descr="list of module-specific flags that will be used for all link steps"/>
        <field name="local_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the include path using -I"/>
        <field name="logtags" type="string[]" descr="*.logtags files, to combine together in order to generate the /system/etc/event-log-tags file"/>
        <object-field name="lto">
            <field name="never" type="bool"/>
            <field name="full" type="bool"/>
            <field name="thin" type="bool"/>
        </object-field>
        <field name="native_coverage" type="bool"/>
        <field name="no_libcrt" type="bool" descr="don't link in libclang_rt.builtins-*.a"/>
        <field name="no_libgcc" type="bool" descr="don't link in libgcc.a"/>
        <field name="no_named_install_directory" type="bool" descr="Disables the creation of a test-specific directory when used with relative_install_path. Useful if several tests need to be in the same directory, but test_per_src doesn't work."/>
        <field name="nocrt" type="bool" descr="don't link in crt_begin and crt_end.  This flag should only be necessary for compiling crt or libc."/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="openmp" type="bool" descr="Build and link with OpenMP"/>
        <field name="overrides" type="blueprint[]" descr="Names of modules to be overridden. Listed modules can only be other shared libraries (in Make or Soong). This does not completely prevent installation of the overridden libraries, but if both binaries would be installed by default (in PRODUCT_PACKAGES) the other library will be removed from PRODUCT_PACKAGES."/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="pack_relocations" type="bool" descr="Generate compact dynamic relocation table, default true."/>
        <object-field name="pgo">
            <field name="instrumentation" type="bool"/>
            <field name="sampling" type="bool"/>
            <field name="profile_file" type="string"/>
            <field name="benchmarks" type="string[]"/>
            <field name="enable_profile_use" type="bool"/>
            <field name="cflags" type="string[]" descr="Additional compiler flags to use when building this module for profiling (either instrumentation or sampling)."/>
        </object-field>
        <field name="prefix_symbols" type="string" descr="if set, add an extra objcopy --prefix-symbols= step"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <object-field name="proto">
            <field name="export_proto_headers" type="bool" descr="export headers generated from .proto sources"/>
            <field name="static" type="bool" descr="Link statically against the protobuf runtime"/>
            <field name="type" type="string" descr="Proto generator type.  C++: full or lite.  Java: micro, nano, stream, or lite."/>
            <field name="plugin" type="string" descr="Proto plugin to use as the generator.  Must be a cc_binary_host module."/>
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the protoc include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the bp file that will be added to the protoc include paths."/>
            <field name="canonical_path_from_root" type="bool" descr="whether to identify the proto files from the root of the source tree (the original method in Android, useful for android-specific protos), or relative from where they were specified (useful for external/third party protos). This defaults to true today, but is expected to default to false in the future."/>
        </object-field>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="recovery_available" type="bool" descr="Make this module available when building for recovery"/>
        <field name="reexportedIncludeFlags" type="string[]"/>
        <field name="relative_install_path" type="string" descr="install to a subdirectory of the default install path for the module"/>
        <object-field name="renderscript">
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the llvm-rs-cc include paths"/>
            <field name="flags" type="string[]" descr="list of flags that will be passed to llvm-rs-cc"/>
            <field name="target_api" type="string" descr="Renderscript API level to target"/>
        </object-field>
        <field name="require_root" type="bool" descr="Add RootTargetPreparer to auto generated test config. This guarantees the test to run with root permission."/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="rtti" type="bool" descr="pass -frtti instead of -fno-rtti"/>
        <field name="runtime_libs" type="blueprint[]" descr="list of modules that should be installed with this module.  This is similar to 'required' but '.vendor' suffix will be appended to the module names if the shared libraries have vendor variants and this module uses VNDK."/>
        <object-field name="sanitize">
            <field name="never" type="bool"/>
            <field name="address" type="bool" descr="main sanitizers"/>
            <field name="thread" type="bool"/>
            <field name="hwaddress" type="bool"/>
            <field name="undefined" type="bool" descr="local sanitizers"/>
            <field name="all_undefined" type="bool"/>
            <field name="misc_undefined" type="string[]"/>
            <field name="coverage" type="bool"/>
            <field name="safestack" type="bool"/>
            <field name="cfi" type="bool"/>
            <field name="integer_overflow" type="bool"/>
            <field name="scudo" type="bool"/>
            <field name="scs" type="bool"/>
            <object-field name="diag">
                <field name="undefined" type="bool"/>
                <field name="cfi" type="bool"/>
                <field name="integer_overflow" type="bool"/>
                <field name="misc_undefined" type="string[]"/>
                <field name="no_recover" type="string[]"/>
            </object-field>
            <field name="recover" type="string[]" descr="value to pass to -fsanitize-recover="/>
            <field name="blacklist" type="string" descr="value to pass to -fsanitize-blacklist"/>
        </object-field>
        <field name="sdclang" type="bool" descr="compile module with SDLLVM instead of AOSP LLVM"/>
        <field name="sdk_version" type="string" descr="Minimum sdk version supported when compiling against the ndk"/>
        <field name="shared" type="string[]"/>
        <field name="shared_libs" type="blueprint[]" descr="list of modules that should be dynamically linked into this module."/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="static" type="string[]"/>
        <field name="static_executable" type="bool" descr="compile executable with -static"/>
        <field name="static_libs" type="blueprint[]" descr="list of modules that should be statically linked into this module."/>
        <field name="static_ndk_lib" type="bool"/>
        <field name="stem" type="string" descr="set the name of the output"/>
        <field name="stl" type="string" descr="Select the STL library to use.  Possible values are &quot;libc++&quot;, &quot;libc++_static&quot;, &quot;libstdc++&quot;, or &quot;none&quot;. Leave blank to select the default."/>
        <object-field name="strip">
            <field name="none" type="bool"/>
            <field name="all" type="bool"/>
            <field name="keep_symbols" type="bool"/>
            <field name="keep_symbols_list" type="string[]"/>
            <field name="use_gnu_strip" type="bool"/>
        </object-field>
        <object-field name="stubs">
            <field name="symbol_file" type="string" descr="Relative path to the symbol map. The symbol map provides the list of symbols that are exported for stubs variant of this library."/>
            <field name="versions" type="string[]" descr="List versions to generate stubs libs for."/>
        </object-field>
        <field name="suffix" type="string" descr="append to the name of the output"/>
        <field name="symbol_ordering_file" type="string" descr="Local file name to pass to the linker as --symbol-ordering-file"/>
        <field name="symlink_preferred_arch" type="bool" descr="if set, install a symlink to the preferred architecture"/>
        <field name="symlinks" type="string[]" descr="install symlinks to the binary.  Symlink names will have the suffix and the binary extension (if any) appended"/>
        <field name="system_shared_libs" type="blueprint[]" descr="list of system libraries that will be dynamically linked to shared library and executable modules.  If unset, generally defaults to libc, libm, and libdl.  Set to [] to prevent linking against the defaults."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
            <object-field name="recovery">
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="srcs" type="string[]" descr="list of source files that should only be used in the recovery variant of the C/C++ module."/>
                <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="cflags" type="string[]" descr="List of additional cflags that should be used to build the recovery variant of the C/C++ module."/>
            </object-field>
            <object-field name="vendor">
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_runtime_libs" type="blueprint[]" descr="list of runtime libs that should not be installed along with the vendor variant of the C/C++ module."/>
                <field name="version_script" type="string" descr="version script for this vendor variant"/>
                <field name="override_export_include_dirs" type="string[]" descr="list of exported include directories, like export_include_dirs, that will be applied to the vendor variant of this library. This will overwrite any other declarations."/>
                <field name="srcs" type="string[]" descr="list of source files that should only be used in the vendor variant of the C/C++ module."/>
                <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="cflags" type="string[]" descr="List of additional cflags that should be used to build the vendor variant of the C/C++ module."/>
            </object-field>
        </object-field>
        <field name="test_config" type="string" descr="the name of the test configuration (for example &quot;AndroidTest.xml&quot;) that should be installed with the module."/>
        <field name="test_config_template" type="string" descr="the name of the test configuration template (for example &quot;AndroidTestTemplate.xml&quot;) that should be installed with the module."/>
        <field name="test_options" type="string[]" descr="Test options."/>
        <field name="test_per_src" type="bool" descr="Create a separate binary for each source file.  Useful when there is global state that can not be torn down and reset between each test suite."/>
        <field name="test_suites" type="string[]" descr="list of compatibility suites (for example &quot;cts&quot;, &quot;vts&quot;) that the module should be installed into."/>
        <field name="tidy" type="bool" descr="whether to run clang-tidy over C-like sources."/>
        <field name="tidy_checks" type="string[]" descr="Extra checks to enable or disable in clang-tidy"/>
        <field name="tidy_checks_as_errors" type="string[]" descr="Checks that should be treated as errors."/>
        <field name="tidy_flags" type="string[]" descr="Extra flags to pass to clang-tidy"/>
        <field name="unexported_symbols_list" type="string" descr="local file name to pass to the linker as -unexported_symbols_list"/>
        <field name="unique_host_soname" type="bool" descr="rename host libraries to prevent overlap with system installed libraries"/>
        <field name="use_clang_lld" type="bool" descr="Use clang lld instead of gnu ld."/>
        <field name="use_version_lib" type="bool" descr="make android::build:GetBuildNumber() available containing the build ID."/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vendor_available" type="bool" descr="whether this module should be allowed to be directly depended by other modules with `vendor: true`, `proprietary: true`, or `vendor_available:true`. If set to true, two variants will be built separately, one like normal, and the other limited to the set of libraries and headers that are exposed to /vendor modules. The vendor variant may be used with a different (newer) /system, so it shouldn't have any unversioned runtime dependencies, or make assumptions about the system that may not be true in the future. If set to false, this module becomes inaccessible from /vendor modules. Default value is true when vndk: {enabled: true} or vendor: true. Nothing happens if BOARD_VNDK_VERSION isn't set in the BoardConfig.mk"/>
        <field name="version_script" type="string" descr="local file name to pass to the linker as --version_script"/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
        <object-field name="vndk">
            <field name="enabled" type="bool" descr="declared as a VNDK or VNDK-SP module. The vendor variant will be installed in /system instead of /vendor partition. `vendor_vailable` must be explicitly set to either true or false together with `vndk: {enabled: true}`."/>
            <field name="support_system_process" type="bool" descr="declared as a VNDK-SP module, which is a subset of VNDK. `vndk: { enabled: true }` must set together. All these modules are allowed to link to VNDK-SP or LL-NDK modules only. Other dependency will cause link-type errors. If `support_system_process` is not set or set to false, the module is VNDK-core and can link to other VNDK-core, VNDK-SP or LL-NDK modules only."/>
            <field name="extends" type="string" descr="Extending another module"/>
        </object-field>
        <field name="whole_static_libs" type="blueprint[]" descr="list of modules whose object files should be linked into this module in their entirety.  For static library modules, all of the .o files from the intermediate directory of the dependency will be linked into this modules .a file.  For a shared library, the dependency's .a file will be linked into this module using -Wl,--whole-archive."/>
        <field name="xom" type="bool"/>
        <field name="yaccflags" type="string[]" descr="list of module-specific flags that will be used for .y and .yy compiles"/>
    </blueprint>
    <blueprint name="llvm_defaults">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="list of source files used to compile the C/C++ module.  May be .c, .cpp, or .S files. srcs may reference the outputs of other modules that produce source files like genrule or filegroup using the syntax &quot;:module&quot;."/>
        <field name="host_supported" type="bool" descr="If set to true, build a variant of the module for the host.  Defaults to false."/>
        <field name="device_supported" type="bool" descr="If set to true, build a variant of the module for the device.  Defaults to true."/>
        <object-field name="aidl">
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the aidl include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the aidl include paths."/>
            <field name="generate_traces" type="bool" descr="whether to generate traces (for systrace) for this interface"/>
            <field name="export_aidl_headers" type="bool" descr="export headers generated from .aidl sources"/>
        </object-field>
        <field name="allow_undefined_symbols" type="bool" descr="allow the module to contain undefined symbols.  By default, modules cannot contain undefined symbols that are not satisified by their immediate dependencies.  Set this flag to true to remove --no-undefined from the linker flags. This flag should only be necessary for compiling low-level libraries like libc."/>
        <field name="asflags" type="string[]" descr="list of module-specific flags that will be used for .S compiles"/>
        <field name="bootstrap" type="bool" descr="Allows this module to use non-APEX version of libraries. Useful for building binaries that are started before APEXes are activated."/>
        <field name="c_std" type="string" descr="C standard version to use. Can be a specific version (such as &quot;gnu11&quot;), &quot;experimental&quot; (which will use draft versions like C1x when available), or the empty string (which will use the default)."/>
        <field name="cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles."/>
        <field name="clang" type="bool" descr="Deprecated. true is the default, false is invalid."/>
        <field name="clang_asflags" type="string[]" descr="list of module-specific flags that will be used for .S compiles when compiling with clang"/>
        <field name="clang_cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles when compiling with clang"/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="conlyflags" type="string[]" descr="list of module-specific flags that will be used for C compiles"/>
        <field name="cpp_std" type="string" descr="C++ standard version to use. Can be a specific version (such as &quot;gnu++11&quot;), &quot;experimental&quot; (which will use draft versions like C++1z when available), or the empty string (which will use the default)."/>
        <field name="cppflags" type="string[]" descr="list of module-specific flags that will be used for C++ compiles"/>
        <field name="data" type="string[]" descr="list of files or filegroup modules that provide data that should be installed alongside the test"/>
        <object-field name="debug" descr="release">
            <field name="cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles in debug or release builds"/>
        </object-field>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="double_loadable" type="bool" descr="whether this module is capable of being loaded with other instance (possibly an older version) of the same module in the same process. Currently, a shared library that is a member of VNDK (vndk: {enabled: true}) can be double loaded in a vendor process if the library is also a (direct and indirect) dependency of an LLNDK library. Such libraries must be explicitly marked as `double_loadable: true` by the owner, or the dependency from the LLNDK lib should be cut if the lib is not designed to be double loaded."/>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the C/C++ module. This is most useful in the arch/multilib variants to remove non-common files"/>
        <field name="export_generated_headers" type="blueprint[]" descr="list of generated headers to re-export include directories from. Entries must be present in generated_headers."/>
        <field name="export_header_lib_headers" type="blueprint[]" descr="list of header libraries to re-export include directories from. Entries must be present in header_libs."/>
        <field name="export_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the include path (using -I) for this module and any module that links against this module.  Directories listed in export_include_dirs do not need to be listed in local_include_dirs."/>
        <field name="export_shared_lib_headers" type="blueprint[]" descr="list of shared libraries to re-export include directories from. Entries must be present in shared_libs."/>
        <field name="export_static_lib_headers" type="blueprint[]" descr="list of static libraries to re-export include directories from. Entries must be present in static_libs."/>
        <field name="force_symbols_not_weak_list" type="string" descr="local file name to pass to the linker as -force_symbols_not_weak_list"/>
        <field name="force_symbols_weak_list" type="string" descr="local file name to pass to the linker as -force_symbols_weak_list"/>
        <field name="generated_headers" type="blueprint[]" descr="list of generated headers to add to the include path. These are the names of genrule modules."/>
        <field name="generated_sources" type="blueprint[]" descr="list of generated sources to compile. These are the names of gensrcs or genrule modules."/>
        <field name="gnu_extensions" type="bool" descr="if set to false, use -std=c++* instead of -std=gnu++*"/>
        <field name="group_static_libs" type="bool" descr="group static libraries.  This can resolve missing symbols issues with interdependencies between static libraries, but it is generally better to order them correctly instead."/>
        <field name="gtest" type="bool" descr="if set, build against the gtest library. Defaults to true."/>
        <object-field name="header_abi_checker">
            <field name="symbol_file" type="string" descr="Path to a symbol file that specifies the symbols to be included in the generated ABI dump file"/>
            <field name="exclude_symbol_versions" type="string[]" descr="Symbol versions that should be ignored from the symbol file"/>
            <field name="exclude_symbol_tags" type="string[]" descr="Symbol tags that should be ignored from the symbol file"/>
        </object-field>
        <field name="header_libs" type="blueprint[]" descr="list of modules that should only provide headers for this module."/>
        <field name="host_ldlibs" type="string[]" descr="-l arguments to pass to linker for host-provided shared libraries"/>
        <field name="include_build_directory" type="bool" descr="Add the directory containing the Android.bp file to the list of include directories. Defaults to true."/>
        <field name="include_dirs" type="string[]" descr="list of directories relative to the root of the source tree that will be added to the include path using -I. If possible, don't use this.  If adding paths from the current directory use local_include_dirs, if adding paths from other modules use export_include_dirs in that module."/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="instruction_set" type="string" descr="the instruction set architecture to use to compile the C/C++ module."/>
        <field name="isolated" type="bool" descr="if set, use the isolated gtest runner. Defaults to false."/>
        <field name="ldflags" type="string[]" descr="list of module-specific flags that will be used for all link steps"/>
        <field name="local_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the include path using -I"/>
        <field name="logtags" type="string[]" descr="*.logtags files, to combine together in order to generate the /system/etc/event-log-tags file"/>
        <object-field name="lto">
            <field name="never" type="bool"/>
            <field name="full" type="bool"/>
            <field name="thin" type="bool"/>
        </object-field>
        <field name="native_coverage" type="bool"/>
        <field name="no_libcrt" type="bool" descr="don't link in libclang_rt.builtins-*.a"/>
        <field name="no_libgcc" type="bool" descr="don't link in libgcc.a"/>
        <field name="no_named_install_directory" type="bool" descr="Disables the creation of a test-specific directory when used with relative_install_path. Useful if several tests need to be in the same directory, but test_per_src doesn't work."/>
        <field name="nocrt" type="bool" descr="don't link in crt_begin and crt_end.  This flag should only be necessary for compiling crt or libc."/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="openmp" type="bool" descr="Build and link with OpenMP"/>
        <field name="overrides" type="blueprint[]" descr="Names of modules to be overridden. Listed modules can only be other shared libraries (in Make or Soong). This does not completely prevent installation of the overridden libraries, but if both binaries would be installed by default (in PRODUCT_PACKAGES) the other library will be removed from PRODUCT_PACKAGES."/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="pack_relocations" type="bool" descr="Generate compact dynamic relocation table, default true."/>
        <object-field name="pgo">
            <field name="instrumentation" type="bool"/>
            <field name="sampling" type="bool"/>
            <field name="profile_file" type="string"/>
            <field name="benchmarks" type="string[]"/>
            <field name="enable_profile_use" type="bool"/>
            <field name="cflags" type="string[]" descr="Additional compiler flags to use when building this module for profiling (either instrumentation or sampling)."/>
        </object-field>
        <field name="prefix_symbols" type="string" descr="if set, add an extra objcopy --prefix-symbols= step"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <object-field name="proto">
            <field name="export_proto_headers" type="bool" descr="export headers generated from .proto sources"/>
            <field name="static" type="bool" descr="Link statically against the protobuf runtime"/>
            <field name="type" type="string" descr="Proto generator type.  C++: full or lite.  Java: micro, nano, stream, or lite."/>
            <field name="plugin" type="string" descr="Proto plugin to use as the generator.  Must be a cc_binary_host module."/>
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the protoc include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the bp file that will be added to the protoc include paths."/>
            <field name="canonical_path_from_root" type="bool" descr="whether to identify the proto files from the root of the source tree (the original method in Android, useful for android-specific protos), or relative from where they were specified (useful for external/third party protos). This defaults to true today, but is expected to default to false in the future."/>
        </object-field>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="recovery_available" type="bool" descr="Make this module available when building for recovery"/>
        <field name="reexportedIncludeFlags" type="string[]"/>
        <field name="relative_install_path" type="string" descr="install to a subdirectory of the default install path for the module"/>
        <object-field name="renderscript">
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the llvm-rs-cc include paths"/>
            <field name="flags" type="string[]" descr="list of flags that will be passed to llvm-rs-cc"/>
            <field name="target_api" type="string" descr="Renderscript API level to target"/>
        </object-field>
        <field name="require_root" type="bool" descr="Add RootTargetPreparer to auto generated test config. This guarantees the test to run with root permission."/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="rtti" type="bool" descr="pass -frtti instead of -fno-rtti"/>
        <field name="runtime_libs" type="blueprint[]" descr="list of modules that should be installed with this module.  This is similar to 'required' but '.vendor' suffix will be appended to the module names if the shared libraries have vendor variants and this module uses VNDK."/>
        <object-field name="sanitize">
            <field name="never" type="bool"/>
            <field name="address" type="bool" descr="main sanitizers"/>
            <field name="thread" type="bool"/>
            <field name="hwaddress" type="bool"/>
            <field name="undefined" type="bool" descr="local sanitizers"/>
            <field name="all_undefined" type="bool"/>
            <field name="misc_undefined" type="string[]"/>
            <field name="coverage" type="bool"/>
            <field name="safestack" type="bool"/>
            <field name="cfi" type="bool"/>
            <field name="integer_overflow" type="bool"/>
            <field name="scudo" type="bool"/>
            <field name="scs" type="bool"/>
            <object-field name="diag">
                <field name="undefined" type="bool"/>
                <field name="cfi" type="bool"/>
                <field name="integer_overflow" type="bool"/>
                <field name="misc_undefined" type="string[]"/>
                <field name="no_recover" type="string[]"/>
            </object-field>
            <field name="recover" type="string[]" descr="value to pass to -fsanitize-recover="/>
            <field name="blacklist" type="string" descr="value to pass to -fsanitize-blacklist"/>
        </object-field>
        <field name="sdclang" type="bool" descr="compile module with SDLLVM instead of AOSP LLVM"/>
        <field name="sdk_version" type="string" descr="Minimum sdk version supported when compiling against the ndk"/>
        <field name="shared" type="string[]"/>
        <field name="shared_libs" type="blueprint[]" descr="list of modules that should be dynamically linked into this module."/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="static" type="string[]"/>
        <field name="static_executable" type="bool" descr="compile executable with -static"/>
        <field name="static_libs" type="blueprint[]" descr="list of modules that should be statically linked into this module."/>
        <field name="static_ndk_lib" type="bool"/>
        <field name="stem" type="string" descr="set the name of the output"/>
        <field name="stl" type="string" descr="Select the STL library to use.  Possible values are &quot;libc++&quot;, &quot;libc++_static&quot;, &quot;libstdc++&quot;, or &quot;none&quot;. Leave blank to select the default."/>
        <object-field name="strip">
            <field name="none" type="bool"/>
            <field name="all" type="bool"/>
            <field name="keep_symbols" type="bool"/>
            <field name="keep_symbols_list" type="string[]"/>
            <field name="use_gnu_strip" type="bool"/>
        </object-field>
        <object-field name="stubs">
            <field name="symbol_file" type="string" descr="Relative path to the symbol map. The symbol map provides the list of symbols that are exported for stubs variant of this library."/>
            <field name="versions" type="string[]" descr="List versions to generate stubs libs for."/>
        </object-field>
        <field name="suffix" type="string" descr="append to the name of the output"/>
        <field name="symbol_ordering_file" type="string" descr="Local file name to pass to the linker as --symbol-ordering-file"/>
        <field name="symlink_preferred_arch" type="bool" descr="if set, install a symlink to the preferred architecture"/>
        <field name="symlinks" type="string[]" descr="install symlinks to the binary.  Symlink names will have the suffix and the binary extension (if any) appended"/>
        <field name="system_shared_libs" type="blueprint[]" descr="list of system libraries that will be dynamically linked to shared library and executable modules.  If unset, generally defaults to libc, libm, and libdl.  Set to [] to prevent linking against the defaults."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
            <object-field name="recovery">
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="srcs" type="string[]" descr="list of source files that should only be used in the recovery variant of the C/C++ module."/>
                <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="cflags" type="string[]" descr="List of additional cflags that should be used to build the recovery variant of the C/C++ module."/>
            </object-field>
            <object-field name="vendor">
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_runtime_libs" type="blueprint[]" descr="list of runtime libs that should not be installed along with the vendor variant of the C/C++ module."/>
                <field name="version_script" type="string" descr="version script for this vendor variant"/>
                <field name="override_export_include_dirs" type="string[]" descr="list of exported include directories, like export_include_dirs, that will be applied to the vendor variant of this library. This will overwrite any other declarations."/>
                <field name="srcs" type="string[]" descr="list of source files that should only be used in the vendor variant of the C/C++ module."/>
                <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="cflags" type="string[]" descr="List of additional cflags that should be used to build the vendor variant of the C/C++ module."/>
            </object-field>
        </object-field>
        <field name="test_config" type="string" descr="the name of the test configuration (for example &quot;AndroidTest.xml&quot;) that should be installed with the module."/>
        <field name="test_config_template" type="string" descr="the name of the test configuration template (for example &quot;AndroidTestTemplate.xml&quot;) that should be installed with the module."/>
        <field name="test_options" type="string[]" descr="Test options."/>
        <field name="test_per_src" type="bool" descr="Create a separate binary for each source file.  Useful when there is global state that can not be torn down and reset between each test suite."/>
        <field name="test_suites" type="string[]" descr="list of compatibility suites (for example &quot;cts&quot;, &quot;vts&quot;) that the module should be installed into."/>
        <field name="tidy" type="bool" descr="whether to run clang-tidy over C-like sources."/>
        <field name="tidy_checks" type="string[]" descr="Extra checks to enable or disable in clang-tidy"/>
        <field name="tidy_checks_as_errors" type="string[]" descr="Checks that should be treated as errors."/>
        <field name="tidy_flags" type="string[]" descr="Extra flags to pass to clang-tidy"/>
        <field name="unexported_symbols_list" type="string" descr="local file name to pass to the linker as -unexported_symbols_list"/>
        <field name="unique_host_soname" type="bool" descr="rename host libraries to prevent overlap with system installed libraries"/>
        <field name="use_clang_lld" type="bool" descr="Use clang lld instead of gnu ld."/>
        <field name="use_version_lib" type="bool" descr="make android::build:GetBuildNumber() available containing the build ID."/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vendor_available" type="bool" descr="whether this module should be allowed to be directly depended by other modules with `vendor: true`, `proprietary: true`, or `vendor_available:true`. If set to true, two variants will be built separately, one like normal, and the other limited to the set of libraries and headers that are exposed to /vendor modules. The vendor variant may be used with a different (newer) /system, so it shouldn't have any unversioned runtime dependencies, or make assumptions about the system that may not be true in the future. If set to false, this module becomes inaccessible from /vendor modules. Default value is true when vndk: {enabled: true} or vendor: true. Nothing happens if BOARD_VNDK_VERSION isn't set in the BoardConfig.mk"/>
        <field name="version_script" type="string" descr="local file name to pass to the linker as --version_script"/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
        <object-field name="vndk">
            <field name="enabled" type="bool" descr="declared as a VNDK or VNDK-SP module. The vendor variant will be installed in /system instead of /vendor partition. `vendor_vailable` must be explicitly set to either true or false together with `vndk: {enabled: true}`."/>
            <field name="support_system_process" type="bool" descr="declared as a VNDK-SP module, which is a subset of VNDK. `vndk: { enabled: true }` must set together. All these modules are allowed to link to VNDK-SP or LL-NDK modules only. Other dependency will cause link-type errors. If `support_system_process` is not set or set to false, the module is VNDK-core and can link to other VNDK-core, VNDK-SP or LL-NDK modules only."/>
            <field name="extends" type="string" descr="Extending another module"/>
        </object-field>
        <field name="whole_static_libs" type="blueprint[]" descr="list of modules whose object files should be linked into this module in their entirety.  For static library modules, all of the .o files from the intermediate directory of the dependency will be linked into this modules .a file.  For a shared library, the dependency's .a file will be linked into this module using -Wl,--whole-archive."/>
        <field name="xom" type="bool"/>
        <field name="yaccflags" type="string[]" descr="list of module-specific flags that will be used for .y and .yy compiles"/>
    </blueprint>
    <blueprint name="llvm_tblgen">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="in" type="string"/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="outs" type="string[]"/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
        </object-field>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="se_cil_compat_map">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="bottom_half" type="string[]" descr="list of source (.cil) files used to build an the bottom half of sepolicy compatibility mapping file. bottom_half may reference the outputs of other modules that produce source files like genrule or filegroup using the syntax &quot;:module&quot;. srcs has to be non-empty."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
        </object-field>
        <field name="top_half" type="string" descr="se_cil_compat_map module representing a compatibility mapping file for platform versions (x->y). Bottom half represents a mapping (y->z). Together the halves are used to generate a (x->z) mapping."/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="se_filegroup">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="list of source file suffixes used to collect selinux policy files. Source files will be looked up in the following local directories: system/sepolicy/{public, private, vendor, reqd_mask} and directories specified by following config variables: BOARD_SEPOLICY_DIRS, BOARD_ODM_SEPOLICY_DIRS BOARD_PLAT_PUBLIC_SEPOLICY_DIR, BOARD_PLAT_PRIVATE_SEPOLICY_DIR"/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
        </object-field>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="bpf">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]"/>
        <field name="cflags" type="string[]"/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="include_dirs" type="string[]"/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
        </object-field>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="art_apex_test">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="host_supported" type="bool" descr="If set to true, build a variant of the module for the host.  Defaults to false."/>
        <field name="device_supported" type="bool" descr="If set to true, build a variant of the module for the device.  Defaults to true."/>
        <field name="androidManifest" type="string" descr="AndroidManifest.xml file used for the zip container of this APEX bundle. If unspecified, a default one is automatically generated."/>
        <field name="apex_name" type="string" descr="Canonical name of the APEX bundle in the manifest file. If unspecified, defaults to the value of name"/>
        <field name="binaries" type="string[]" descr="List of native executables that are embedded inside this APEX bundle"/>
        <field name="certificate" type="string" descr="The name of a certificate in the default certificate directory, blank to use the default product certificate, or an android_app_certificate module name in the form &quot;:module&quot;."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="file_contexts" type="string" descr="Determines the file contexts file for setting security context to each file in this APEX bundle. Specifically, when this is set to <value>, /system/sepolicy/apex/<value>_file_contexts file is used. Default: <name_of_this_module>"/>
        <field name="ignore_system_library_special_case" type="bool" descr="For telling the apex to ignore special handling for system libraries such as bionic. Default is false."/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="installable" type="bool" descr="Whether this APEX is installable to one of the partitions. Default: true."/>
        <field name="java_libs" type="blueprint[]" descr="List of java libraries that are embedded inside this APEX bundle"/>
        <field name="key" type="string" descr="Name of the apex_key module that provides the private key to sign APEX"/>
        <field name="manifest" type="string" descr="Json manifest file describing meta info of this APEX bundle. Default: &quot;apex_manifest.json&quot;"/>
        <field name="multilib" type="string[]"/>
        <field name="native_shared_libs" type="blueprint[]" descr="List of native shared libs that are embedded inside this APEX bundle"/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="payload_type" type="string" descr="The type of APEX to build. Controls what the APEX payload is. Either 'image', 'zip' or 'both'. Default: 'image'."/>
        <field name="prebuilts" type="string[]" descr="List of prebuilt files that are embedded inside this APEX bundle"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <object-field name="target">
            <object-field name="android">
                <field name="multilib" type="string[]"/>
            </object-field>
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
        </object-field>
        <field name="use_vendor" type="bool" descr="For native libraries and binaries, use the vendor variant instead of the core (platform) variant. Default is false."/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="art_cc_binary">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="list of source files used to compile the C/C++ module.  May be .c, .cpp, or .S files. srcs may reference the outputs of other modules that produce source files like genrule or filegroup using the syntax &quot;:module&quot;."/>
        <field name="host_supported" type="bool" descr="If set to true, build a variant of the module for the host.  Defaults to false."/>
        <field name="device_supported" type="bool" descr="If set to true, build a variant of the module for the device.  Defaults to true."/>
        <object-field name="aidl">
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the aidl include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the aidl include paths."/>
            <field name="generate_traces" type="bool" descr="whether to generate traces (for systrace) for this interface"/>
        </object-field>
        <field name="allow_undefined_symbols" type="bool" descr="allow the module to contain undefined symbols.  By default, modules cannot contain undefined symbols that are not satisified by their immediate dependencies.  Set this flag to true to remove --no-undefined from the linker flags. This flag should only be necessary for compiling low-level libraries like libc."/>
        <field name="asflags" type="string[]" descr="list of module-specific flags that will be used for .S compiles"/>
        <field name="bootstrap" type="bool" descr="Allows this module to use non-APEX version of libraries. Useful for building binaries that are started before APEXes are activated."/>
        <field name="c_std" type="string" descr="C standard version to use. Can be a specific version (such as &quot;gnu11&quot;), &quot;experimental&quot; (which will use draft versions like C1x when available), or the empty string (which will use the default)."/>
        <field name="cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles."/>
        <field name="clang" type="bool" descr="Deprecated. true is the default, false is invalid."/>
        <field name="clang_asflags" type="string[]" descr="list of module-specific flags that will be used for .S compiles when compiling with clang"/>
        <field name="clang_cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles when compiling with clang"/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="conlyflags" type="string[]" descr="list of module-specific flags that will be used for C compiles"/>
        <field name="cpp_std" type="string" descr="C++ standard version to use. Can be a specific version (such as &quot;gnu++11&quot;), &quot;experimental&quot; (which will use draft versions like C++1z when available), or the empty string (which will use the default)."/>
        <field name="cppflags" type="string[]" descr="list of module-specific flags that will be used for C++ compiles"/>
        <object-field name="debug" descr="release">
            <field name="cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles in debug or release builds"/>
        </object-field>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="double_loadable" type="bool" descr="whether this module is capable of being loaded with other instance (possibly an older version) of the same module in the same process. Currently, a shared library that is a member of VNDK (vndk: {enabled: true}) can be double loaded in a vendor process if the library is also a (direct and indirect) dependency of an LLNDK library. Such libraries must be explicitly marked as `double_loadable: true` by the owner, or the dependency from the LLNDK lib should be cut if the lib is not designed to be double loaded."/>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the C/C++ module. This is most useful in the arch/multilib variants to remove non-common files"/>
        <field name="export_generated_headers" type="blueprint[]" descr="list of generated headers to re-export include directories from. Entries must be present in generated_headers."/>
        <field name="export_header_lib_headers" type="blueprint[]" descr="list of header libraries to re-export include directories from. Entries must be present in header_libs."/>
        <field name="export_shared_lib_headers" type="blueprint[]" descr="list of shared libraries to re-export include directories from. Entries must be present in shared_libs."/>
        <field name="export_static_lib_headers" type="blueprint[]" descr="list of static libraries to re-export include directories from. Entries must be present in static_libs."/>
        <field name="generated_headers" type="blueprint[]" descr="list of generated headers to add to the include path. These are the names of genrule modules."/>
        <field name="generated_sources" type="blueprint[]" descr="list of generated sources to compile. These are the names of gensrcs or genrule modules."/>
        <field name="gnu_extensions" type="bool" descr="if set to false, use -std=c++* instead of -std=gnu++*"/>
        <field name="group_static_libs" type="bool" descr="group static libraries.  This can resolve missing symbols issues with interdependencies between static libraries, but it is generally better to order them correctly instead."/>
        <field name="header_libs" type="blueprint[]" descr="list of modules that should only provide headers for this module."/>
        <field name="host_ldlibs" type="string[]" descr="-l arguments to pass to linker for host-provided shared libraries"/>
        <field name="include_build_directory" type="bool" descr="Add the directory containing the Android.bp file to the list of include directories. Defaults to true."/>
        <field name="include_dirs" type="string[]" descr="list of directories relative to the root of the source tree that will be added to the include path using -I. If possible, don't use this.  If adding paths from the current directory use local_include_dirs, if adding paths from other modules use export_include_dirs in that module."/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="instruction_set" type="string" descr="the instruction set architecture to use to compile the C/C++ module."/>
        <field name="ldflags" type="string[]" descr="list of module-specific flags that will be used for all link steps"/>
        <field name="local_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the include path using -I"/>
        <field name="logtags" type="string[]" descr="*.logtags files, to combine together in order to generate the /system/etc/event-log-tags file"/>
        <object-field name="lto">
            <field name="never" type="bool"/>
            <field name="full" type="bool"/>
            <field name="thin" type="bool"/>
        </object-field>
        <field name="native_coverage" type="bool"/>
        <field name="no_libcrt" type="bool" descr="don't link in libclang_rt.builtins-*.a"/>
        <field name="no_libgcc" type="bool" descr="don't link in libgcc.a"/>
        <field name="nocrt" type="bool" descr="don't link in crt_begin and crt_end.  This flag should only be necessary for compiling crt or libc."/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="openmp" type="bool" descr="Build and link with OpenMP"/>
        <field name="overrides" type="blueprint[]" descr="Names of modules to be overridden. Listed modules can only be other binaries (in Make or Soong). This does not completely prevent installation of the overridden binaries, but if both binaries would be installed by default (in PRODUCT_PACKAGES) the other binary will be removed from PRODUCT_PACKAGES."/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="pack_relocations" type="bool" descr="Generate compact dynamic relocation table, default true."/>
        <object-field name="pgo">
            <field name="instrumentation" type="bool"/>
            <field name="sampling" type="bool"/>
            <field name="profile_file" type="string"/>
            <field name="benchmarks" type="string[]"/>
            <field name="enable_profile_use" type="bool"/>
            <field name="cflags" type="string[]" descr="Additional compiler flags to use when building this module for profiling (either instrumentation or sampling)."/>
        </object-field>
        <field name="prefix_symbols" type="string" descr="if set, add an extra objcopy --prefix-symbols= step"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <object-field name="proto">
            <field name="type" type="string" descr="Proto generator type.  C++: full or lite.  Java: micro, nano, stream, or lite."/>
            <field name="plugin" type="string" descr="Proto plugin to use as the generator.  Must be a cc_binary_host module."/>
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the protoc include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the bp file that will be added to the protoc include paths."/>
            <field name="canonical_path_from_root" type="bool" descr="whether to identify the proto files from the root of the source tree (the original method in Android, useful for android-specific protos), or relative from where they were specified (useful for external/third party protos). This defaults to true today, but is expected to default to false in the future."/>
            <field name="static" type="bool" descr="Link statically against the protobuf runtime"/>
        </object-field>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="recovery_available" type="bool" descr="Make this module available when building for recovery"/>
        <field name="reexportedIncludeFlags" type="string[]"/>
        <field name="relative_install_path" type="string" descr="install to a subdirectory of the default install path for the module"/>
        <object-field name="renderscript">
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the llvm-rs-cc include paths"/>
            <field name="flags" type="string[]" descr="list of flags that will be passed to llvm-rs-cc"/>
            <field name="target_api" type="string" descr="Renderscript API level to target"/>
        </object-field>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="rtti" type="bool" descr="pass -frtti instead of -fno-rtti"/>
        <field name="runtime_libs" type="blueprint[]" descr="list of modules that should be installed with this module.  This is similar to 'required' but '.vendor' suffix will be appended to the module names if the shared libraries have vendor variants and this module uses VNDK."/>
        <object-field name="sanitize">
            <field name="never" type="bool"/>
            <field name="address" type="bool" descr="main sanitizers"/>
            <field name="thread" type="bool"/>
            <field name="hwaddress" type="bool"/>
            <field name="undefined" type="bool" descr="local sanitizers"/>
            <field name="all_undefined" type="bool"/>
            <field name="misc_undefined" type="string[]"/>
            <field name="coverage" type="bool"/>
            <field name="safestack" type="bool"/>
            <field name="cfi" type="bool"/>
            <field name="integer_overflow" type="bool"/>
            <field name="scudo" type="bool"/>
            <field name="scs" type="bool"/>
            <object-field name="diag">
                <field name="undefined" type="bool"/>
                <field name="cfi" type="bool"/>
                <field name="integer_overflow" type="bool"/>
                <field name="misc_undefined" type="string[]"/>
                <field name="no_recover" type="string[]"/>
            </object-field>
            <field name="recover" type="string[]" descr="value to pass to -fsanitize-recover="/>
            <field name="blacklist" type="string" descr="value to pass to -fsanitize-blacklist"/>
        </object-field>
        <field name="sdclang" type="bool" descr="compile module with SDLLVM instead of AOSP LLVM"/>
        <field name="sdk_version" type="string" descr="Minimum sdk version supported when compiling against the ndk"/>
        <field name="shared_libs" type="blueprint[]" descr="list of modules that should be dynamically linked into this module."/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="static_executable" type="bool" descr="compile executable with -static"/>
        <field name="static_libs" type="blueprint[]" descr="list of modules that should be statically linked into this module."/>
        <field name="stem" type="string" descr="set the name of the output"/>
        <field name="stl" type="string" descr="Select the STL library to use.  Possible values are &quot;libc++&quot;, &quot;libc++_static&quot;, &quot;libstdc++&quot;, or &quot;none&quot;. Leave blank to select the default."/>
        <object-field name="strip">
            <field name="none" type="bool"/>
            <field name="all" type="bool"/>
            <field name="keep_symbols" type="bool"/>
            <field name="keep_symbols_list" type="string[]"/>
            <field name="use_gnu_strip" type="bool"/>
        </object-field>
        <field name="suffix" type="string" descr="append to the name of the output"/>
        <field name="symbol_ordering_file" type="string" descr="Local file name to pass to the linker as --symbol-ordering-file"/>
        <field name="symlink_preferred_arch" type="bool" descr="if set, install a symlink to the preferred architecture"/>
        <field name="symlinks" type="string[]" descr="install symlinks to the binary.  Symlink names will have the suffix and the binary extension (if any) appended"/>
        <field name="system_shared_libs" type="blueprint[]" descr="list of system libraries that will be dynamically linked to shared library and executable modules.  If unset, generally defaults to libc, libm, and libdl.  Set to [] to prevent linking against the defaults."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
            <object-field name="recovery">
                <field name="srcs" type="string[]" descr="list of source files that should only be used in the recovery variant of the C/C++ module."/>
                <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="cflags" type="string[]" descr="List of additional cflags that should be used to build the recovery variant of the C/C++ module."/>
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the recovery variant of the C/C++ module."/>
            </object-field>
            <object-field name="vendor">
                <field name="srcs" type="string[]" descr="list of source files that should only be used in the vendor variant of the C/C++ module."/>
                <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="cflags" type="string[]" descr="List of additional cflags that should be used to build the vendor variant of the C/C++ module."/>
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_runtime_libs" type="blueprint[]" descr="list of runtime libs that should not be installed along with the vendor variant of the C/C++ module."/>
                <field name="version_script" type="string" descr="version script for this vendor variant"/>
            </object-field>
        </object-field>
        <field name="tidy" type="bool" descr="whether to run clang-tidy over C-like sources."/>
        <field name="tidy_checks" type="string[]" descr="Extra checks to enable or disable in clang-tidy"/>
        <field name="tidy_checks_as_errors" type="string[]" descr="Checks that should be treated as errors."/>
        <field name="tidy_flags" type="string[]" descr="Extra flags to pass to clang-tidy"/>
        <field name="use_clang_lld" type="bool" descr="Use clang lld instead of gnu ld."/>
        <field name="use_version_lib" type="bool" descr="make android::build:GetBuildNumber() available containing the build ID."/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vendor_available" type="bool" descr="whether this module should be allowed to be directly depended by other modules with `vendor: true`, `proprietary: true`, or `vendor_available:true`. If set to true, two variants will be built separately, one like normal, and the other limited to the set of libraries and headers that are exposed to /vendor modules. The vendor variant may be used with a different (newer) /system, so it shouldn't have any unversioned runtime dependencies, or make assumptions about the system that may not be true in the future. If set to false, this module becomes inaccessible from /vendor modules. Default value is true when vndk: {enabled: true} or vendor: true. Nothing happens if BOARD_VNDK_VERSION isn't set in the BoardConfig.mk"/>
        <field name="version_script" type="string" descr="local file name to pass to the linker as --version_script"/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
        <object-field name="vndk">
            <field name="enabled" type="bool" descr="declared as a VNDK or VNDK-SP module. The vendor variant will be installed in /system instead of /vendor partition. `vendor_vailable` must be explicitly set to either true or false together with `vndk: {enabled: true}`."/>
            <field name="support_system_process" type="bool" descr="declared as a VNDK-SP module, which is a subset of VNDK. `vndk: { enabled: true }` must set together. All these modules are allowed to link to VNDK-SP or LL-NDK modules only. Other dependency will cause link-type errors. If `support_system_process` is not set or set to false, the module is VNDK-core and can link to other VNDK-core, VNDK-SP or LL-NDK modules only."/>
            <field name="extends" type="string" descr="Extending another module"/>
        </object-field>
        <field name="whole_static_libs" type="blueprint[]" descr="list of modules whose object files should be linked into this module in their entirety.  For static library modules, all of the .o files from the intermediate directory of the dependency will be linked into this modules .a file.  For a shared library, the dependency's .a file will be linked into this module using -Wl,--whole-archive."/>
        <field name="xom" type="bool"/>
        <field name="yaccflags" type="string[]" descr="list of module-specific flags that will be used for .y and .yy compiles"/>
    </blueprint>
    <blueprint name="art_cc_defaults">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="list of source files used to compile the C/C++ module.  May be .c, .cpp, or .S files. srcs may reference the outputs of other modules that produce source files like genrule or filegroup using the syntax &quot;:module&quot;."/>
        <field name="host_supported" type="bool" descr="If set to true, build a variant of the module for the host.  Defaults to false."/>
        <field name="device_supported" type="bool" descr="If set to true, build a variant of the module for the device.  Defaults to true."/>
        <object-field name="aidl">
            <field name="export_aidl_headers" type="bool" descr="export headers generated from .aidl sources"/>
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the aidl include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the aidl include paths."/>
            <field name="generate_traces" type="bool" descr="whether to generate traces (for systrace) for this interface"/>
        </object-field>
        <field name="allow_undefined_symbols" type="bool" descr="allow the module to contain undefined symbols.  By default, modules cannot contain undefined symbols that are not satisified by their immediate dependencies.  Set this flag to true to remove --no-undefined from the linker flags. This flag should only be necessary for compiling low-level libraries like libc."/>
        <field name="asflags" type="string[]" descr="list of module-specific flags that will be used for .S compiles"/>
        <field name="bootstrap" type="bool" descr="Allows this module to use non-APEX version of libraries. Useful for building binaries that are started before APEXes are activated."/>
        <field name="c_std" type="string" descr="C standard version to use. Can be a specific version (such as &quot;gnu11&quot;), &quot;experimental&quot; (which will use draft versions like C1x when available), or the empty string (which will use the default)."/>
        <field name="cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles."/>
        <field name="clang" type="bool" descr="Deprecated. true is the default, false is invalid."/>
        <field name="clang_asflags" type="string[]" descr="list of module-specific flags that will be used for .S compiles when compiling with clang"/>
        <field name="clang_cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles when compiling with clang"/>
        <object-field name="codegen">
            <field name="arm" type="string[]"/>
            <field name="arm64" type="string[]"/>
            <field name="mips" type="string[]"/>
            <field name="mips64" type="string[]"/>
            <field name="x86" type="string[]"/>
            <field name="x86_64" type="string[]"/>
        </object-field>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="conlyflags" type="string[]" descr="list of module-specific flags that will be used for C compiles"/>
        <field name="cpp_std" type="string" descr="C++ standard version to use. Can be a specific version (such as &quot;gnu++11&quot;), &quot;experimental&quot; (which will use draft versions like C++1z when available), or the empty string (which will use the default)."/>
        <field name="cppflags" type="string[]" descr="list of module-specific flags that will be used for C++ compiles"/>
        <field name="data" type="string[]" descr="list of files or filegroup modules that provide data that should be installed alongside the test"/>
        <object-field name="debug" descr="release">
            <field name="cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles in debug or release builds"/>
        </object-field>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="double_loadable" type="bool" descr="whether this module is capable of being loaded with other instance (possibly an older version) of the same module in the same process. Currently, a shared library that is a member of VNDK (vndk: {enabled: true}) can be double loaded in a vendor process if the library is also a (direct and indirect) dependency of an LLNDK library. Such libraries must be explicitly marked as `double_loadable: true` by the owner, or the dependency from the LLNDK lib should be cut if the lib is not designed to be double loaded."/>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the C/C++ module. This is most useful in the arch/multilib variants to remove non-common files"/>
        <field name="export_generated_headers" type="blueprint[]" descr="list of generated headers to re-export include directories from. Entries must be present in generated_headers."/>
        <field name="export_header_lib_headers" type="blueprint[]" descr="list of header libraries to re-export include directories from. Entries must be present in header_libs."/>
        <field name="export_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the include path (using -I) for this module and any module that links against this module.  Directories listed in export_include_dirs do not need to be listed in local_include_dirs."/>
        <field name="export_shared_lib_headers" type="blueprint[]" descr="list of shared libraries to re-export include directories from. Entries must be present in shared_libs."/>
        <field name="export_static_lib_headers" type="blueprint[]" descr="list of static libraries to re-export include directories from. Entries must be present in static_libs."/>
        <field name="force_symbols_not_weak_list" type="string" descr="local file name to pass to the linker as -force_symbols_not_weak_list"/>
        <field name="force_symbols_weak_list" type="string" descr="local file name to pass to the linker as -force_symbols_weak_list"/>
        <field name="generated_headers" type="blueprint[]" descr="list of generated headers to add to the include path. These are the names of genrule modules."/>
        <field name="generated_sources" type="blueprint[]" descr="list of generated sources to compile. These are the names of gensrcs or genrule modules."/>
        <field name="gnu_extensions" type="bool" descr="if set to false, use -std=c++* instead of -std=gnu++*"/>
        <field name="group_static_libs" type="bool" descr="group static libraries.  This can resolve missing symbols issues with interdependencies between static libraries, but it is generally better to order them correctly instead."/>
        <field name="gtest" type="bool" descr="if set, build against the gtest library. Defaults to true."/>
        <object-field name="header_abi_checker">
            <field name="symbol_file" type="string" descr="Path to a symbol file that specifies the symbols to be included in the generated ABI dump file"/>
            <field name="exclude_symbol_versions" type="string[]" descr="Symbol versions that should be ignored from the symbol file"/>
            <field name="exclude_symbol_tags" type="string[]" descr="Symbol tags that should be ignored from the symbol file"/>
        </object-field>
        <field name="header_libs" type="blueprint[]" descr="list of modules that should only provide headers for this module."/>
        <field name="host_ldlibs" type="string[]" descr="-l arguments to pass to linker for host-provided shared libraries"/>
        <field name="include_build_directory" type="bool" descr="Add the directory containing the Android.bp file to the list of include directories. Defaults to true."/>
        <field name="include_dirs" type="string[]" descr="list of directories relative to the root of the source tree that will be added to the include path using -I. If possible, don't use this.  If adding paths from the current directory use local_include_dirs, if adding paths from other modules use export_include_dirs in that module."/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="instruction_set" type="string" descr="the instruction set architecture to use to compile the C/C++ module."/>
        <field name="isolated" type="bool" descr="if set, use the isolated gtest runner. Defaults to false."/>
        <field name="ldflags" type="string[]" descr="list of module-specific flags that will be used for all link steps"/>
        <field name="local_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the include path using -I"/>
        <field name="logtags" type="string[]" descr="*.logtags files, to combine together in order to generate the /system/etc/event-log-tags file"/>
        <object-field name="lto">
            <field name="never" type="bool"/>
            <field name="full" type="bool"/>
            <field name="thin" type="bool"/>
        </object-field>
        <field name="native_coverage" type="bool"/>
        <field name="no_libcrt" type="bool" descr="don't link in libclang_rt.builtins-*.a"/>
        <field name="no_libgcc" type="bool" descr="don't link in libgcc.a"/>
        <field name="no_named_install_directory" type="bool" descr="Disables the creation of a test-specific directory when used with relative_install_path. Useful if several tests need to be in the same directory, but test_per_src doesn't work."/>
        <field name="nocrt" type="bool" descr="don't link in crt_begin and crt_end.  This flag should only be necessary for compiling crt or libc."/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="openmp" type="bool" descr="Build and link with OpenMP"/>
        <field name="overrides" type="blueprint[]" descr="Names of modules to be overridden. Listed modules can only be other shared libraries (in Make or Soong). This does not completely prevent installation of the overridden libraries, but if both binaries would be installed by default (in PRODUCT_PACKAGES) the other library will be removed from PRODUCT_PACKAGES."/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="pack_relocations" type="bool" descr="Generate compact dynamic relocation table, default true."/>
        <object-field name="pgo">
            <field name="instrumentation" type="bool"/>
            <field name="sampling" type="bool"/>
            <field name="profile_file" type="string"/>
            <field name="benchmarks" type="string[]"/>
            <field name="enable_profile_use" type="bool"/>
            <field name="cflags" type="string[]" descr="Additional compiler flags to use when building this module for profiling (either instrumentation or sampling)."/>
        </object-field>
        <field name="prefix_symbols" type="string" descr="if set, add an extra objcopy --prefix-symbols= step"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <object-field name="proto">
            <field name="static" type="bool" descr="Link statically against the protobuf runtime"/>
            <field name="type" type="string" descr="Proto generator type.  C++: full or lite.  Java: micro, nano, stream, or lite."/>
            <field name="plugin" type="string" descr="Proto plugin to use as the generator.  Must be a cc_binary_host module."/>
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the protoc include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the bp file that will be added to the protoc include paths."/>
            <field name="canonical_path_from_root" type="bool" descr="whether to identify the proto files from the root of the source tree (the original method in Android, useful for android-specific protos), or relative from where they were specified (useful for external/third party protos). This defaults to true today, but is expected to default to false in the future."/>
            <field name="export_proto_headers" type="bool" descr="export headers generated from .proto sources"/>
        </object-field>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="recovery_available" type="bool" descr="Make this module available when building for recovery"/>
        <field name="reexportedIncludeFlags" type="string[]"/>
        <field name="relative_install_path" type="string" descr="install to a subdirectory of the default install path for the module"/>
        <object-field name="renderscript">
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the llvm-rs-cc include paths"/>
            <field name="flags" type="string[]" descr="list of flags that will be passed to llvm-rs-cc"/>
            <field name="target_api" type="string" descr="Renderscript API level to target"/>
        </object-field>
        <field name="require_root" type="bool" descr="Add RootTargetPreparer to auto generated test config. This guarantees the test to run with root permission."/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="rtti" type="bool" descr="pass -frtti instead of -fno-rtti"/>
        <field name="runtime_libs" type="blueprint[]" descr="list of modules that should be installed with this module.  This is similar to 'required' but '.vendor' suffix will be appended to the module names if the shared libraries have vendor variants and this module uses VNDK."/>
        <object-field name="sanitize">
            <field name="never" type="bool"/>
            <field name="address" type="bool" descr="main sanitizers"/>
            <field name="thread" type="bool"/>
            <field name="hwaddress" type="bool"/>
            <field name="undefined" type="bool" descr="local sanitizers"/>
            <field name="all_undefined" type="bool"/>
            <field name="misc_undefined" type="string[]"/>
            <field name="coverage" type="bool"/>
            <field name="safestack" type="bool"/>
            <field name="cfi" type="bool"/>
            <field name="integer_overflow" type="bool"/>
            <field name="scudo" type="bool"/>
            <field name="scs" type="bool"/>
            <object-field name="diag">
                <field name="undefined" type="bool"/>
                <field name="cfi" type="bool"/>
                <field name="integer_overflow" type="bool"/>
                <field name="misc_undefined" type="string[]"/>
                <field name="no_recover" type="string[]"/>
            </object-field>
            <field name="recover" type="string[]" descr="value to pass to -fsanitize-recover="/>
            <field name="blacklist" type="string" descr="value to pass to -fsanitize-blacklist"/>
        </object-field>
        <field name="sdclang" type="bool" descr="compile module with SDLLVM instead of AOSP LLVM"/>
        <field name="sdk_version" type="string" descr="Minimum sdk version supported when compiling against the ndk"/>
        <field name="shared" type="string[]"/>
        <field name="shared_libs" type="blueprint[]" descr="list of modules that should be dynamically linked into this module."/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="static" type="string[]"/>
        <field name="static_executable" type="bool" descr="compile executable with -static"/>
        <field name="static_libs" type="blueprint[]" descr="list of modules that should be statically linked into this module."/>
        <field name="static_ndk_lib" type="bool"/>
        <field name="stem" type="string" descr="set the name of the output"/>
        <field name="stl" type="string" descr="Select the STL library to use.  Possible values are &quot;libc++&quot;, &quot;libc++_static&quot;, &quot;libstdc++&quot;, or &quot;none&quot;. Leave blank to select the default."/>
        <object-field name="strip">
            <field name="none" type="bool"/>
            <field name="all" type="bool"/>
            <field name="keep_symbols" type="bool"/>
            <field name="keep_symbols_list" type="string[]"/>
            <field name="use_gnu_strip" type="bool"/>
        </object-field>
        <object-field name="stubs">
            <field name="symbol_file" type="string" descr="Relative path to the symbol map. The symbol map provides the list of symbols that are exported for stubs variant of this library."/>
            <field name="versions" type="string[]" descr="List versions to generate stubs libs for."/>
        </object-field>
        <field name="suffix" type="string" descr="append to the name of the output"/>
        <field name="symbol_ordering_file" type="string" descr="Local file name to pass to the linker as --symbol-ordering-file"/>
        <field name="symlink_preferred_arch" type="bool" descr="if set, install a symlink to the preferred architecture"/>
        <field name="symlinks" type="string[]" descr="install symlinks to the binary.  Symlink names will have the suffix and the binary extension (if any) appended"/>
        <field name="system_shared_libs" type="blueprint[]" descr="list of system libraries that will be dynamically linked to shared library and executable modules.  If unset, generally defaults to libc, libm, and libdl.  Set to [] to prevent linking against the defaults."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
            <object-field name="recovery">
                <field name="srcs" type="string[]" descr="list of source files that should only be used in the recovery variant of the C/C++ module."/>
                <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="cflags" type="string[]" descr="List of additional cflags that should be used to build the recovery variant of the C/C++ module."/>
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the recovery variant of the C/C++ module."/>
            </object-field>
            <object-field name="vendor">
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_runtime_libs" type="blueprint[]" descr="list of runtime libs that should not be installed along with the vendor variant of the C/C++ module."/>
                <field name="version_script" type="string" descr="version script for this vendor variant"/>
                <field name="override_export_include_dirs" type="string[]" descr="list of exported include directories, like export_include_dirs, that will be applied to the vendor variant of this library. This will overwrite any other declarations."/>
                <field name="srcs" type="string[]" descr="list of source files that should only be used in the vendor variant of the C/C++ module."/>
                <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="cflags" type="string[]" descr="List of additional cflags that should be used to build the vendor variant of the C/C++ module."/>
            </object-field>
        </object-field>
        <field name="test_config" type="string" descr="the name of the test configuration (for example &quot;AndroidTest.xml&quot;) that should be installed with the module."/>
        <field name="test_config_template" type="string" descr="the name of the test configuration template (for example &quot;AndroidTestTemplate.xml&quot;) that should be installed with the module."/>
        <field name="test_options" type="string[]" descr="Test options."/>
        <field name="test_per_src" type="bool" descr="Create a separate binary for each source file.  Useful when there is global state that can not be torn down and reset between each test suite."/>
        <field name="test_suites" type="string[]" descr="list of compatibility suites (for example &quot;cts&quot;, &quot;vts&quot;) that the module should be installed into."/>
        <field name="tidy" type="bool" descr="whether to run clang-tidy over C-like sources."/>
        <field name="tidy_checks" type="string[]" descr="Extra checks to enable or disable in clang-tidy"/>
        <field name="tidy_checks_as_errors" type="string[]" descr="Checks that should be treated as errors."/>
        <field name="tidy_flags" type="string[]" descr="Extra flags to pass to clang-tidy"/>
        <field name="unexported_symbols_list" type="string" descr="local file name to pass to the linker as -unexported_symbols_list"/>
        <field name="unique_host_soname" type="bool" descr="rename host libraries to prevent overlap with system installed libraries"/>
        <field name="use_clang_lld" type="bool" descr="Use clang lld instead of gnu ld."/>
        <field name="use_version_lib" type="bool" descr="make android::build:GetBuildNumber() available containing the build ID."/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vendor_available" type="bool" descr="whether this module should be allowed to be directly depended by other modules with `vendor: true`, `proprietary: true`, or `vendor_available:true`. If set to true, two variants will be built separately, one like normal, and the other limited to the set of libraries and headers that are exposed to /vendor modules. The vendor variant may be used with a different (newer) /system, so it shouldn't have any unversioned runtime dependencies, or make assumptions about the system that may not be true in the future. If set to false, this module becomes inaccessible from /vendor modules. Default value is true when vndk: {enabled: true} or vendor: true. Nothing happens if BOARD_VNDK_VERSION isn't set in the BoardConfig.mk"/>
        <field name="version_script" type="string" descr="local file name to pass to the linker as --version_script"/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
        <object-field name="vndk">
            <field name="enabled" type="bool" descr="declared as a VNDK or VNDK-SP module. The vendor variant will be installed in /system instead of /vendor partition. `vendor_vailable` must be explicitly set to either true or false together with `vndk: {enabled: true}`."/>
            <field name="support_system_process" type="bool" descr="declared as a VNDK-SP module, which is a subset of VNDK. `vndk: { enabled: true }` must set together. All these modules are allowed to link to VNDK-SP or LL-NDK modules only. Other dependency will cause link-type errors. If `support_system_process` is not set or set to false, the module is VNDK-core and can link to other VNDK-core, VNDK-SP or LL-NDK modules only."/>
            <field name="extends" type="string" descr="Extending another module"/>
        </object-field>
        <field name="whole_static_libs" type="blueprint[]" descr="list of modules whose object files should be linked into this module in their entirety.  For static library modules, all of the .o files from the intermediate directory of the dependency will be linked into this modules .a file.  For a shared library, the dependency's .a file will be linked into this module using -Wl,--whole-archive."/>
        <field name="xom" type="bool"/>
        <field name="yaccflags" type="string[]" descr="list of module-specific flags that will be used for .y and .yy compiles"/>
    </blueprint>
    <blueprint name="art_cc_library">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="list of source files used to compile the C/C++ module.  May be .c, .cpp, or .S files. srcs may reference the outputs of other modules that produce source files like genrule or filegroup using the syntax &quot;:module&quot;."/>
        <field name="host_supported" type="bool" descr="If set to true, build a variant of the module for the host.  Defaults to false."/>
        <field name="device_supported" type="bool" descr="If set to true, build a variant of the module for the device.  Defaults to true."/>
        <object-field name="aidl">
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the aidl include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the aidl include paths."/>
            <field name="generate_traces" type="bool" descr="whether to generate traces (for systrace) for this interface"/>
            <field name="export_aidl_headers" type="bool" descr="export headers generated from .aidl sources"/>
        </object-field>
        <field name="allow_undefined_symbols" type="bool" descr="allow the module to contain undefined symbols.  By default, modules cannot contain undefined symbols that are not satisified by their immediate dependencies.  Set this flag to true to remove --no-undefined from the linker flags. This flag should only be necessary for compiling low-level libraries like libc."/>
        <field name="asflags" type="string[]" descr="list of module-specific flags that will be used for .S compiles"/>
        <field name="bootstrap" type="bool" descr="Allows this module to use non-APEX version of libraries. Useful for building binaries that are started before APEXes are activated."/>
        <field name="c_std" type="string" descr="C standard version to use. Can be a specific version (such as &quot;gnu11&quot;), &quot;experimental&quot; (which will use draft versions like C1x when available), or the empty string (which will use the default)."/>
        <field name="cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles."/>
        <field name="clang" type="bool" descr="Deprecated. true is the default, false is invalid."/>
        <field name="clang_asflags" type="string[]" descr="list of module-specific flags that will be used for .S compiles when compiling with clang"/>
        <field name="clang_cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles when compiling with clang"/>
        <object-field name="codegen">
            <field name="arm" type="string[]"/>
            <field name="arm64" type="string[]"/>
            <field name="mips" type="string[]"/>
            <field name="mips64" type="string[]"/>
            <field name="x86" type="string[]"/>
            <field name="x86_64" type="string[]"/>
        </object-field>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="conlyflags" type="string[]" descr="list of module-specific flags that will be used for C compiles"/>
        <field name="cpp_std" type="string" descr="C++ standard version to use. Can be a specific version (such as &quot;gnu++11&quot;), &quot;experimental&quot; (which will use draft versions like C++1z when available), or the empty string (which will use the default)."/>
        <field name="cppflags" type="string[]" descr="list of module-specific flags that will be used for C++ compiles"/>
        <object-field name="debug" descr="release">
            <field name="cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles in debug or release builds"/>
        </object-field>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="double_loadable" type="bool" descr="whether this module is capable of being loaded with other instance (possibly an older version) of the same module in the same process. Currently, a shared library that is a member of VNDK (vndk: {enabled: true}) can be double loaded in a vendor process if the library is also a (direct and indirect) dependency of an LLNDK library. Such libraries must be explicitly marked as `double_loadable: true` by the owner, or the dependency from the LLNDK lib should be cut if the lib is not designed to be double loaded."/>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the C/C++ module. This is most useful in the arch/multilib variants to remove non-common files"/>
        <field name="export_generated_headers" type="blueprint[]" descr="list of generated headers to re-export include directories from. Entries must be present in generated_headers."/>
        <field name="export_header_lib_headers" type="blueprint[]" descr="list of header libraries to re-export include directories from. Entries must be present in header_libs."/>
        <field name="export_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the include path (using -I) for this module and any module that links against this module.  Directories listed in export_include_dirs do not need to be listed in local_include_dirs."/>
        <field name="export_shared_lib_headers" type="blueprint[]" descr="list of shared libraries to re-export include directories from. Entries must be present in shared_libs."/>
        <field name="export_static_lib_headers" type="blueprint[]" descr="list of static libraries to re-export include directories from. Entries must be present in static_libs."/>
        <field name="force_symbols_not_weak_list" type="string" descr="local file name to pass to the linker as -force_symbols_not_weak_list"/>
        <field name="force_symbols_weak_list" type="string" descr="local file name to pass to the linker as -force_symbols_weak_list"/>
        <field name="generated_headers" type="blueprint[]" descr="list of generated headers to add to the include path. These are the names of genrule modules."/>
        <field name="generated_sources" type="blueprint[]" descr="list of generated sources to compile. These are the names of gensrcs or genrule modules."/>
        <field name="gnu_extensions" type="bool" descr="if set to false, use -std=c++* instead of -std=gnu++*"/>
        <field name="group_static_libs" type="bool" descr="group static libraries.  This can resolve missing symbols issues with interdependencies between static libraries, but it is generally better to order them correctly instead."/>
        <object-field name="header_abi_checker">
            <field name="symbol_file" type="string" descr="Path to a symbol file that specifies the symbols to be included in the generated ABI dump file"/>
            <field name="exclude_symbol_versions" type="string[]" descr="Symbol versions that should be ignored from the symbol file"/>
            <field name="exclude_symbol_tags" type="string[]" descr="Symbol tags that should be ignored from the symbol file"/>
        </object-field>
        <field name="header_libs" type="blueprint[]" descr="list of modules that should only provide headers for this module."/>
        <field name="host_ldlibs" type="string[]" descr="-l arguments to pass to linker for host-provided shared libraries"/>
        <field name="include_build_directory" type="bool" descr="Add the directory containing the Android.bp file to the list of include directories. Defaults to true."/>
        <field name="include_dirs" type="string[]" descr="list of directories relative to the root of the source tree that will be added to the include path using -I. If possible, don't use this.  If adding paths from the current directory use local_include_dirs, if adding paths from other modules use export_include_dirs in that module."/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="instruction_set" type="string" descr="the instruction set architecture to use to compile the C/C++ module."/>
        <field name="ldflags" type="string[]" descr="list of module-specific flags that will be used for all link steps"/>
        <field name="local_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the include path using -I"/>
        <field name="logtags" type="string[]" descr="*.logtags files, to combine together in order to generate the /system/etc/event-log-tags file"/>
        <object-field name="lto">
            <field name="never" type="bool"/>
            <field name="full" type="bool"/>
            <field name="thin" type="bool"/>
        </object-field>
        <field name="native_coverage" type="bool"/>
        <field name="no_libcrt" type="bool" descr="don't link in libclang_rt.builtins-*.a"/>
        <field name="no_libgcc" type="bool" descr="don't link in libgcc.a"/>
        <field name="nocrt" type="bool" descr="don't link in crt_begin and crt_end.  This flag should only be necessary for compiling crt or libc."/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="openmp" type="bool" descr="Build and link with OpenMP"/>
        <field name="overrides" type="blueprint[]" descr="Names of modules to be overridden. Listed modules can only be other shared libraries (in Make or Soong). This does not completely prevent installation of the overridden libraries, but if both binaries would be installed by default (in PRODUCT_PACKAGES) the other library will be removed from PRODUCT_PACKAGES."/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="pack_relocations" type="bool" descr="Generate compact dynamic relocation table, default true."/>
        <object-field name="pgo">
            <field name="instrumentation" type="bool"/>
            <field name="sampling" type="bool"/>
            <field name="profile_file" type="string"/>
            <field name="benchmarks" type="string[]"/>
            <field name="enable_profile_use" type="bool"/>
            <field name="cflags" type="string[]" descr="Additional compiler flags to use when building this module for profiling (either instrumentation or sampling)."/>
        </object-field>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <object-field name="proto">
            <field name="export_proto_headers" type="bool" descr="export headers generated from .proto sources"/>
            <field name="type" type="string" descr="Proto generator type.  C++: full or lite.  Java: micro, nano, stream, or lite."/>
            <field name="plugin" type="string" descr="Proto plugin to use as the generator.  Must be a cc_binary_host module."/>
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the protoc include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the bp file that will be added to the protoc include paths."/>
            <field name="canonical_path_from_root" type="bool" descr="whether to identify the proto files from the root of the source tree (the original method in Android, useful for android-specific protos), or relative from where they were specified (useful for external/third party protos). This defaults to true today, but is expected to default to false in the future."/>
            <field name="static" type="bool" descr="Link statically against the protobuf runtime"/>
        </object-field>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="recovery_available" type="bool" descr="Make this module available when building for recovery"/>
        <field name="reexportedIncludeFlags" type="string[]"/>
        <field name="relative_install_path" type="string" descr="install to a subdirectory of the default install path for the module"/>
        <object-field name="renderscript">
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the llvm-rs-cc include paths"/>
            <field name="flags" type="string[]" descr="list of flags that will be passed to llvm-rs-cc"/>
            <field name="target_api" type="string" descr="Renderscript API level to target"/>
        </object-field>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="rtti" type="bool" descr="pass -frtti instead of -fno-rtti"/>
        <field name="runtime_libs" type="blueprint[]" descr="list of modules that should be installed with this module.  This is similar to 'required' but '.vendor' suffix will be appended to the module names if the shared libraries have vendor variants and this module uses VNDK."/>
        <object-field name="sanitize">
            <field name="never" type="bool"/>
            <field name="address" type="bool" descr="main sanitizers"/>
            <field name="thread" type="bool"/>
            <field name="hwaddress" type="bool"/>
            <field name="undefined" type="bool" descr="local sanitizers"/>
            <field name="all_undefined" type="bool"/>
            <field name="misc_undefined" type="string[]"/>
            <field name="coverage" type="bool"/>
            <field name="safestack" type="bool"/>
            <field name="cfi" type="bool"/>
            <field name="integer_overflow" type="bool"/>
            <field name="scudo" type="bool"/>
            <field name="scs" type="bool"/>
            <object-field name="diag">
                <field name="undefined" type="bool"/>
                <field name="cfi" type="bool"/>
                <field name="integer_overflow" type="bool"/>
                <field name="misc_undefined" type="string[]"/>
                <field name="no_recover" type="string[]"/>
            </object-field>
            <field name="recover" type="string[]" descr="value to pass to -fsanitize-recover="/>
            <field name="blacklist" type="string" descr="value to pass to -fsanitize-blacklist"/>
        </object-field>
        <field name="sdclang" type="bool" descr="compile module with SDLLVM instead of AOSP LLVM"/>
        <field name="sdk_version" type="string" descr="Minimum sdk version supported when compiling against the ndk"/>
        <field name="shared" type="string[]"/>
        <field name="shared_libs" type="blueprint[]" descr="list of modules that should be dynamically linked into this module."/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="static" type="string[]"/>
        <field name="static_libs" type="blueprint[]" descr="list of modules that should be statically linked into this module."/>
        <field name="static_ndk_lib" type="bool"/>
        <field name="stem" type="string" descr="set the name of the output"/>
        <field name="stl" type="string" descr="Select the STL library to use.  Possible values are &quot;libc++&quot;, &quot;libc++_static&quot;, &quot;libstdc++&quot;, or &quot;none&quot;. Leave blank to select the default."/>
        <object-field name="strip">
            <field name="none" type="bool"/>
            <field name="all" type="bool"/>
            <field name="keep_symbols" type="bool"/>
            <field name="keep_symbols_list" type="string[]"/>
            <field name="use_gnu_strip" type="bool"/>
        </object-field>
        <object-field name="stubs">
            <field name="symbol_file" type="string" descr="Relative path to the symbol map. The symbol map provides the list of symbols that are exported for stubs variant of this library."/>
            <field name="versions" type="string[]" descr="List versions to generate stubs libs for."/>
        </object-field>
        <field name="symbol_ordering_file" type="string" descr="Local file name to pass to the linker as --symbol-ordering-file"/>
        <field name="system_shared_libs" type="blueprint[]" descr="list of system libraries that will be dynamically linked to shared library and executable modules.  If unset, generally defaults to libc, libm, and libdl.  Set to [] to prevent linking against the defaults."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
            <object-field name="recovery">
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="srcs" type="string[]" descr="list of source files that should only be used in the recovery variant of the C/C++ module."/>
                <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="cflags" type="string[]" descr="List of additional cflags that should be used to build the recovery variant of the C/C++ module."/>
            </object-field>
            <object-field name="vendor">
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_runtime_libs" type="blueprint[]" descr="list of runtime libs that should not be installed along with the vendor variant of the C/C++ module."/>
                <field name="version_script" type="string" descr="version script for this vendor variant"/>
                <field name="override_export_include_dirs" type="string[]" descr="list of exported include directories, like export_include_dirs, that will be applied to the vendor variant of this library. This will overwrite any other declarations."/>
                <field name="srcs" type="string[]" descr="list of source files that should only be used in the vendor variant of the C/C++ module."/>
                <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="cflags" type="string[]" descr="List of additional cflags that should be used to build the vendor variant of the C/C++ module."/>
            </object-field>
        </object-field>
        <field name="tidy" type="bool" descr="whether to run clang-tidy over C-like sources."/>
        <field name="tidy_checks" type="string[]" descr="Extra checks to enable or disable in clang-tidy"/>
        <field name="tidy_checks_as_errors" type="string[]" descr="Checks that should be treated as errors."/>
        <field name="tidy_flags" type="string[]" descr="Extra flags to pass to clang-tidy"/>
        <field name="unexported_symbols_list" type="string" descr="local file name to pass to the linker as -unexported_symbols_list"/>
        <field name="unique_host_soname" type="bool" descr="rename host libraries to prevent overlap with system installed libraries"/>
        <field name="use_clang_lld" type="bool" descr="Use clang lld instead of gnu ld."/>
        <field name="use_version_lib" type="bool" descr="make android::build:GetBuildNumber() available containing the build ID."/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vendor_available" type="bool" descr="whether this module should be allowed to be directly depended by other modules with `vendor: true`, `proprietary: true`, or `vendor_available:true`. If set to true, two variants will be built separately, one like normal, and the other limited to the set of libraries and headers that are exposed to /vendor modules. The vendor variant may be used with a different (newer) /system, so it shouldn't have any unversioned runtime dependencies, or make assumptions about the system that may not be true in the future. If set to false, this module becomes inaccessible from /vendor modules. Default value is true when vndk: {enabled: true} or vendor: true. Nothing happens if BOARD_VNDK_VERSION isn't set in the BoardConfig.mk"/>
        <field name="version_script" type="string" descr="local file name to pass to the linker as --version_script"/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
        <object-field name="vndk">
            <field name="enabled" type="bool" descr="declared as a VNDK or VNDK-SP module. The vendor variant will be installed in /system instead of /vendor partition. `vendor_vailable` must be explicitly set to either true or false together with `vndk: {enabled: true}`."/>
            <field name="support_system_process" type="bool" descr="declared as a VNDK-SP module, which is a subset of VNDK. `vndk: { enabled: true }` must set together. All these modules are allowed to link to VNDK-SP or LL-NDK modules only. Other dependency will cause link-type errors. If `support_system_process` is not set or set to false, the module is VNDK-core and can link to other VNDK-core, VNDK-SP or LL-NDK modules only."/>
            <field name="extends" type="string" descr="Extending another module"/>
        </object-field>
        <field name="whole_static_libs" type="blueprint[]" descr="list of modules whose object files should be linked into this module in their entirety.  For static library modules, all of the .o files from the intermediate directory of the dependency will be linked into this modules .a file.  For a shared library, the dependency's .a file will be linked into this module using -Wl,--whole-archive."/>
        <field name="xom" type="bool"/>
        <field name="yaccflags" type="string[]" descr="list of module-specific flags that will be used for .y and .yy compiles"/>
    </blueprint>
    <blueprint name="art_cc_library_static">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="list of source files used to compile the C/C++ module.  May be .c, .cpp, or .S files. srcs may reference the outputs of other modules that produce source files like genrule or filegroup using the syntax &quot;:module&quot;."/>
        <field name="host_supported" type="bool" descr="If set to true, build a variant of the module for the host.  Defaults to false."/>
        <field name="device_supported" type="bool" descr="If set to true, build a variant of the module for the device.  Defaults to true."/>
        <object-field name="aidl">
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the aidl include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the aidl include paths."/>
            <field name="generate_traces" type="bool" descr="whether to generate traces (for systrace) for this interface"/>
            <field name="export_aidl_headers" type="bool" descr="export headers generated from .aidl sources"/>
        </object-field>
        <field name="allow_undefined_symbols" type="bool" descr="allow the module to contain undefined symbols.  By default, modules cannot contain undefined symbols that are not satisified by their immediate dependencies.  Set this flag to true to remove --no-undefined from the linker flags. This flag should only be necessary for compiling low-level libraries like libc."/>
        <field name="asflags" type="string[]" descr="list of module-specific flags that will be used for .S compiles"/>
        <field name="bootstrap" type="bool" descr="Allows this module to use non-APEX version of libraries. Useful for building binaries that are started before APEXes are activated."/>
        <field name="c_std" type="string" descr="C standard version to use. Can be a specific version (such as &quot;gnu11&quot;), &quot;experimental&quot; (which will use draft versions like C1x when available), or the empty string (which will use the default)."/>
        <field name="cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles."/>
        <field name="clang" type="bool" descr="Deprecated. true is the default, false is invalid."/>
        <field name="clang_asflags" type="string[]" descr="list of module-specific flags that will be used for .S compiles when compiling with clang"/>
        <field name="clang_cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles when compiling with clang"/>
        <object-field name="codegen">
            <field name="arm" type="string[]"/>
            <field name="arm64" type="string[]"/>
            <field name="mips" type="string[]"/>
            <field name="mips64" type="string[]"/>
            <field name="x86" type="string[]"/>
            <field name="x86_64" type="string[]"/>
        </object-field>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="conlyflags" type="string[]" descr="list of module-specific flags that will be used for C compiles"/>
        <field name="cpp_std" type="string" descr="C++ standard version to use. Can be a specific version (such as &quot;gnu++11&quot;), &quot;experimental&quot; (which will use draft versions like C++1z when available), or the empty string (which will use the default)."/>
        <field name="cppflags" type="string[]" descr="list of module-specific flags that will be used for C++ compiles"/>
        <object-field name="debug" descr="release">
            <field name="cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles in debug or release builds"/>
        </object-field>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="double_loadable" type="bool" descr="whether this module is capable of being loaded with other instance (possibly an older version) of the same module in the same process. Currently, a shared library that is a member of VNDK (vndk: {enabled: true}) can be double loaded in a vendor process if the library is also a (direct and indirect) dependency of an LLNDK library. Such libraries must be explicitly marked as `double_loadable: true` by the owner, or the dependency from the LLNDK lib should be cut if the lib is not designed to be double loaded."/>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the C/C++ module. This is most useful in the arch/multilib variants to remove non-common files"/>
        <field name="export_generated_headers" type="blueprint[]" descr="list of generated headers to re-export include directories from. Entries must be present in generated_headers."/>
        <field name="export_header_lib_headers" type="blueprint[]" descr="list of header libraries to re-export include directories from. Entries must be present in header_libs."/>
        <field name="export_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the include path (using -I) for this module and any module that links against this module.  Directories listed in export_include_dirs do not need to be listed in local_include_dirs."/>
        <field name="export_shared_lib_headers" type="blueprint[]" descr="list of shared libraries to re-export include directories from. Entries must be present in shared_libs."/>
        <field name="export_static_lib_headers" type="blueprint[]" descr="list of static libraries to re-export include directories from. Entries must be present in static_libs."/>
        <field name="force_symbols_not_weak_list" type="string" descr="local file name to pass to the linker as -force_symbols_not_weak_list"/>
        <field name="force_symbols_weak_list" type="string" descr="local file name to pass to the linker as -force_symbols_weak_list"/>
        <field name="generated_headers" type="blueprint[]" descr="list of generated headers to add to the include path. These are the names of genrule modules."/>
        <field name="generated_sources" type="blueprint[]" descr="list of generated sources to compile. These are the names of gensrcs or genrule modules."/>
        <field name="gnu_extensions" type="bool" descr="if set to false, use -std=c++* instead of -std=gnu++*"/>
        <field name="group_static_libs" type="bool" descr="group static libraries.  This can resolve missing symbols issues with interdependencies between static libraries, but it is generally better to order them correctly instead."/>
        <object-field name="header_abi_checker">
            <field name="symbol_file" type="string" descr="Path to a symbol file that specifies the symbols to be included in the generated ABI dump file"/>
            <field name="exclude_symbol_versions" type="string[]" descr="Symbol versions that should be ignored from the symbol file"/>
            <field name="exclude_symbol_tags" type="string[]" descr="Symbol tags that should be ignored from the symbol file"/>
        </object-field>
        <field name="header_libs" type="blueprint[]" descr="list of modules that should only provide headers for this module."/>
        <field name="host_ldlibs" type="string[]" descr="-l arguments to pass to linker for host-provided shared libraries"/>
        <field name="include_build_directory" type="bool" descr="Add the directory containing the Android.bp file to the list of include directories. Defaults to true."/>
        <field name="include_dirs" type="string[]" descr="list of directories relative to the root of the source tree that will be added to the include path using -I. If possible, don't use this.  If adding paths from the current directory use local_include_dirs, if adding paths from other modules use export_include_dirs in that module."/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="instruction_set" type="string" descr="the instruction set architecture to use to compile the C/C++ module."/>
        <field name="ldflags" type="string[]" descr="list of module-specific flags that will be used for all link steps"/>
        <field name="local_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the include path using -I"/>
        <field name="logtags" type="string[]" descr="*.logtags files, to combine together in order to generate the /system/etc/event-log-tags file"/>
        <object-field name="lto">
            <field name="never" type="bool"/>
            <field name="full" type="bool"/>
            <field name="thin" type="bool"/>
        </object-field>
        <field name="native_coverage" type="bool"/>
        <field name="no_libcrt" type="bool" descr="don't link in libclang_rt.builtins-*.a"/>
        <field name="no_libgcc" type="bool" descr="don't link in libgcc.a"/>
        <field name="nocrt" type="bool" descr="don't link in crt_begin and crt_end.  This flag should only be necessary for compiling crt or libc."/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="openmp" type="bool" descr="Build and link with OpenMP"/>
        <field name="overrides" type="blueprint[]" descr="Names of modules to be overridden. Listed modules can only be other shared libraries (in Make or Soong). This does not completely prevent installation of the overridden libraries, but if both binaries would be installed by default (in PRODUCT_PACKAGES) the other library will be removed from PRODUCT_PACKAGES."/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="pack_relocations" type="bool" descr="Generate compact dynamic relocation table, default true."/>
        <object-field name="pgo">
            <field name="instrumentation" type="bool"/>
            <field name="sampling" type="bool"/>
            <field name="profile_file" type="string"/>
            <field name="benchmarks" type="string[]"/>
            <field name="enable_profile_use" type="bool"/>
            <field name="cflags" type="string[]" descr="Additional compiler flags to use when building this module for profiling (either instrumentation or sampling)."/>
        </object-field>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <object-field name="proto">
            <field name="export_proto_headers" type="bool" descr="export headers generated from .proto sources"/>
            <field name="type" type="string" descr="Proto generator type.  C++: full or lite.  Java: micro, nano, stream, or lite."/>
            <field name="plugin" type="string" descr="Proto plugin to use as the generator.  Must be a cc_binary_host module."/>
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the protoc include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the bp file that will be added to the protoc include paths."/>
            <field name="canonical_path_from_root" type="bool" descr="whether to identify the proto files from the root of the source tree (the original method in Android, useful for android-specific protos), or relative from where they were specified (useful for external/third party protos). This defaults to true today, but is expected to default to false in the future."/>
            <field name="static" type="bool" descr="Link statically against the protobuf runtime"/>
        </object-field>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="recovery_available" type="bool" descr="Make this module available when building for recovery"/>
        <field name="reexportedIncludeFlags" type="string[]"/>
        <field name="relative_install_path" type="string" descr="install to a subdirectory of the default install path for the module"/>
        <object-field name="renderscript">
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the llvm-rs-cc include paths"/>
            <field name="flags" type="string[]" descr="list of flags that will be passed to llvm-rs-cc"/>
            <field name="target_api" type="string" descr="Renderscript API level to target"/>
        </object-field>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="rtti" type="bool" descr="pass -frtti instead of -fno-rtti"/>
        <field name="runtime_libs" type="blueprint[]" descr="list of modules that should be installed with this module.  This is similar to 'required' but '.vendor' suffix will be appended to the module names if the shared libraries have vendor variants and this module uses VNDK."/>
        <object-field name="sanitize">
            <field name="never" type="bool"/>
            <field name="address" type="bool" descr="main sanitizers"/>
            <field name="thread" type="bool"/>
            <field name="hwaddress" type="bool"/>
            <field name="undefined" type="bool" descr="local sanitizers"/>
            <field name="all_undefined" type="bool"/>
            <field name="misc_undefined" type="string[]"/>
            <field name="coverage" type="bool"/>
            <field name="safestack" type="bool"/>
            <field name="cfi" type="bool"/>
            <field name="integer_overflow" type="bool"/>
            <field name="scudo" type="bool"/>
            <field name="scs" type="bool"/>
            <object-field name="diag">
                <field name="undefined" type="bool"/>
                <field name="cfi" type="bool"/>
                <field name="integer_overflow" type="bool"/>
                <field name="misc_undefined" type="string[]"/>
                <field name="no_recover" type="string[]"/>
            </object-field>
            <field name="recover" type="string[]" descr="value to pass to -fsanitize-recover="/>
            <field name="blacklist" type="string" descr="value to pass to -fsanitize-blacklist"/>
        </object-field>
        <field name="sdclang" type="bool" descr="compile module with SDLLVM instead of AOSP LLVM"/>
        <field name="sdk_version" type="string" descr="Minimum sdk version supported when compiling against the ndk"/>
        <field name="shared" type="string[]"/>
        <field name="shared_libs" type="blueprint[]" descr="list of modules that should be dynamically linked into this module."/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="static" type="string[]"/>
        <field name="static_libs" type="blueprint[]" descr="list of modules that should be statically linked into this module."/>
        <field name="static_ndk_lib" type="bool"/>
        <field name="stem" type="string" descr="set the name of the output"/>
        <field name="stl" type="string" descr="Select the STL library to use.  Possible values are &quot;libc++&quot;, &quot;libc++_static&quot;, &quot;libstdc++&quot;, or &quot;none&quot;. Leave blank to select the default."/>
        <object-field name="strip">
            <field name="none" type="bool"/>
            <field name="all" type="bool"/>
            <field name="keep_symbols" type="bool"/>
            <field name="keep_symbols_list" type="string[]"/>
            <field name="use_gnu_strip" type="bool"/>
        </object-field>
        <object-field name="stubs">
            <field name="symbol_file" type="string" descr="Relative path to the symbol map. The symbol map provides the list of symbols that are exported for stubs variant of this library."/>
            <field name="versions" type="string[]" descr="List versions to generate stubs libs for."/>
        </object-field>
        <field name="symbol_ordering_file" type="string" descr="Local file name to pass to the linker as --symbol-ordering-file"/>
        <field name="system_shared_libs" type="blueprint[]" descr="list of system libraries that will be dynamically linked to shared library and executable modules.  If unset, generally defaults to libc, libm, and libdl.  Set to [] to prevent linking against the defaults."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
            <object-field name="recovery">
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="srcs" type="string[]" descr="list of source files that should only be used in the recovery variant of the C/C++ module."/>
                <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="cflags" type="string[]" descr="List of additional cflags that should be used to build the recovery variant of the C/C++ module."/>
            </object-field>
            <object-field name="vendor">
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_runtime_libs" type="blueprint[]" descr="list of runtime libs that should not be installed along with the vendor variant of the C/C++ module."/>
                <field name="version_script" type="string" descr="version script for this vendor variant"/>
                <field name="override_export_include_dirs" type="string[]" descr="list of exported include directories, like export_include_dirs, that will be applied to the vendor variant of this library. This will overwrite any other declarations."/>
                <field name="srcs" type="string[]" descr="list of source files that should only be used in the vendor variant of the C/C++ module."/>
                <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="cflags" type="string[]" descr="List of additional cflags that should be used to build the vendor variant of the C/C++ module."/>
            </object-field>
        </object-field>
        <field name="tidy" type="bool" descr="whether to run clang-tidy over C-like sources."/>
        <field name="tidy_checks" type="string[]" descr="Extra checks to enable or disable in clang-tidy"/>
        <field name="tidy_checks_as_errors" type="string[]" descr="Checks that should be treated as errors."/>
        <field name="tidy_flags" type="string[]" descr="Extra flags to pass to clang-tidy"/>
        <field name="unexported_symbols_list" type="string" descr="local file name to pass to the linker as -unexported_symbols_list"/>
        <field name="unique_host_soname" type="bool" descr="rename host libraries to prevent overlap with system installed libraries"/>
        <field name="use_clang_lld" type="bool" descr="Use clang lld instead of gnu ld."/>
        <field name="use_version_lib" type="bool" descr="make android::build:GetBuildNumber() available containing the build ID."/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vendor_available" type="bool" descr="whether this module should be allowed to be directly depended by other modules with `vendor: true`, `proprietary: true`, or `vendor_available:true`. If set to true, two variants will be built separately, one like normal, and the other limited to the set of libraries and headers that are exposed to /vendor modules. The vendor variant may be used with a different (newer) /system, so it shouldn't have any unversioned runtime dependencies, or make assumptions about the system that may not be true in the future. If set to false, this module becomes inaccessible from /vendor modules. Default value is true when vndk: {enabled: true} or vendor: true. Nothing happens if BOARD_VNDK_VERSION isn't set in the BoardConfig.mk"/>
        <field name="version_script" type="string" descr="local file name to pass to the linker as --version_script"/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
        <object-field name="vndk">
            <field name="enabled" type="bool" descr="declared as a VNDK or VNDK-SP module. The vendor variant will be installed in /system instead of /vendor partition. `vendor_vailable` must be explicitly set to either true or false together with `vndk: {enabled: true}`."/>
            <field name="support_system_process" type="bool" descr="declared as a VNDK-SP module, which is a subset of VNDK. `vndk: { enabled: true }` must set together. All these modules are allowed to link to VNDK-SP or LL-NDK modules only. Other dependency will cause link-type errors. If `support_system_process` is not set or set to false, the module is VNDK-core and can link to other VNDK-core, VNDK-SP or LL-NDK modules only."/>
            <field name="extends" type="string" descr="Extending another module"/>
        </object-field>
        <field name="whole_static_libs" type="blueprint[]" descr="list of modules whose object files should be linked into this module in their entirety.  For static library modules, all of the .o files from the intermediate directory of the dependency will be linked into this modules .a file.  For a shared library, the dependency's .a file will be linked into this module using -Wl,--whole-archive."/>
        <field name="xom" type="bool"/>
        <field name="yaccflags" type="string[]" descr="list of module-specific flags that will be used for .y and .yy compiles"/>
    </blueprint>
    <blueprint name="art_cc_test">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="list of source files used to compile the C/C++ module.  May be .c, .cpp, or .S files. srcs may reference the outputs of other modules that produce source files like genrule or filegroup using the syntax &quot;:module&quot;."/>
        <field name="host_supported" type="bool" descr="If set to true, build a variant of the module for the host.  Defaults to false."/>
        <field name="device_supported" type="bool" descr="If set to true, build a variant of the module for the device.  Defaults to true."/>
        <object-field name="aidl">
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the aidl include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the aidl include paths."/>
            <field name="generate_traces" type="bool" descr="whether to generate traces (for systrace) for this interface"/>
        </object-field>
        <field name="allow_undefined_symbols" type="bool" descr="allow the module to contain undefined symbols.  By default, modules cannot contain undefined symbols that are not satisified by their immediate dependencies.  Set this flag to true to remove --no-undefined from the linker flags. This flag should only be necessary for compiling low-level libraries like libc."/>
        <field name="asflags" type="string[]" descr="list of module-specific flags that will be used for .S compiles"/>
        <field name="bootstrap" type="bool" descr="Allows this module to use non-APEX version of libraries. Useful for building binaries that are started before APEXes are activated."/>
        <field name="c_std" type="string" descr="C standard version to use. Can be a specific version (such as &quot;gnu11&quot;), &quot;experimental&quot; (which will use draft versions like C1x when available), or the empty string (which will use the default)."/>
        <field name="cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles."/>
        <field name="clang" type="bool" descr="Deprecated. true is the default, false is invalid."/>
        <field name="clang_asflags" type="string[]" descr="list of module-specific flags that will be used for .S compiles when compiling with clang"/>
        <field name="clang_cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles when compiling with clang"/>
        <object-field name="codegen">
            <field name="arm" type="string[]"/>
            <field name="arm64" type="string[]"/>
            <field name="mips" type="string[]"/>
            <field name="mips64" type="string[]"/>
            <field name="x86" type="string[]"/>
            <field name="x86_64" type="string[]"/>
        </object-field>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="conlyflags" type="string[]" descr="list of module-specific flags that will be used for C compiles"/>
        <field name="cpp_std" type="string" descr="C++ standard version to use. Can be a specific version (such as &quot;gnu++11&quot;), &quot;experimental&quot; (which will use draft versions like C++1z when available), or the empty string (which will use the default)."/>
        <field name="cppflags" type="string[]" descr="list of module-specific flags that will be used for C++ compiles"/>
        <field name="data" type="string[]" descr="list of files or filegroup modules that provide data that should be installed alongside the test"/>
        <object-field name="debug" descr="release">
            <field name="cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles in debug or release builds"/>
        </object-field>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="double_loadable" type="bool" descr="whether this module is capable of being loaded with other instance (possibly an older version) of the same module in the same process. Currently, a shared library that is a member of VNDK (vndk: {enabled: true}) can be double loaded in a vendor process if the library is also a (direct and indirect) dependency of an LLNDK library. Such libraries must be explicitly marked as `double_loadable: true` by the owner, or the dependency from the LLNDK lib should be cut if the lib is not designed to be double loaded."/>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the C/C++ module. This is most useful in the arch/multilib variants to remove non-common files"/>
        <field name="export_generated_headers" type="blueprint[]" descr="list of generated headers to re-export include directories from. Entries must be present in generated_headers."/>
        <field name="export_header_lib_headers" type="blueprint[]" descr="list of header libraries to re-export include directories from. Entries must be present in header_libs."/>
        <field name="export_shared_lib_headers" type="blueprint[]" descr="list of shared libraries to re-export include directories from. Entries must be present in shared_libs."/>
        <field name="export_static_lib_headers" type="blueprint[]" descr="list of static libraries to re-export include directories from. Entries must be present in static_libs."/>
        <field name="generated_headers" type="blueprint[]" descr="list of generated headers to add to the include path. These are the names of genrule modules."/>
        <field name="generated_sources" type="blueprint[]" descr="list of generated sources to compile. These are the names of gensrcs or genrule modules."/>
        <field name="gnu_extensions" type="bool" descr="if set to false, use -std=c++* instead of -std=gnu++*"/>
        <field name="group_static_libs" type="bool" descr="group static libraries.  This can resolve missing symbols issues with interdependencies between static libraries, but it is generally better to order them correctly instead."/>
        <field name="gtest" type="bool" descr="if set, build against the gtest library. Defaults to true."/>
        <field name="header_libs" type="blueprint[]" descr="list of modules that should only provide headers for this module."/>
        <field name="host_ldlibs" type="string[]" descr="-l arguments to pass to linker for host-provided shared libraries"/>
        <field name="include_build_directory" type="bool" descr="Add the directory containing the Android.bp file to the list of include directories. Defaults to true."/>
        <field name="include_dirs" type="string[]" descr="list of directories relative to the root of the source tree that will be added to the include path using -I. If possible, don't use this.  If adding paths from the current directory use local_include_dirs, if adding paths from other modules use export_include_dirs in that module."/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="instruction_set" type="string" descr="the instruction set architecture to use to compile the C/C++ module."/>
        <field name="isolated" type="bool" descr="if set, use the isolated gtest runner. Defaults to false."/>
        <field name="ldflags" type="string[]" descr="list of module-specific flags that will be used for all link steps"/>
        <field name="local_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the include path using -I"/>
        <field name="logtags" type="string[]" descr="*.logtags files, to combine together in order to generate the /system/etc/event-log-tags file"/>
        <object-field name="lto">
            <field name="never" type="bool"/>
            <field name="full" type="bool"/>
            <field name="thin" type="bool"/>
        </object-field>
        <field name="native_coverage" type="bool"/>
        <field name="no_libcrt" type="bool" descr="don't link in libclang_rt.builtins-*.a"/>
        <field name="no_libgcc" type="bool" descr="don't link in libgcc.a"/>
        <field name="no_named_install_directory" type="bool" descr="Disables the creation of a test-specific directory when used with relative_install_path. Useful if several tests need to be in the same directory, but test_per_src doesn't work."/>
        <field name="nocrt" type="bool" descr="don't link in crt_begin and crt_end.  This flag should only be necessary for compiling crt or libc."/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="openmp" type="bool" descr="Build and link with OpenMP"/>
        <field name="overrides" type="blueprint[]" descr="Names of modules to be overridden. Listed modules can only be other binaries (in Make or Soong). This does not completely prevent installation of the overridden binaries, but if both binaries would be installed by default (in PRODUCT_PACKAGES) the other binary will be removed from PRODUCT_PACKAGES."/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="pack_relocations" type="bool" descr="Generate compact dynamic relocation table, default true."/>
        <object-field name="pgo">
            <field name="instrumentation" type="bool"/>
            <field name="sampling" type="bool"/>
            <field name="profile_file" type="string"/>
            <field name="benchmarks" type="string[]"/>
            <field name="enable_profile_use" type="bool"/>
            <field name="cflags" type="string[]" descr="Additional compiler flags to use when building this module for profiling (either instrumentation or sampling)."/>
        </object-field>
        <field name="prefix_symbols" type="string" descr="if set, add an extra objcopy --prefix-symbols= step"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <object-field name="proto">
            <field name="type" type="string" descr="Proto generator type.  C++: full or lite.  Java: micro, nano, stream, or lite."/>
            <field name="plugin" type="string" descr="Proto plugin to use as the generator.  Must be a cc_binary_host module."/>
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the protoc include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the bp file that will be added to the protoc include paths."/>
            <field name="canonical_path_from_root" type="bool" descr="whether to identify the proto files from the root of the source tree (the original method in Android, useful for android-specific protos), or relative from where they were specified (useful for external/third party protos). This defaults to true today, but is expected to default to false in the future."/>
            <field name="static" type="bool" descr="Link statically against the protobuf runtime"/>
        </object-field>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="recovery_available" type="bool" descr="Make this module available when building for recovery"/>
        <field name="reexportedIncludeFlags" type="string[]"/>
        <field name="relative_install_path" type="string" descr="install to a subdirectory of the default install path for the module"/>
        <object-field name="renderscript">
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the llvm-rs-cc include paths"/>
            <field name="flags" type="string[]" descr="list of flags that will be passed to llvm-rs-cc"/>
            <field name="target_api" type="string" descr="Renderscript API level to target"/>
        </object-field>
        <field name="require_root" type="bool" descr="Add RootTargetPreparer to auto generated test config. This guarantees the test to run with root permission."/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="rtti" type="bool" descr="pass -frtti instead of -fno-rtti"/>
        <field name="runtime_libs" type="blueprint[]" descr="list of modules that should be installed with this module.  This is similar to 'required' but '.vendor' suffix will be appended to the module names if the shared libraries have vendor variants and this module uses VNDK."/>
        <object-field name="sanitize">
            <field name="never" type="bool"/>
            <field name="address" type="bool" descr="main sanitizers"/>
            <field name="thread" type="bool"/>
            <field name="hwaddress" type="bool"/>
            <field name="undefined" type="bool" descr="local sanitizers"/>
            <field name="all_undefined" type="bool"/>
            <field name="misc_undefined" type="string[]"/>
            <field name="coverage" type="bool"/>
            <field name="safestack" type="bool"/>
            <field name="cfi" type="bool"/>
            <field name="integer_overflow" type="bool"/>
            <field name="scudo" type="bool"/>
            <field name="scs" type="bool"/>
            <object-field name="diag">
                <field name="undefined" type="bool"/>
                <field name="cfi" type="bool"/>
                <field name="integer_overflow" type="bool"/>
                <field name="misc_undefined" type="string[]"/>
                <field name="no_recover" type="string[]"/>
            </object-field>
            <field name="recover" type="string[]" descr="value to pass to -fsanitize-recover="/>
            <field name="blacklist" type="string" descr="value to pass to -fsanitize-blacklist"/>
        </object-field>
        <field name="sdclang" type="bool" descr="compile module with SDLLVM instead of AOSP LLVM"/>
        <field name="sdk_version" type="string" descr="Minimum sdk version supported when compiling against the ndk"/>
        <field name="shared_libs" type="blueprint[]" descr="list of modules that should be dynamically linked into this module."/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="static_executable" type="bool" descr="compile executable with -static"/>
        <field name="static_libs" type="blueprint[]" descr="list of modules that should be statically linked into this module."/>
        <field name="stem" type="string" descr="set the name of the output"/>
        <field name="stl" type="string" descr="Select the STL library to use.  Possible values are &quot;libc++&quot;, &quot;libc++_static&quot;, &quot;libstdc++&quot;, or &quot;none&quot;. Leave blank to select the default."/>
        <object-field name="strip">
            <field name="none" type="bool"/>
            <field name="all" type="bool"/>
            <field name="keep_symbols" type="bool"/>
            <field name="keep_symbols_list" type="string[]"/>
            <field name="use_gnu_strip" type="bool"/>
        </object-field>
        <field name="suffix" type="string" descr="append to the name of the output"/>
        <field name="symbol_ordering_file" type="string" descr="Local file name to pass to the linker as --symbol-ordering-file"/>
        <field name="symlink_preferred_arch" type="bool" descr="if set, install a symlink to the preferred architecture"/>
        <field name="symlinks" type="string[]" descr="install symlinks to the binary.  Symlink names will have the suffix and the binary extension (if any) appended"/>
        <field name="system_shared_libs" type="blueprint[]" descr="list of system libraries that will be dynamically linked to shared library and executable modules.  If unset, generally defaults to libc, libm, and libdl.  Set to [] to prevent linking against the defaults."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
            <object-field name="recovery">
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="srcs" type="string[]" descr="list of source files that should only be used in the recovery variant of the C/C++ module."/>
                <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="cflags" type="string[]" descr="List of additional cflags that should be used to build the recovery variant of the C/C++ module."/>
            </object-field>
            <object-field name="vendor">
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_runtime_libs" type="blueprint[]" descr="list of runtime libs that should not be installed along with the vendor variant of the C/C++ module."/>
                <field name="version_script" type="string" descr="version script for this vendor variant"/>
                <field name="srcs" type="string[]" descr="list of source files that should only be used in the vendor variant of the C/C++ module."/>
                <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="cflags" type="string[]" descr="List of additional cflags that should be used to build the vendor variant of the C/C++ module."/>
            </object-field>
        </object-field>
        <field name="test_config" type="string" descr="the name of the test configuration (for example &quot;AndroidTest.xml&quot;) that should be installed with the module."/>
        <field name="test_config_template" type="string" descr="the name of the test configuration template (for example &quot;AndroidTestTemplate.xml&quot;) that should be installed with the module."/>
        <field name="test_options" type="string[]" descr="Test options."/>
        <field name="test_per_src" type="bool" descr="Create a separate binary for each source file.  Useful when there is global state that can not be torn down and reset between each test suite."/>
        <field name="test_suites" type="string[]" descr="list of compatibility suites (for example &quot;cts&quot;, &quot;vts&quot;) that the module should be installed into."/>
        <field name="tidy" type="bool" descr="whether to run clang-tidy over C-like sources."/>
        <field name="tidy_checks" type="string[]" descr="Extra checks to enable or disable in clang-tidy"/>
        <field name="tidy_checks_as_errors" type="string[]" descr="Checks that should be treated as errors."/>
        <field name="tidy_flags" type="string[]" descr="Extra flags to pass to clang-tidy"/>
        <field name="use_clang_lld" type="bool" descr="Use clang lld instead of gnu ld."/>
        <field name="use_version_lib" type="bool" descr="make android::build:GetBuildNumber() available containing the build ID."/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vendor_available" type="bool" descr="whether this module should be allowed to be directly depended by other modules with `vendor: true`, `proprietary: true`, or `vendor_available:true`. If set to true, two variants will be built separately, one like normal, and the other limited to the set of libraries and headers that are exposed to /vendor modules. The vendor variant may be used with a different (newer) /system, so it shouldn't have any unversioned runtime dependencies, or make assumptions about the system that may not be true in the future. If set to false, this module becomes inaccessible from /vendor modules. Default value is true when vndk: {enabled: true} or vendor: true. Nothing happens if BOARD_VNDK_VERSION isn't set in the BoardConfig.mk"/>
        <field name="version_script" type="string" descr="local file name to pass to the linker as --version_script"/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
        <object-field name="vndk">
            <field name="enabled" type="bool" descr="declared as a VNDK or VNDK-SP module. The vendor variant will be installed in /system instead of /vendor partition. `vendor_vailable` must be explicitly set to either true or false together with `vndk: {enabled: true}`."/>
            <field name="support_system_process" type="bool" descr="declared as a VNDK-SP module, which is a subset of VNDK. `vndk: { enabled: true }` must set together. All these modules are allowed to link to VNDK-SP or LL-NDK modules only. Other dependency will cause link-type errors. If `support_system_process` is not set or set to false, the module is VNDK-core and can link to other VNDK-core, VNDK-SP or LL-NDK modules only."/>
            <field name="extends" type="string" descr="Extending another module"/>
        </object-field>
        <field name="whole_static_libs" type="blueprint[]" descr="list of modules whose object files should be linked into this module in their entirety.  For static library modules, all of the .o files from the intermediate directory of the dependency will be linked into this modules .a file.  For a shared library, the dependency's .a file will be linked into this module using -Wl,--whole-archive."/>
        <field name="xom" type="bool"/>
        <field name="yaccflags" type="string[]" descr="list of module-specific flags that will be used for .y and .yy compiles"/>
    </blueprint>
    <blueprint name="art_cc_test_library">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="list of source files used to compile the C/C++ module.  May be .c, .cpp, or .S files. srcs may reference the outputs of other modules that produce source files like genrule or filegroup using the syntax &quot;:module&quot;."/>
        <field name="host_supported" type="bool" descr="If set to true, build a variant of the module for the host.  Defaults to false."/>
        <field name="device_supported" type="bool" descr="If set to true, build a variant of the module for the device.  Defaults to true."/>
        <object-field name="aidl">
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the aidl include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the aidl include paths."/>
            <field name="generate_traces" type="bool" descr="whether to generate traces (for systrace) for this interface"/>
            <field name="export_aidl_headers" type="bool" descr="export headers generated from .aidl sources"/>
        </object-field>
        <field name="allow_undefined_symbols" type="bool" descr="allow the module to contain undefined symbols.  By default, modules cannot contain undefined symbols that are not satisified by their immediate dependencies.  Set this flag to true to remove --no-undefined from the linker flags. This flag should only be necessary for compiling low-level libraries like libc."/>
        <field name="asflags" type="string[]" descr="list of module-specific flags that will be used for .S compiles"/>
        <field name="bootstrap" type="bool" descr="Allows this module to use non-APEX version of libraries. Useful for building binaries that are started before APEXes are activated."/>
        <field name="c_std" type="string" descr="C standard version to use. Can be a specific version (such as &quot;gnu11&quot;), &quot;experimental&quot; (which will use draft versions like C1x when available), or the empty string (which will use the default)."/>
        <field name="cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles."/>
        <field name="clang" type="bool" descr="Deprecated. true is the default, false is invalid."/>
        <field name="clang_asflags" type="string[]" descr="list of module-specific flags that will be used for .S compiles when compiling with clang"/>
        <field name="clang_cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles when compiling with clang"/>
        <object-field name="codegen">
            <field name="arm" type="string[]"/>
            <field name="arm64" type="string[]"/>
            <field name="mips" type="string[]"/>
            <field name="mips64" type="string[]"/>
            <field name="x86" type="string[]"/>
            <field name="x86_64" type="string[]"/>
        </object-field>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="conlyflags" type="string[]" descr="list of module-specific flags that will be used for C compiles"/>
        <field name="cpp_std" type="string" descr="C++ standard version to use. Can be a specific version (such as &quot;gnu++11&quot;), &quot;experimental&quot; (which will use draft versions like C++1z when available), or the empty string (which will use the default)."/>
        <field name="cppflags" type="string[]" descr="list of module-specific flags that will be used for C++ compiles"/>
        <object-field name="debug" descr="release">
            <field name="cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles in debug or release builds"/>
        </object-field>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="double_loadable" type="bool" descr="whether this module is capable of being loaded with other instance (possibly an older version) of the same module in the same process. Currently, a shared library that is a member of VNDK (vndk: {enabled: true}) can be double loaded in a vendor process if the library is also a (direct and indirect) dependency of an LLNDK library. Such libraries must be explicitly marked as `double_loadable: true` by the owner, or the dependency from the LLNDK lib should be cut if the lib is not designed to be double loaded."/>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the C/C++ module. This is most useful in the arch/multilib variants to remove non-common files"/>
        <field name="export_generated_headers" type="blueprint[]" descr="list of generated headers to re-export include directories from. Entries must be present in generated_headers."/>
        <field name="export_header_lib_headers" type="blueprint[]" descr="list of header libraries to re-export include directories from. Entries must be present in header_libs."/>
        <field name="export_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the include path (using -I) for this module and any module that links against this module.  Directories listed in export_include_dirs do not need to be listed in local_include_dirs."/>
        <field name="export_shared_lib_headers" type="blueprint[]" descr="list of shared libraries to re-export include directories from. Entries must be present in shared_libs."/>
        <field name="export_static_lib_headers" type="blueprint[]" descr="list of static libraries to re-export include directories from. Entries must be present in static_libs."/>
        <field name="force_symbols_not_weak_list" type="string" descr="local file name to pass to the linker as -force_symbols_not_weak_list"/>
        <field name="force_symbols_weak_list" type="string" descr="local file name to pass to the linker as -force_symbols_weak_list"/>
        <field name="generated_headers" type="blueprint[]" descr="list of generated headers to add to the include path. These are the names of genrule modules."/>
        <field name="generated_sources" type="blueprint[]" descr="list of generated sources to compile. These are the names of gensrcs or genrule modules."/>
        <field name="gnu_extensions" type="bool" descr="if set to false, use -std=c++* instead of -std=gnu++*"/>
        <field name="group_static_libs" type="bool" descr="group static libraries.  This can resolve missing symbols issues with interdependencies between static libraries, but it is generally better to order them correctly instead."/>
        <field name="gtest" type="bool" descr="if set, build against the gtest library. Defaults to true."/>
        <object-field name="header_abi_checker">
            <field name="symbol_file" type="string" descr="Path to a symbol file that specifies the symbols to be included in the generated ABI dump file"/>
            <field name="exclude_symbol_versions" type="string[]" descr="Symbol versions that should be ignored from the symbol file"/>
            <field name="exclude_symbol_tags" type="string[]" descr="Symbol tags that should be ignored from the symbol file"/>
        </object-field>
        <field name="header_libs" type="blueprint[]" descr="list of modules that should only provide headers for this module."/>
        <field name="host_ldlibs" type="string[]" descr="-l arguments to pass to linker for host-provided shared libraries"/>
        <field name="include_build_directory" type="bool" descr="Add the directory containing the Android.bp file to the list of include directories. Defaults to true."/>
        <field name="include_dirs" type="string[]" descr="list of directories relative to the root of the source tree that will be added to the include path using -I. If possible, don't use this.  If adding paths from the current directory use local_include_dirs, if adding paths from other modules use export_include_dirs in that module."/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="instruction_set" type="string" descr="the instruction set architecture to use to compile the C/C++ module."/>
        <field name="isolated" type="bool" descr="if set, use the isolated gtest runner. Defaults to false."/>
        <field name="ldflags" type="string[]" descr="list of module-specific flags that will be used for all link steps"/>
        <field name="local_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the include path using -I"/>
        <field name="logtags" type="string[]" descr="*.logtags files, to combine together in order to generate the /system/etc/event-log-tags file"/>
        <object-field name="lto">
            <field name="never" type="bool"/>
            <field name="full" type="bool"/>
            <field name="thin" type="bool"/>
        </object-field>
        <field name="native_coverage" type="bool"/>
        <field name="no_libcrt" type="bool" descr="don't link in libclang_rt.builtins-*.a"/>
        <field name="no_libgcc" type="bool" descr="don't link in libgcc.a"/>
        <field name="nocrt" type="bool" descr="don't link in crt_begin and crt_end.  This flag should only be necessary for compiling crt or libc."/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="openmp" type="bool" descr="Build and link with OpenMP"/>
        <field name="overrides" type="blueprint[]" descr="Names of modules to be overridden. Listed modules can only be other shared libraries (in Make or Soong). This does not completely prevent installation of the overridden libraries, but if both binaries would be installed by default (in PRODUCT_PACKAGES) the other library will be removed from PRODUCT_PACKAGES."/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="pack_relocations" type="bool" descr="Generate compact dynamic relocation table, default true."/>
        <object-field name="pgo">
            <field name="instrumentation" type="bool"/>
            <field name="sampling" type="bool"/>
            <field name="profile_file" type="string"/>
            <field name="benchmarks" type="string[]"/>
            <field name="enable_profile_use" type="bool"/>
            <field name="cflags" type="string[]" descr="Additional compiler flags to use when building this module for profiling (either instrumentation or sampling)."/>
        </object-field>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <object-field name="proto">
            <field name="static" type="bool" descr="Link statically against the protobuf runtime"/>
            <field name="type" type="string" descr="Proto generator type.  C++: full or lite.  Java: micro, nano, stream, or lite."/>
            <field name="plugin" type="string" descr="Proto plugin to use as the generator.  Must be a cc_binary_host module."/>
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the protoc include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the bp file that will be added to the protoc include paths."/>
            <field name="canonical_path_from_root" type="bool" descr="whether to identify the proto files from the root of the source tree (the original method in Android, useful for android-specific protos), or relative from where they were specified (useful for external/third party protos). This defaults to true today, but is expected to default to false in the future."/>
            <field name="export_proto_headers" type="bool" descr="export headers generated from .proto sources"/>
        </object-field>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="recovery_available" type="bool" descr="Make this module available when building for recovery"/>
        <field name="reexportedIncludeFlags" type="string[]"/>
        <field name="relative_install_path" type="string" descr="install to a subdirectory of the default install path for the module"/>
        <object-field name="renderscript">
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the llvm-rs-cc include paths"/>
            <field name="flags" type="string[]" descr="list of flags that will be passed to llvm-rs-cc"/>
            <field name="target_api" type="string" descr="Renderscript API level to target"/>
        </object-field>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="rtti" type="bool" descr="pass -frtti instead of -fno-rtti"/>
        <field name="runtime_libs" type="blueprint[]" descr="list of modules that should be installed with this module.  This is similar to 'required' but '.vendor' suffix will be appended to the module names if the shared libraries have vendor variants and this module uses VNDK."/>
        <object-field name="sanitize">
            <field name="never" type="bool"/>
            <field name="address" type="bool" descr="main sanitizers"/>
            <field name="thread" type="bool"/>
            <field name="hwaddress" type="bool"/>
            <field name="undefined" type="bool" descr="local sanitizers"/>
            <field name="all_undefined" type="bool"/>
            <field name="misc_undefined" type="string[]"/>
            <field name="coverage" type="bool"/>
            <field name="safestack" type="bool"/>
            <field name="cfi" type="bool"/>
            <field name="integer_overflow" type="bool"/>
            <field name="scudo" type="bool"/>
            <field name="scs" type="bool"/>
            <object-field name="diag">
                <field name="undefined" type="bool"/>
                <field name="cfi" type="bool"/>
                <field name="integer_overflow" type="bool"/>
                <field name="misc_undefined" type="string[]"/>
                <field name="no_recover" type="string[]"/>
            </object-field>
            <field name="recover" type="string[]" descr="value to pass to -fsanitize-recover="/>
            <field name="blacklist" type="string" descr="value to pass to -fsanitize-blacklist"/>
        </object-field>
        <field name="sdclang" type="bool" descr="compile module with SDLLVM instead of AOSP LLVM"/>
        <field name="sdk_version" type="string" descr="Minimum sdk version supported when compiling against the ndk"/>
        <field name="shared" type="string[]"/>
        <field name="shared_libs" type="blueprint[]" descr="list of modules that should be dynamically linked into this module."/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="static" type="string[]"/>
        <field name="static_libs" type="blueprint[]" descr="list of modules that should be statically linked into this module."/>
        <field name="static_ndk_lib" type="bool"/>
        <field name="stem" type="string" descr="set the name of the output"/>
        <field name="stl" type="string" descr="Select the STL library to use.  Possible values are &quot;libc++&quot;, &quot;libc++_static&quot;, &quot;libstdc++&quot;, or &quot;none&quot;. Leave blank to select the default."/>
        <object-field name="strip">
            <field name="none" type="bool"/>
            <field name="all" type="bool"/>
            <field name="keep_symbols" type="bool"/>
            <field name="keep_symbols_list" type="string[]"/>
            <field name="use_gnu_strip" type="bool"/>
        </object-field>
        <object-field name="stubs">
            <field name="symbol_file" type="string" descr="Relative path to the symbol map. The symbol map provides the list of symbols that are exported for stubs variant of this library."/>
            <field name="versions" type="string[]" descr="List versions to generate stubs libs for."/>
        </object-field>
        <field name="symbol_ordering_file" type="string" descr="Local file name to pass to the linker as --symbol-ordering-file"/>
        <field name="system_shared_libs" type="blueprint[]" descr="list of system libraries that will be dynamically linked to shared library and executable modules.  If unset, generally defaults to libc, libm, and libdl.  Set to [] to prevent linking against the defaults."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
            <object-field name="recovery">
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="srcs" type="string[]" descr="list of source files that should only be used in the recovery variant of the C/C++ module."/>
                <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="cflags" type="string[]" descr="List of additional cflags that should be used to build the recovery variant of the C/C++ module."/>
            </object-field>
            <object-field name="vendor">
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_runtime_libs" type="blueprint[]" descr="list of runtime libs that should not be installed along with the vendor variant of the C/C++ module."/>
                <field name="version_script" type="string" descr="version script for this vendor variant"/>
                <field name="srcs" type="string[]" descr="list of source files that should only be used in the vendor variant of the C/C++ module."/>
                <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="cflags" type="string[]" descr="List of additional cflags that should be used to build the vendor variant of the C/C++ module."/>
                <field name="override_export_include_dirs" type="string[]" descr="list of exported include directories, like export_include_dirs, that will be applied to the vendor variant of this library. This will overwrite any other declarations."/>
            </object-field>
        </object-field>
        <field name="tidy" type="bool" descr="whether to run clang-tidy over C-like sources."/>
        <field name="tidy_checks" type="string[]" descr="Extra checks to enable or disable in clang-tidy"/>
        <field name="tidy_checks_as_errors" type="string[]" descr="Checks that should be treated as errors."/>
        <field name="tidy_flags" type="string[]" descr="Extra flags to pass to clang-tidy"/>
        <field name="unexported_symbols_list" type="string" descr="local file name to pass to the linker as -unexported_symbols_list"/>
        <field name="unique_host_soname" type="bool" descr="rename host libraries to prevent overlap with system installed libraries"/>
        <field name="use_clang_lld" type="bool" descr="Use clang lld instead of gnu ld."/>
        <field name="use_version_lib" type="bool" descr="make android::build:GetBuildNumber() available containing the build ID."/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vendor_available" type="bool" descr="whether this module should be allowed to be directly depended by other modules with `vendor: true`, `proprietary: true`, or `vendor_available:true`. If set to true, two variants will be built separately, one like normal, and the other limited to the set of libraries and headers that are exposed to /vendor modules. The vendor variant may be used with a different (newer) /system, so it shouldn't have any unversioned runtime dependencies, or make assumptions about the system that may not be true in the future. If set to false, this module becomes inaccessible from /vendor modules. Default value is true when vndk: {enabled: true} or vendor: true. Nothing happens if BOARD_VNDK_VERSION isn't set in the BoardConfig.mk"/>
        <field name="version_script" type="string" descr="local file name to pass to the linker as --version_script"/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
        <object-field name="vndk">
            <field name="enabled" type="bool" descr="declared as a VNDK or VNDK-SP module. The vendor variant will be installed in /system instead of /vendor partition. `vendor_vailable` must be explicitly set to either true or false together with `vndk: {enabled: true}`."/>
            <field name="support_system_process" type="bool" descr="declared as a VNDK-SP module, which is a subset of VNDK. `vndk: { enabled: true }` must set together. All these modules are allowed to link to VNDK-SP or LL-NDK modules only. Other dependency will cause link-type errors. If `support_system_process` is not set or set to false, the module is VNDK-core and can link to other VNDK-core, VNDK-SP or LL-NDK modules only."/>
            <field name="extends" type="string" descr="Extending another module"/>
        </object-field>
        <field name="whole_static_libs" type="blueprint[]" descr="list of modules whose object files should be linked into this module in their entirety.  For static library modules, all of the .o files from the intermediate directory of the dependency will be linked into this modules .a file.  For a shared library, the dependency's .a file will be linked into this module using -Wl,--whole-archive."/>
        <field name="xom" type="bool"/>
        <field name="yaccflags" type="string[]" descr="list of module-specific flags that will be used for .y and .yy compiles"/>
    </blueprint>
    <blueprint name="art_debug_defaults">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="list of source files used to compile the C/C++ module.  May be .c, .cpp, or .S files. srcs may reference the outputs of other modules that produce source files like genrule or filegroup using the syntax &quot;:module&quot;."/>
        <field name="host_supported" type="bool" descr="If set to true, build a variant of the module for the host.  Defaults to false."/>
        <field name="device_supported" type="bool" descr="If set to true, build a variant of the module for the device.  Defaults to true."/>
        <object-field name="aidl">
            <field name="export_aidl_headers" type="bool" descr="export headers generated from .aidl sources"/>
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the aidl include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the aidl include paths."/>
            <field name="generate_traces" type="bool" descr="whether to generate traces (for systrace) for this interface"/>
        </object-field>
        <field name="allow_undefined_symbols" type="bool" descr="allow the module to contain undefined symbols.  By default, modules cannot contain undefined symbols that are not satisified by their immediate dependencies.  Set this flag to true to remove --no-undefined from the linker flags. This flag should only be necessary for compiling low-level libraries like libc."/>
        <field name="asflags" type="string[]" descr="list of module-specific flags that will be used for .S compiles"/>
        <field name="bootstrap" type="bool" descr="Allows this module to use non-APEX version of libraries. Useful for building binaries that are started before APEXes are activated."/>
        <field name="c_std" type="string" descr="C standard version to use. Can be a specific version (such as &quot;gnu11&quot;), &quot;experimental&quot; (which will use draft versions like C1x when available), or the empty string (which will use the default)."/>
        <field name="cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles."/>
        <field name="clang" type="bool" descr="Deprecated. true is the default, false is invalid."/>
        <field name="clang_asflags" type="string[]" descr="list of module-specific flags that will be used for .S compiles when compiling with clang"/>
        <field name="clang_cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles when compiling with clang"/>
        <object-field name="codegen">
            <field name="arm" type="string[]"/>
            <field name="arm64" type="string[]"/>
            <field name="mips" type="string[]"/>
            <field name="mips64" type="string[]"/>
            <field name="x86" type="string[]"/>
            <field name="x86_64" type="string[]"/>
        </object-field>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="conlyflags" type="string[]" descr="list of module-specific flags that will be used for C compiles"/>
        <field name="cpp_std" type="string" descr="C++ standard version to use. Can be a specific version (such as &quot;gnu++11&quot;), &quot;experimental&quot; (which will use draft versions like C++1z when available), or the empty string (which will use the default)."/>
        <field name="cppflags" type="string[]" descr="list of module-specific flags that will be used for C++ compiles"/>
        <field name="data" type="string[]" descr="list of files or filegroup modules that provide data that should be installed alongside the test"/>
        <object-field name="debug" descr="release">
            <field name="cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles in debug or release builds"/>
        </object-field>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="double_loadable" type="bool" descr="whether this module is capable of being loaded with other instance (possibly an older version) of the same module in the same process. Currently, a shared library that is a member of VNDK (vndk: {enabled: true}) can be double loaded in a vendor process if the library is also a (direct and indirect) dependency of an LLNDK library. Such libraries must be explicitly marked as `double_loadable: true` by the owner, or the dependency from the LLNDK lib should be cut if the lib is not designed to be double loaded."/>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the C/C++ module. This is most useful in the arch/multilib variants to remove non-common files"/>
        <field name="export_generated_headers" type="blueprint[]" descr="list of generated headers to re-export include directories from. Entries must be present in generated_headers."/>
        <field name="export_header_lib_headers" type="blueprint[]" descr="list of header libraries to re-export include directories from. Entries must be present in header_libs."/>
        <field name="export_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the include path (using -I) for this module and any module that links against this module.  Directories listed in export_include_dirs do not need to be listed in local_include_dirs."/>
        <field name="export_shared_lib_headers" type="blueprint[]" descr="list of shared libraries to re-export include directories from. Entries must be present in shared_libs."/>
        <field name="export_static_lib_headers" type="blueprint[]" descr="list of static libraries to re-export include directories from. Entries must be present in static_libs."/>
        <field name="force_symbols_not_weak_list" type="string" descr="local file name to pass to the linker as -force_symbols_not_weak_list"/>
        <field name="force_symbols_weak_list" type="string" descr="local file name to pass to the linker as -force_symbols_weak_list"/>
        <field name="generated_headers" type="blueprint[]" descr="list of generated headers to add to the include path. These are the names of genrule modules."/>
        <field name="generated_sources" type="blueprint[]" descr="list of generated sources to compile. These are the names of gensrcs or genrule modules."/>
        <field name="gnu_extensions" type="bool" descr="if set to false, use -std=c++* instead of -std=gnu++*"/>
        <field name="group_static_libs" type="bool" descr="group static libraries.  This can resolve missing symbols issues with interdependencies between static libraries, but it is generally better to order them correctly instead."/>
        <field name="gtest" type="bool" descr="if set, build against the gtest library. Defaults to true."/>
        <object-field name="header_abi_checker">
            <field name="symbol_file" type="string" descr="Path to a symbol file that specifies the symbols to be included in the generated ABI dump file"/>
            <field name="exclude_symbol_versions" type="string[]" descr="Symbol versions that should be ignored from the symbol file"/>
            <field name="exclude_symbol_tags" type="string[]" descr="Symbol tags that should be ignored from the symbol file"/>
        </object-field>
        <field name="header_libs" type="blueprint[]" descr="list of modules that should only provide headers for this module."/>
        <field name="host_ldlibs" type="string[]" descr="-l arguments to pass to linker for host-provided shared libraries"/>
        <field name="include_build_directory" type="bool" descr="Add the directory containing the Android.bp file to the list of include directories. Defaults to true."/>
        <field name="include_dirs" type="string[]" descr="list of directories relative to the root of the source tree that will be added to the include path using -I. If possible, don't use this.  If adding paths from the current directory use local_include_dirs, if adding paths from other modules use export_include_dirs in that module."/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="instruction_set" type="string" descr="the instruction set architecture to use to compile the C/C++ module."/>
        <field name="isolated" type="bool" descr="if set, use the isolated gtest runner. Defaults to false."/>
        <field name="ldflags" type="string[]" descr="list of module-specific flags that will be used for all link steps"/>
        <field name="local_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the include path using -I"/>
        <field name="logtags" type="string[]" descr="*.logtags files, to combine together in order to generate the /system/etc/event-log-tags file"/>
        <object-field name="lto">
            <field name="never" type="bool"/>
            <field name="full" type="bool"/>
            <field name="thin" type="bool"/>
        </object-field>
        <field name="native_coverage" type="bool"/>
        <field name="no_libcrt" type="bool" descr="don't link in libclang_rt.builtins-*.a"/>
        <field name="no_libgcc" type="bool" descr="don't link in libgcc.a"/>
        <field name="no_named_install_directory" type="bool" descr="Disables the creation of a test-specific directory when used with relative_install_path. Useful if several tests need to be in the same directory, but test_per_src doesn't work."/>
        <field name="nocrt" type="bool" descr="don't link in crt_begin and crt_end.  This flag should only be necessary for compiling crt or libc."/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="openmp" type="bool" descr="Build and link with OpenMP"/>
        <field name="overrides" type="blueprint[]" descr="Names of modules to be overridden. Listed modules can only be other shared libraries (in Make or Soong). This does not completely prevent installation of the overridden libraries, but if both binaries would be installed by default (in PRODUCT_PACKAGES) the other library will be removed from PRODUCT_PACKAGES."/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="pack_relocations" type="bool" descr="Generate compact dynamic relocation table, default true."/>
        <object-field name="pgo">
            <field name="instrumentation" type="bool"/>
            <field name="sampling" type="bool"/>
            <field name="profile_file" type="string"/>
            <field name="benchmarks" type="string[]"/>
            <field name="enable_profile_use" type="bool"/>
            <field name="cflags" type="string[]" descr="Additional compiler flags to use when building this module for profiling (either instrumentation or sampling)."/>
        </object-field>
        <field name="prefix_symbols" type="string" descr="if set, add an extra objcopy --prefix-symbols= step"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <object-field name="proto">
            <field name="static" type="bool" descr="Link statically against the protobuf runtime"/>
            <field name="type" type="string" descr="Proto generator type.  C++: full or lite.  Java: micro, nano, stream, or lite."/>
            <field name="plugin" type="string" descr="Proto plugin to use as the generator.  Must be a cc_binary_host module."/>
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the protoc include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the bp file that will be added to the protoc include paths."/>
            <field name="canonical_path_from_root" type="bool" descr="whether to identify the proto files from the root of the source tree (the original method in Android, useful for android-specific protos), or relative from where they were specified (useful for external/third party protos). This defaults to true today, but is expected to default to false in the future."/>
            <field name="export_proto_headers" type="bool" descr="export headers generated from .proto sources"/>
        </object-field>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="recovery_available" type="bool" descr="Make this module available when building for recovery"/>
        <field name="reexportedIncludeFlags" type="string[]"/>
        <field name="relative_install_path" type="string" descr="install to a subdirectory of the default install path for the module"/>
        <object-field name="renderscript">
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the llvm-rs-cc include paths"/>
            <field name="flags" type="string[]" descr="list of flags that will be passed to llvm-rs-cc"/>
            <field name="target_api" type="string" descr="Renderscript API level to target"/>
        </object-field>
        <field name="require_root" type="bool" descr="Add RootTargetPreparer to auto generated test config. This guarantees the test to run with root permission."/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="rtti" type="bool" descr="pass -frtti instead of -fno-rtti"/>
        <field name="runtime_libs" type="blueprint[]" descr="list of modules that should be installed with this module.  This is similar to 'required' but '.vendor' suffix will be appended to the module names if the shared libraries have vendor variants and this module uses VNDK."/>
        <object-field name="sanitize">
            <field name="never" type="bool"/>
            <field name="address" type="bool" descr="main sanitizers"/>
            <field name="thread" type="bool"/>
            <field name="hwaddress" type="bool"/>
            <field name="undefined" type="bool" descr="local sanitizers"/>
            <field name="all_undefined" type="bool"/>
            <field name="misc_undefined" type="string[]"/>
            <field name="coverage" type="bool"/>
            <field name="safestack" type="bool"/>
            <field name="cfi" type="bool"/>
            <field name="integer_overflow" type="bool"/>
            <field name="scudo" type="bool"/>
            <field name="scs" type="bool"/>
            <object-field name="diag">
                <field name="undefined" type="bool"/>
                <field name="cfi" type="bool"/>
                <field name="integer_overflow" type="bool"/>
                <field name="misc_undefined" type="string[]"/>
                <field name="no_recover" type="string[]"/>
            </object-field>
            <field name="recover" type="string[]" descr="value to pass to -fsanitize-recover="/>
            <field name="blacklist" type="string" descr="value to pass to -fsanitize-blacklist"/>
        </object-field>
        <field name="sdclang" type="bool" descr="compile module with SDLLVM instead of AOSP LLVM"/>
        <field name="sdk_version" type="string" descr="Minimum sdk version supported when compiling against the ndk"/>
        <field name="shared" type="string[]"/>
        <field name="shared_libs" type="blueprint[]" descr="list of modules that should be dynamically linked into this module."/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="static" type="string[]"/>
        <field name="static_executable" type="bool" descr="compile executable with -static"/>
        <field name="static_libs" type="blueprint[]" descr="list of modules that should be statically linked into this module."/>
        <field name="static_ndk_lib" type="bool"/>
        <field name="stem" type="string" descr="set the name of the output"/>
        <field name="stl" type="string" descr="Select the STL library to use.  Possible values are &quot;libc++&quot;, &quot;libc++_static&quot;, &quot;libstdc++&quot;, or &quot;none&quot;. Leave blank to select the default."/>
        <object-field name="strip">
            <field name="none" type="bool"/>
            <field name="all" type="bool"/>
            <field name="keep_symbols" type="bool"/>
            <field name="keep_symbols_list" type="string[]"/>
            <field name="use_gnu_strip" type="bool"/>
        </object-field>
        <object-field name="stubs">
            <field name="symbol_file" type="string" descr="Relative path to the symbol map. The symbol map provides the list of symbols that are exported for stubs variant of this library."/>
            <field name="versions" type="string[]" descr="List versions to generate stubs libs for."/>
        </object-field>
        <field name="suffix" type="string" descr="append to the name of the output"/>
        <field name="symbol_ordering_file" type="string" descr="Local file name to pass to the linker as --symbol-ordering-file"/>
        <field name="symlink_preferred_arch" type="bool" descr="if set, install a symlink to the preferred architecture"/>
        <field name="symlinks" type="string[]" descr="install symlinks to the binary.  Symlink names will have the suffix and the binary extension (if any) appended"/>
        <field name="system_shared_libs" type="blueprint[]" descr="list of system libraries that will be dynamically linked to shared library and executable modules.  If unset, generally defaults to libc, libm, and libdl.  Set to [] to prevent linking against the defaults."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
            <object-field name="recovery">
                <field name="srcs" type="string[]" descr="list of source files that should only be used in the recovery variant of the C/C++ module."/>
                <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="cflags" type="string[]" descr="List of additional cflags that should be used to build the recovery variant of the C/C++ module."/>
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the recovery variant of the C/C++ module."/>
            </object-field>
            <object-field name="vendor">
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_runtime_libs" type="blueprint[]" descr="list of runtime libs that should not be installed along with the vendor variant of the C/C++ module."/>
                <field name="version_script" type="string" descr="version script for this vendor variant"/>
                <field name="override_export_include_dirs" type="string[]" descr="list of exported include directories, like export_include_dirs, that will be applied to the vendor variant of this library. This will overwrite any other declarations."/>
                <field name="srcs" type="string[]" descr="list of source files that should only be used in the vendor variant of the C/C++ module."/>
                <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="cflags" type="string[]" descr="List of additional cflags that should be used to build the vendor variant of the C/C++ module."/>
            </object-field>
        </object-field>
        <field name="test_config" type="string" descr="the name of the test configuration (for example &quot;AndroidTest.xml&quot;) that should be installed with the module."/>
        <field name="test_config_template" type="string" descr="the name of the test configuration template (for example &quot;AndroidTestTemplate.xml&quot;) that should be installed with the module."/>
        <field name="test_options" type="string[]" descr="Test options."/>
        <field name="test_per_src" type="bool" descr="Create a separate binary for each source file.  Useful when there is global state that can not be torn down and reset between each test suite."/>
        <field name="test_suites" type="string[]" descr="list of compatibility suites (for example &quot;cts&quot;, &quot;vts&quot;) that the module should be installed into."/>
        <field name="tidy" type="bool" descr="whether to run clang-tidy over C-like sources."/>
        <field name="tidy_checks" type="string[]" descr="Extra checks to enable or disable in clang-tidy"/>
        <field name="tidy_checks_as_errors" type="string[]" descr="Checks that should be treated as errors."/>
        <field name="tidy_flags" type="string[]" descr="Extra flags to pass to clang-tidy"/>
        <field name="unexported_symbols_list" type="string" descr="local file name to pass to the linker as -unexported_symbols_list"/>
        <field name="unique_host_soname" type="bool" descr="rename host libraries to prevent overlap with system installed libraries"/>
        <field name="use_clang_lld" type="bool" descr="Use clang lld instead of gnu ld."/>
        <field name="use_version_lib" type="bool" descr="make android::build:GetBuildNumber() available containing the build ID."/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vendor_available" type="bool" descr="whether this module should be allowed to be directly depended by other modules with `vendor: true`, `proprietary: true`, or `vendor_available:true`. If set to true, two variants will be built separately, one like normal, and the other limited to the set of libraries and headers that are exposed to /vendor modules. The vendor variant may be used with a different (newer) /system, so it shouldn't have any unversioned runtime dependencies, or make assumptions about the system that may not be true in the future. If set to false, this module becomes inaccessible from /vendor modules. Default value is true when vndk: {enabled: true} or vendor: true. Nothing happens if BOARD_VNDK_VERSION isn't set in the BoardConfig.mk"/>
        <field name="version_script" type="string" descr="local file name to pass to the linker as --version_script"/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
        <object-field name="vndk">
            <field name="enabled" type="bool" descr="declared as a VNDK or VNDK-SP module. The vendor variant will be installed in /system instead of /vendor partition. `vendor_vailable` must be explicitly set to either true or false together with `vndk: {enabled: true}`."/>
            <field name="support_system_process" type="bool" descr="declared as a VNDK-SP module, which is a subset of VNDK. `vndk: { enabled: true }` must set together. All these modules are allowed to link to VNDK-SP or LL-NDK modules only. Other dependency will cause link-type errors. If `support_system_process` is not set or set to false, the module is VNDK-core and can link to other VNDK-core, VNDK-SP or LL-NDK modules only."/>
            <field name="extends" type="string" descr="Extending another module"/>
        </object-field>
        <field name="whole_static_libs" type="blueprint[]" descr="list of modules whose object files should be linked into this module in their entirety.  For static library modules, all of the .o files from the intermediate directory of the dependency will be linked into this modules .a file.  For a shared library, the dependency's .a file will be linked into this module using -Wl,--whole-archive."/>
        <field name="xom" type="bool"/>
        <field name="yaccflags" type="string[]" descr="list of module-specific flags that will be used for .y and .yy compiles"/>
    </blueprint>
    <blueprint name="art_global_defaults">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="list of source files used to compile the C/C++ module.  May be .c, .cpp, or .S files. srcs may reference the outputs of other modules that produce source files like genrule or filegroup using the syntax &quot;:module&quot;."/>
        <field name="host_supported" type="bool" descr="If set to true, build a variant of the module for the host.  Defaults to false."/>
        <field name="device_supported" type="bool" descr="If set to true, build a variant of the module for the device.  Defaults to true."/>
        <object-field name="aidl">
            <field name="export_aidl_headers" type="bool" descr="export headers generated from .aidl sources"/>
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the aidl include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the aidl include paths."/>
            <field name="generate_traces" type="bool" descr="whether to generate traces (for systrace) for this interface"/>
        </object-field>
        <field name="allow_undefined_symbols" type="bool" descr="allow the module to contain undefined symbols.  By default, modules cannot contain undefined symbols that are not satisified by their immediate dependencies.  Set this flag to true to remove --no-undefined from the linker flags. This flag should only be necessary for compiling low-level libraries like libc."/>
        <field name="asflags" type="string[]" descr="list of module-specific flags that will be used for .S compiles"/>
        <field name="bootstrap" type="bool" descr="Allows this module to use non-APEX version of libraries. Useful for building binaries that are started before APEXes are activated."/>
        <field name="c_std" type="string" descr="C standard version to use. Can be a specific version (such as &quot;gnu11&quot;), &quot;experimental&quot; (which will use draft versions like C1x when available), or the empty string (which will use the default)."/>
        <field name="cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles."/>
        <field name="clang" type="bool" descr="Deprecated. true is the default, false is invalid."/>
        <field name="clang_asflags" type="string[]" descr="list of module-specific flags that will be used for .S compiles when compiling with clang"/>
        <field name="clang_cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles when compiling with clang"/>
        <object-field name="codegen">
            <field name="arm" type="string[]"/>
            <field name="arm64" type="string[]"/>
            <field name="mips" type="string[]"/>
            <field name="mips64" type="string[]"/>
            <field name="x86" type="string[]"/>
            <field name="x86_64" type="string[]"/>
        </object-field>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="conlyflags" type="string[]" descr="list of module-specific flags that will be used for C compiles"/>
        <field name="cpp_std" type="string" descr="C++ standard version to use. Can be a specific version (such as &quot;gnu++11&quot;), &quot;experimental&quot; (which will use draft versions like C++1z when available), or the empty string (which will use the default)."/>
        <field name="cppflags" type="string[]" descr="list of module-specific flags that will be used for C++ compiles"/>
        <field name="data" type="string[]" descr="list of files or filegroup modules that provide data that should be installed alongside the test"/>
        <object-field name="debug" descr="release">
            <field name="cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles in debug or release builds"/>
        </object-field>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="double_loadable" type="bool" descr="whether this module is capable of being loaded with other instance (possibly an older version) of the same module in the same process. Currently, a shared library that is a member of VNDK (vndk: {enabled: true}) can be double loaded in a vendor process if the library is also a (direct and indirect) dependency of an LLNDK library. Such libraries must be explicitly marked as `double_loadable: true` by the owner, or the dependency from the LLNDK lib should be cut if the lib is not designed to be double loaded."/>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the C/C++ module. This is most useful in the arch/multilib variants to remove non-common files"/>
        <field name="export_generated_headers" type="blueprint[]" descr="list of generated headers to re-export include directories from. Entries must be present in generated_headers."/>
        <field name="export_header_lib_headers" type="blueprint[]" descr="list of header libraries to re-export include directories from. Entries must be present in header_libs."/>
        <field name="export_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the include path (using -I) for this module and any module that links against this module.  Directories listed in export_include_dirs do not need to be listed in local_include_dirs."/>
        <field name="export_shared_lib_headers" type="blueprint[]" descr="list of shared libraries to re-export include directories from. Entries must be present in shared_libs."/>
        <field name="export_static_lib_headers" type="blueprint[]" descr="list of static libraries to re-export include directories from. Entries must be present in static_libs."/>
        <field name="force_symbols_not_weak_list" type="string" descr="local file name to pass to the linker as -force_symbols_not_weak_list"/>
        <field name="force_symbols_weak_list" type="string" descr="local file name to pass to the linker as -force_symbols_weak_list"/>
        <field name="generated_headers" type="blueprint[]" descr="list of generated headers to add to the include path. These are the names of genrule modules."/>
        <field name="generated_sources" type="blueprint[]" descr="list of generated sources to compile. These are the names of gensrcs or genrule modules."/>
        <field name="gnu_extensions" type="bool" descr="if set to false, use -std=c++* instead of -std=gnu++*"/>
        <field name="group_static_libs" type="bool" descr="group static libraries.  This can resolve missing symbols issues with interdependencies between static libraries, but it is generally better to order them correctly instead."/>
        <field name="gtest" type="bool" descr="if set, build against the gtest library. Defaults to true."/>
        <object-field name="header_abi_checker">
            <field name="symbol_file" type="string" descr="Path to a symbol file that specifies the symbols to be included in the generated ABI dump file"/>
            <field name="exclude_symbol_versions" type="string[]" descr="Symbol versions that should be ignored from the symbol file"/>
            <field name="exclude_symbol_tags" type="string[]" descr="Symbol tags that should be ignored from the symbol file"/>
        </object-field>
        <field name="header_libs" type="blueprint[]" descr="list of modules that should only provide headers for this module."/>
        <field name="host_ldlibs" type="string[]" descr="-l arguments to pass to linker for host-provided shared libraries"/>
        <field name="include_build_directory" type="bool" descr="Add the directory containing the Android.bp file to the list of include directories. Defaults to true."/>
        <field name="include_dirs" type="string[]" descr="list of directories relative to the root of the source tree that will be added to the include path using -I. If possible, don't use this.  If adding paths from the current directory use local_include_dirs, if adding paths from other modules use export_include_dirs in that module."/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="instruction_set" type="string" descr="the instruction set architecture to use to compile the C/C++ module."/>
        <field name="isolated" type="bool" descr="if set, use the isolated gtest runner. Defaults to false."/>
        <field name="ldflags" type="string[]" descr="list of module-specific flags that will be used for all link steps"/>
        <field name="local_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the include path using -I"/>
        <field name="logtags" type="string[]" descr="*.logtags files, to combine together in order to generate the /system/etc/event-log-tags file"/>
        <object-field name="lto">
            <field name="never" type="bool"/>
            <field name="full" type="bool"/>
            <field name="thin" type="bool"/>
        </object-field>
        <field name="native_coverage" type="bool"/>
        <field name="no_libcrt" type="bool" descr="don't link in libclang_rt.builtins-*.a"/>
        <field name="no_libgcc" type="bool" descr="don't link in libgcc.a"/>
        <field name="no_named_install_directory" type="bool" descr="Disables the creation of a test-specific directory when used with relative_install_path. Useful if several tests need to be in the same directory, but test_per_src doesn't work."/>
        <field name="nocrt" type="bool" descr="don't link in crt_begin and crt_end.  This flag should only be necessary for compiling crt or libc."/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="openmp" type="bool" descr="Build and link with OpenMP"/>
        <field name="overrides" type="blueprint[]" descr="Names of modules to be overridden. Listed modules can only be other shared libraries (in Make or Soong). This does not completely prevent installation of the overridden libraries, but if both binaries would be installed by default (in PRODUCT_PACKAGES) the other library will be removed from PRODUCT_PACKAGES."/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="pack_relocations" type="bool" descr="Generate compact dynamic relocation table, default true."/>
        <object-field name="pgo">
            <field name="instrumentation" type="bool"/>
            <field name="sampling" type="bool"/>
            <field name="profile_file" type="string"/>
            <field name="benchmarks" type="string[]"/>
            <field name="enable_profile_use" type="bool"/>
            <field name="cflags" type="string[]" descr="Additional compiler flags to use when building this module for profiling (either instrumentation or sampling)."/>
        </object-field>
        <field name="prefix_symbols" type="string" descr="if set, add an extra objcopy --prefix-symbols= step"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <object-field name="proto">
            <field name="static" type="bool" descr="Link statically against the protobuf runtime"/>
            <field name="type" type="string" descr="Proto generator type.  C++: full or lite.  Java: micro, nano, stream, or lite."/>
            <field name="plugin" type="string" descr="Proto plugin to use as the generator.  Must be a cc_binary_host module."/>
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the protoc include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the bp file that will be added to the protoc include paths."/>
            <field name="canonical_path_from_root" type="bool" descr="whether to identify the proto files from the root of the source tree (the original method in Android, useful for android-specific protos), or relative from where they were specified (useful for external/third party protos). This defaults to true today, but is expected to default to false in the future."/>
            <field name="export_proto_headers" type="bool" descr="export headers generated from .proto sources"/>
        </object-field>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="recovery_available" type="bool" descr="Make this module available when building for recovery"/>
        <field name="reexportedIncludeFlags" type="string[]"/>
        <field name="relative_install_path" type="string" descr="install to a subdirectory of the default install path for the module"/>
        <object-field name="renderscript">
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the llvm-rs-cc include paths"/>
            <field name="flags" type="string[]" descr="list of flags that will be passed to llvm-rs-cc"/>
            <field name="target_api" type="string" descr="Renderscript API level to target"/>
        </object-field>
        <field name="require_root" type="bool" descr="Add RootTargetPreparer to auto generated test config. This guarantees the test to run with root permission."/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="rtti" type="bool" descr="pass -frtti instead of -fno-rtti"/>
        <field name="runtime_libs" type="blueprint[]" descr="list of modules that should be installed with this module.  This is similar to 'required' but '.vendor' suffix will be appended to the module names if the shared libraries have vendor variants and this module uses VNDK."/>
        <object-field name="sanitize">
            <field name="never" type="bool"/>
            <field name="address" type="bool" descr="main sanitizers"/>
            <field name="thread" type="bool"/>
            <field name="hwaddress" type="bool"/>
            <field name="undefined" type="bool" descr="local sanitizers"/>
            <field name="all_undefined" type="bool"/>
            <field name="misc_undefined" type="string[]"/>
            <field name="coverage" type="bool"/>
            <field name="safestack" type="bool"/>
            <field name="cfi" type="bool"/>
            <field name="integer_overflow" type="bool"/>
            <field name="scudo" type="bool"/>
            <field name="scs" type="bool"/>
            <object-field name="diag">
                <field name="undefined" type="bool"/>
                <field name="cfi" type="bool"/>
                <field name="integer_overflow" type="bool"/>
                <field name="misc_undefined" type="string[]"/>
                <field name="no_recover" type="string[]"/>
            </object-field>
            <field name="recover" type="string[]" descr="value to pass to -fsanitize-recover="/>
            <field name="blacklist" type="string" descr="value to pass to -fsanitize-blacklist"/>
        </object-field>
        <field name="sdclang" type="bool" descr="compile module with SDLLVM instead of AOSP LLVM"/>
        <field name="sdk_version" type="string" descr="Minimum sdk version supported when compiling against the ndk"/>
        <field name="shared" type="string[]"/>
        <field name="shared_libs" type="blueprint[]" descr="list of modules that should be dynamically linked into this module."/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="static" type="string[]"/>
        <field name="static_executable" type="bool" descr="compile executable with -static"/>
        <field name="static_libs" type="blueprint[]" descr="list of modules that should be statically linked into this module."/>
        <field name="static_ndk_lib" type="bool"/>
        <field name="stem" type="string" descr="set the name of the output"/>
        <field name="stl" type="string" descr="Select the STL library to use.  Possible values are &quot;libc++&quot;, &quot;libc++_static&quot;, &quot;libstdc++&quot;, or &quot;none&quot;. Leave blank to select the default."/>
        <object-field name="strip">
            <field name="none" type="bool"/>
            <field name="all" type="bool"/>
            <field name="keep_symbols" type="bool"/>
            <field name="keep_symbols_list" type="string[]"/>
            <field name="use_gnu_strip" type="bool"/>
        </object-field>
        <object-field name="stubs">
            <field name="symbol_file" type="string" descr="Relative path to the symbol map. The symbol map provides the list of symbols that are exported for stubs variant of this library."/>
            <field name="versions" type="string[]" descr="List versions to generate stubs libs for."/>
        </object-field>
        <field name="suffix" type="string" descr="append to the name of the output"/>
        <field name="symbol_ordering_file" type="string" descr="Local file name to pass to the linker as --symbol-ordering-file"/>
        <field name="symlink_preferred_arch" type="bool" descr="if set, install a symlink to the preferred architecture"/>
        <field name="symlinks" type="string[]" descr="install symlinks to the binary.  Symlink names will have the suffix and the binary extension (if any) appended"/>
        <field name="system_shared_libs" type="blueprint[]" descr="list of system libraries that will be dynamically linked to shared library and executable modules.  If unset, generally defaults to libc, libm, and libdl.  Set to [] to prevent linking against the defaults."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
            <object-field name="recovery">
                <field name="srcs" type="string[]" descr="list of source files that should only be used in the recovery variant of the C/C++ module."/>
                <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="cflags" type="string[]" descr="List of additional cflags that should be used to build the recovery variant of the C/C++ module."/>
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the recovery variant of the C/C++ module."/>
            </object-field>
            <object-field name="vendor">
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_runtime_libs" type="blueprint[]" descr="list of runtime libs that should not be installed along with the vendor variant of the C/C++ module."/>
                <field name="version_script" type="string" descr="version script for this vendor variant"/>
                <field name="override_export_include_dirs" type="string[]" descr="list of exported include directories, like export_include_dirs, that will be applied to the vendor variant of this library. This will overwrite any other declarations."/>
                <field name="srcs" type="string[]" descr="list of source files that should only be used in the vendor variant of the C/C++ module."/>
                <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="cflags" type="string[]" descr="List of additional cflags that should be used to build the vendor variant of the C/C++ module."/>
            </object-field>
        </object-field>
        <field name="test_config" type="string" descr="the name of the test configuration (for example &quot;AndroidTest.xml&quot;) that should be installed with the module."/>
        <field name="test_config_template" type="string" descr="the name of the test configuration template (for example &quot;AndroidTestTemplate.xml&quot;) that should be installed with the module."/>
        <field name="test_options" type="string[]" descr="Test options."/>
        <field name="test_per_src" type="bool" descr="Create a separate binary for each source file.  Useful when there is global state that can not be torn down and reset between each test suite."/>
        <field name="test_suites" type="string[]" descr="list of compatibility suites (for example &quot;cts&quot;, &quot;vts&quot;) that the module should be installed into."/>
        <field name="tidy" type="bool" descr="whether to run clang-tidy over C-like sources."/>
        <field name="tidy_checks" type="string[]" descr="Extra checks to enable or disable in clang-tidy"/>
        <field name="tidy_checks_as_errors" type="string[]" descr="Checks that should be treated as errors."/>
        <field name="tidy_flags" type="string[]" descr="Extra flags to pass to clang-tidy"/>
        <field name="unexported_symbols_list" type="string" descr="local file name to pass to the linker as -unexported_symbols_list"/>
        <field name="unique_host_soname" type="bool" descr="rename host libraries to prevent overlap with system installed libraries"/>
        <field name="use_clang_lld" type="bool" descr="Use clang lld instead of gnu ld."/>
        <field name="use_version_lib" type="bool" descr="make android::build:GetBuildNumber() available containing the build ID."/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vendor_available" type="bool" descr="whether this module should be allowed to be directly depended by other modules with `vendor: true`, `proprietary: true`, or `vendor_available:true`. If set to true, two variants will be built separately, one like normal, and the other limited to the set of libraries and headers that are exposed to /vendor modules. The vendor variant may be used with a different (newer) /system, so it shouldn't have any unversioned runtime dependencies, or make assumptions about the system that may not be true in the future. If set to false, this module becomes inaccessible from /vendor modules. Default value is true when vndk: {enabled: true} or vendor: true. Nothing happens if BOARD_VNDK_VERSION isn't set in the BoardConfig.mk"/>
        <field name="version_script" type="string" descr="local file name to pass to the linker as --version_script"/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
        <object-field name="vndk">
            <field name="enabled" type="bool" descr="declared as a VNDK or VNDK-SP module. The vendor variant will be installed in /system instead of /vendor partition. `vendor_vailable` must be explicitly set to either true or false together with `vndk: {enabled: true}`."/>
            <field name="support_system_process" type="bool" descr="declared as a VNDK-SP module, which is a subset of VNDK. `vndk: { enabled: true }` must set together. All these modules are allowed to link to VNDK-SP or LL-NDK modules only. Other dependency will cause link-type errors. If `support_system_process` is not set or set to false, the module is VNDK-core and can link to other VNDK-core, VNDK-SP or LL-NDK modules only."/>
            <field name="extends" type="string" descr="Extending another module"/>
        </object-field>
        <field name="whole_static_libs" type="blueprint[]" descr="list of modules whose object files should be linked into this module in their entirety.  For static library modules, all of the .o files from the intermediate directory of the dependency will be linked into this modules .a file.  For a shared library, the dependency's .a file will be linked into this module using -Wl,--whole-archive."/>
        <field name="xom" type="bool"/>
        <field name="yaccflags" type="string[]" descr="list of module-specific flags that will be used for .y and .yy compiles"/>
    </blueprint>
    <blueprint name="libart_cc_defaults">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="list of source files used to compile the C/C++ module.  May be .c, .cpp, or .S files. srcs may reference the outputs of other modules that produce source files like genrule or filegroup using the syntax &quot;:module&quot;."/>
        <field name="host_supported" type="bool" descr="If set to true, build a variant of the module for the host.  Defaults to false."/>
        <field name="device_supported" type="bool" descr="If set to true, build a variant of the module for the device.  Defaults to true."/>
        <object-field name="aidl">
            <field name="export_aidl_headers" type="bool" descr="export headers generated from .aidl sources"/>
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the aidl include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the aidl include paths."/>
            <field name="generate_traces" type="bool" descr="whether to generate traces (for systrace) for this interface"/>
        </object-field>
        <field name="allow_undefined_symbols" type="bool" descr="allow the module to contain undefined symbols.  By default, modules cannot contain undefined symbols that are not satisified by their immediate dependencies.  Set this flag to true to remove --no-undefined from the linker flags. This flag should only be necessary for compiling low-level libraries like libc."/>
        <field name="asflags" type="string[]" descr="list of module-specific flags that will be used for .S compiles"/>
        <field name="bootstrap" type="bool" descr="Allows this module to use non-APEX version of libraries. Useful for building binaries that are started before APEXes are activated."/>
        <field name="c_std" type="string" descr="C standard version to use. Can be a specific version (such as &quot;gnu11&quot;), &quot;experimental&quot; (which will use draft versions like C1x when available), or the empty string (which will use the default)."/>
        <field name="cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles."/>
        <field name="clang" type="bool" descr="Deprecated. true is the default, false is invalid."/>
        <field name="clang_asflags" type="string[]" descr="list of module-specific flags that will be used for .S compiles when compiling with clang"/>
        <field name="clang_cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles when compiling with clang"/>
        <object-field name="codegen">
            <field name="arm" type="string[]"/>
            <field name="arm64" type="string[]"/>
            <field name="mips" type="string[]"/>
            <field name="mips64" type="string[]"/>
            <field name="x86" type="string[]"/>
            <field name="x86_64" type="string[]"/>
        </object-field>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="conlyflags" type="string[]" descr="list of module-specific flags that will be used for C compiles"/>
        <field name="cpp_std" type="string" descr="C++ standard version to use. Can be a specific version (such as &quot;gnu++11&quot;), &quot;experimental&quot; (which will use draft versions like C++1z when available), or the empty string (which will use the default)."/>
        <field name="cppflags" type="string[]" descr="list of module-specific flags that will be used for C++ compiles"/>
        <field name="data" type="string[]" descr="list of files or filegroup modules that provide data that should be installed alongside the test"/>
        <object-field name="debug" descr="release">
            <field name="cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles in debug or release builds"/>
        </object-field>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="double_loadable" type="bool" descr="whether this module is capable of being loaded with other instance (possibly an older version) of the same module in the same process. Currently, a shared library that is a member of VNDK (vndk: {enabled: true}) can be double loaded in a vendor process if the library is also a (direct and indirect) dependency of an LLNDK library. Such libraries must be explicitly marked as `double_loadable: true` by the owner, or the dependency from the LLNDK lib should be cut if the lib is not designed to be double loaded."/>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the C/C++ module. This is most useful in the arch/multilib variants to remove non-common files"/>
        <field name="export_generated_headers" type="blueprint[]" descr="list of generated headers to re-export include directories from. Entries must be present in generated_headers."/>
        <field name="export_header_lib_headers" type="blueprint[]" descr="list of header libraries to re-export include directories from. Entries must be present in header_libs."/>
        <field name="export_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the include path (using -I) for this module and any module that links against this module.  Directories listed in export_include_dirs do not need to be listed in local_include_dirs."/>
        <field name="export_shared_lib_headers" type="blueprint[]" descr="list of shared libraries to re-export include directories from. Entries must be present in shared_libs."/>
        <field name="export_static_lib_headers" type="blueprint[]" descr="list of static libraries to re-export include directories from. Entries must be present in static_libs."/>
        <field name="force_symbols_not_weak_list" type="string" descr="local file name to pass to the linker as -force_symbols_not_weak_list"/>
        <field name="force_symbols_weak_list" type="string" descr="local file name to pass to the linker as -force_symbols_weak_list"/>
        <field name="generated_headers" type="blueprint[]" descr="list of generated headers to add to the include path. These are the names of genrule modules."/>
        <field name="generated_sources" type="blueprint[]" descr="list of generated sources to compile. These are the names of gensrcs or genrule modules."/>
        <field name="gnu_extensions" type="bool" descr="if set to false, use -std=c++* instead of -std=gnu++*"/>
        <field name="group_static_libs" type="bool" descr="group static libraries.  This can resolve missing symbols issues with interdependencies between static libraries, but it is generally better to order them correctly instead."/>
        <field name="gtest" type="bool" descr="if set, build against the gtest library. Defaults to true."/>
        <object-field name="header_abi_checker">
            <field name="symbol_file" type="string" descr="Path to a symbol file that specifies the symbols to be included in the generated ABI dump file"/>
            <field name="exclude_symbol_versions" type="string[]" descr="Symbol versions that should be ignored from the symbol file"/>
            <field name="exclude_symbol_tags" type="string[]" descr="Symbol tags that should be ignored from the symbol file"/>
        </object-field>
        <field name="header_libs" type="blueprint[]" descr="list of modules that should only provide headers for this module."/>
        <field name="host_ldlibs" type="string[]" descr="-l arguments to pass to linker for host-provided shared libraries"/>
        <field name="include_build_directory" type="bool" descr="Add the directory containing the Android.bp file to the list of include directories. Defaults to true."/>
        <field name="include_dirs" type="string[]" descr="list of directories relative to the root of the source tree that will be added to the include path using -I. If possible, don't use this.  If adding paths from the current directory use local_include_dirs, if adding paths from other modules use export_include_dirs in that module."/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="instruction_set" type="string" descr="the instruction set architecture to use to compile the C/C++ module."/>
        <field name="isolated" type="bool" descr="if set, use the isolated gtest runner. Defaults to false."/>
        <field name="ldflags" type="string[]" descr="list of module-specific flags that will be used for all link steps"/>
        <field name="local_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the include path using -I"/>
        <field name="logtags" type="string[]" descr="*.logtags files, to combine together in order to generate the /system/etc/event-log-tags file"/>
        <object-field name="lto">
            <field name="never" type="bool"/>
            <field name="full" type="bool"/>
            <field name="thin" type="bool"/>
        </object-field>
        <field name="native_coverage" type="bool"/>
        <field name="no_libcrt" type="bool" descr="don't link in libclang_rt.builtins-*.a"/>
        <field name="no_libgcc" type="bool" descr="don't link in libgcc.a"/>
        <field name="no_named_install_directory" type="bool" descr="Disables the creation of a test-specific directory when used with relative_install_path. Useful if several tests need to be in the same directory, but test_per_src doesn't work."/>
        <field name="nocrt" type="bool" descr="don't link in crt_begin and crt_end.  This flag should only be necessary for compiling crt or libc."/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="openmp" type="bool" descr="Build and link with OpenMP"/>
        <field name="overrides" type="blueprint[]" descr="Names of modules to be overridden. Listed modules can only be other shared libraries (in Make or Soong). This does not completely prevent installation of the overridden libraries, but if both binaries would be installed by default (in PRODUCT_PACKAGES) the other library will be removed from PRODUCT_PACKAGES."/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="pack_relocations" type="bool" descr="Generate compact dynamic relocation table, default true."/>
        <object-field name="pgo">
            <field name="instrumentation" type="bool"/>
            <field name="sampling" type="bool"/>
            <field name="profile_file" type="string"/>
            <field name="benchmarks" type="string[]"/>
            <field name="enable_profile_use" type="bool"/>
            <field name="cflags" type="string[]" descr="Additional compiler flags to use when building this module for profiling (either instrumentation or sampling)."/>
        </object-field>
        <field name="prefix_symbols" type="string" descr="if set, add an extra objcopy --prefix-symbols= step"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <object-field name="proto">
            <field name="static" type="bool" descr="Link statically against the protobuf runtime"/>
            <field name="type" type="string" descr="Proto generator type.  C++: full or lite.  Java: micro, nano, stream, or lite."/>
            <field name="plugin" type="string" descr="Proto plugin to use as the generator.  Must be a cc_binary_host module."/>
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the protoc include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the bp file that will be added to the protoc include paths."/>
            <field name="canonical_path_from_root" type="bool" descr="whether to identify the proto files from the root of the source tree (the original method in Android, useful for android-specific protos), or relative from where they were specified (useful for external/third party protos). This defaults to true today, but is expected to default to false in the future."/>
            <field name="export_proto_headers" type="bool" descr="export headers generated from .proto sources"/>
        </object-field>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="recovery_available" type="bool" descr="Make this module available when building for recovery"/>
        <field name="reexportedIncludeFlags" type="string[]"/>
        <field name="relative_install_path" type="string" descr="install to a subdirectory of the default install path for the module"/>
        <object-field name="renderscript">
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the llvm-rs-cc include paths"/>
            <field name="flags" type="string[]" descr="list of flags that will be passed to llvm-rs-cc"/>
            <field name="target_api" type="string" descr="Renderscript API level to target"/>
        </object-field>
        <field name="require_root" type="bool" descr="Add RootTargetPreparer to auto generated test config. This guarantees the test to run with root permission."/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="rtti" type="bool" descr="pass -frtti instead of -fno-rtti"/>
        <field name="runtime_libs" type="blueprint[]" descr="list of modules that should be installed with this module.  This is similar to 'required' but '.vendor' suffix will be appended to the module names if the shared libraries have vendor variants and this module uses VNDK."/>
        <object-field name="sanitize">
            <field name="never" type="bool"/>
            <field name="address" type="bool" descr="main sanitizers"/>
            <field name="thread" type="bool"/>
            <field name="hwaddress" type="bool"/>
            <field name="undefined" type="bool" descr="local sanitizers"/>
            <field name="all_undefined" type="bool"/>
            <field name="misc_undefined" type="string[]"/>
            <field name="coverage" type="bool"/>
            <field name="safestack" type="bool"/>
            <field name="cfi" type="bool"/>
            <field name="integer_overflow" type="bool"/>
            <field name="scudo" type="bool"/>
            <field name="scs" type="bool"/>
            <object-field name="diag">
                <field name="undefined" type="bool"/>
                <field name="cfi" type="bool"/>
                <field name="integer_overflow" type="bool"/>
                <field name="misc_undefined" type="string[]"/>
                <field name="no_recover" type="string[]"/>
            </object-field>
            <field name="recover" type="string[]" descr="value to pass to -fsanitize-recover="/>
            <field name="blacklist" type="string" descr="value to pass to -fsanitize-blacklist"/>
        </object-field>
        <field name="sdclang" type="bool" descr="compile module with SDLLVM instead of AOSP LLVM"/>
        <field name="sdk_version" type="string" descr="Minimum sdk version supported when compiling against the ndk"/>
        <field name="shared" type="string[]"/>
        <field name="shared_libs" type="blueprint[]" descr="list of modules that should be dynamically linked into this module."/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="static" type="string[]"/>
        <field name="static_executable" type="bool" descr="compile executable with -static"/>
        <field name="static_libs" type="blueprint[]" descr="list of modules that should be statically linked into this module."/>
        <field name="static_ndk_lib" type="bool"/>
        <field name="stem" type="string" descr="set the name of the output"/>
        <field name="stl" type="string" descr="Select the STL library to use.  Possible values are &quot;libc++&quot;, &quot;libc++_static&quot;, &quot;libstdc++&quot;, or &quot;none&quot;. Leave blank to select the default."/>
        <object-field name="strip">
            <field name="none" type="bool"/>
            <field name="all" type="bool"/>
            <field name="keep_symbols" type="bool"/>
            <field name="keep_symbols_list" type="string[]"/>
            <field name="use_gnu_strip" type="bool"/>
        </object-field>
        <object-field name="stubs">
            <field name="symbol_file" type="string" descr="Relative path to the symbol map. The symbol map provides the list of symbols that are exported for stubs variant of this library."/>
            <field name="versions" type="string[]" descr="List versions to generate stubs libs for."/>
        </object-field>
        <field name="suffix" type="string" descr="append to the name of the output"/>
        <field name="symbol_ordering_file" type="string" descr="Local file name to pass to the linker as --symbol-ordering-file"/>
        <field name="symlink_preferred_arch" type="bool" descr="if set, install a symlink to the preferred architecture"/>
        <field name="symlinks" type="string[]" descr="install symlinks to the binary.  Symlink names will have the suffix and the binary extension (if any) appended"/>
        <field name="system_shared_libs" type="blueprint[]" descr="list of system libraries that will be dynamically linked to shared library and executable modules.  If unset, generally defaults to libc, libm, and libdl.  Set to [] to prevent linking against the defaults."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
            <object-field name="recovery">
                <field name="srcs" type="string[]" descr="list of source files that should only be used in the recovery variant of the C/C++ module."/>
                <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="cflags" type="string[]" descr="List of additional cflags that should be used to build the recovery variant of the C/C++ module."/>
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the recovery variant of the C/C++ module."/>
            </object-field>
            <object-field name="vendor">
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_runtime_libs" type="blueprint[]" descr="list of runtime libs that should not be installed along with the vendor variant of the C/C++ module."/>
                <field name="version_script" type="string" descr="version script for this vendor variant"/>
                <field name="override_export_include_dirs" type="string[]" descr="list of exported include directories, like export_include_dirs, that will be applied to the vendor variant of this library. This will overwrite any other declarations."/>
                <field name="srcs" type="string[]" descr="list of source files that should only be used in the vendor variant of the C/C++ module."/>
                <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="cflags" type="string[]" descr="List of additional cflags that should be used to build the vendor variant of the C/C++ module."/>
            </object-field>
        </object-field>
        <field name="test_config" type="string" descr="the name of the test configuration (for example &quot;AndroidTest.xml&quot;) that should be installed with the module."/>
        <field name="test_config_template" type="string" descr="the name of the test configuration template (for example &quot;AndroidTestTemplate.xml&quot;) that should be installed with the module."/>
        <field name="test_options" type="string[]" descr="Test options."/>
        <field name="test_per_src" type="bool" descr="Create a separate binary for each source file.  Useful when there is global state that can not be torn down and reset between each test suite."/>
        <field name="test_suites" type="string[]" descr="list of compatibility suites (for example &quot;cts&quot;, &quot;vts&quot;) that the module should be installed into."/>
        <field name="tidy" type="bool" descr="whether to run clang-tidy over C-like sources."/>
        <field name="tidy_checks" type="string[]" descr="Extra checks to enable or disable in clang-tidy"/>
        <field name="tidy_checks_as_errors" type="string[]" descr="Checks that should be treated as errors."/>
        <field name="tidy_flags" type="string[]" descr="Extra flags to pass to clang-tidy"/>
        <field name="unexported_symbols_list" type="string" descr="local file name to pass to the linker as -unexported_symbols_list"/>
        <field name="unique_host_soname" type="bool" descr="rename host libraries to prevent overlap with system installed libraries"/>
        <field name="use_clang_lld" type="bool" descr="Use clang lld instead of gnu ld."/>
        <field name="use_version_lib" type="bool" descr="make android::build:GetBuildNumber() available containing the build ID."/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vendor_available" type="bool" descr="whether this module should be allowed to be directly depended by other modules with `vendor: true`, `proprietary: true`, or `vendor_available:true`. If set to true, two variants will be built separately, one like normal, and the other limited to the set of libraries and headers that are exposed to /vendor modules. The vendor variant may be used with a different (newer) /system, so it shouldn't have any unversioned runtime dependencies, or make assumptions about the system that may not be true in the future. If set to false, this module becomes inaccessible from /vendor modules. Default value is true when vndk: {enabled: true} or vendor: true. Nothing happens if BOARD_VNDK_VERSION isn't set in the BoardConfig.mk"/>
        <field name="version_script" type="string" descr="local file name to pass to the linker as --version_script"/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
        <object-field name="vndk">
            <field name="enabled" type="bool" descr="declared as a VNDK or VNDK-SP module. The vendor variant will be installed in /system instead of /vendor partition. `vendor_vailable` must be explicitly set to either true or false together with `vndk: {enabled: true}`."/>
            <field name="support_system_process" type="bool" descr="declared as a VNDK-SP module, which is a subset of VNDK. `vndk: { enabled: true }` must set together. All these modules are allowed to link to VNDK-SP or LL-NDK modules only. Other dependency will cause link-type errors. If `support_system_process` is not set or set to false, the module is VNDK-core and can link to other VNDK-core, VNDK-SP or LL-NDK modules only."/>
            <field name="extends" type="string" descr="Extending another module"/>
        </object-field>
        <field name="whole_static_libs" type="blueprint[]" descr="list of modules whose object files should be linked into this module in their entirety.  For static library modules, all of the .o files from the intermediate directory of the dependency will be linked into this modules .a file.  For a shared library, the dependency's .a file will be linked into this module using -Wl,--whole-archive."/>
        <field name="xom" type="bool"/>
        <field name="yaccflags" type="string[]" descr="list of module-specific flags that will be used for .y and .yy compiles"/>
    </blueprint>
    <blueprint name="libart_static_cc_defaults">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="list of source files used to compile the C/C++ module.  May be .c, .cpp, or .S files. srcs may reference the outputs of other modules that produce source files like genrule or filegroup using the syntax &quot;:module&quot;."/>
        <field name="host_supported" type="bool" descr="If set to true, build a variant of the module for the host.  Defaults to false."/>
        <field name="device_supported" type="bool" descr="If set to true, build a variant of the module for the device.  Defaults to true."/>
        <object-field name="aidl">
            <field name="export_aidl_headers" type="bool" descr="export headers generated from .aidl sources"/>
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the aidl include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the aidl include paths."/>
            <field name="generate_traces" type="bool" descr="whether to generate traces (for systrace) for this interface"/>
        </object-field>
        <field name="allow_undefined_symbols" type="bool" descr="allow the module to contain undefined symbols.  By default, modules cannot contain undefined symbols that are not satisified by their immediate dependencies.  Set this flag to true to remove --no-undefined from the linker flags. This flag should only be necessary for compiling low-level libraries like libc."/>
        <field name="asflags" type="string[]" descr="list of module-specific flags that will be used for .S compiles"/>
        <field name="bootstrap" type="bool" descr="Allows this module to use non-APEX version of libraries. Useful for building binaries that are started before APEXes are activated."/>
        <field name="c_std" type="string" descr="C standard version to use. Can be a specific version (such as &quot;gnu11&quot;), &quot;experimental&quot; (which will use draft versions like C1x when available), or the empty string (which will use the default)."/>
        <field name="cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles."/>
        <field name="clang" type="bool" descr="Deprecated. true is the default, false is invalid."/>
        <field name="clang_asflags" type="string[]" descr="list of module-specific flags that will be used for .S compiles when compiling with clang"/>
        <field name="clang_cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles when compiling with clang"/>
        <object-field name="codegen">
            <field name="arm" type="string[]"/>
            <field name="arm64" type="string[]"/>
            <field name="mips" type="string[]"/>
            <field name="mips64" type="string[]"/>
            <field name="x86" type="string[]"/>
            <field name="x86_64" type="string[]"/>
        </object-field>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="conlyflags" type="string[]" descr="list of module-specific flags that will be used for C compiles"/>
        <field name="cpp_std" type="string" descr="C++ standard version to use. Can be a specific version (such as &quot;gnu++11&quot;), &quot;experimental&quot; (which will use draft versions like C++1z when available), or the empty string (which will use the default)."/>
        <field name="cppflags" type="string[]" descr="list of module-specific flags that will be used for C++ compiles"/>
        <field name="data" type="string[]" descr="list of files or filegroup modules that provide data that should be installed alongside the test"/>
        <object-field name="debug" descr="release">
            <field name="cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles in debug or release builds"/>
        </object-field>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="double_loadable" type="bool" descr="whether this module is capable of being loaded with other instance (possibly an older version) of the same module in the same process. Currently, a shared library that is a member of VNDK (vndk: {enabled: true}) can be double loaded in a vendor process if the library is also a (direct and indirect) dependency of an LLNDK library. Such libraries must be explicitly marked as `double_loadable: true` by the owner, or the dependency from the LLNDK lib should be cut if the lib is not designed to be double loaded."/>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the C/C++ module. This is most useful in the arch/multilib variants to remove non-common files"/>
        <field name="export_generated_headers" type="blueprint[]" descr="list of generated headers to re-export include directories from. Entries must be present in generated_headers."/>
        <field name="export_header_lib_headers" type="blueprint[]" descr="list of header libraries to re-export include directories from. Entries must be present in header_libs."/>
        <field name="export_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the include path (using -I) for this module and any module that links against this module.  Directories listed in export_include_dirs do not need to be listed in local_include_dirs."/>
        <field name="export_shared_lib_headers" type="blueprint[]" descr="list of shared libraries to re-export include directories from. Entries must be present in shared_libs."/>
        <field name="export_static_lib_headers" type="blueprint[]" descr="list of static libraries to re-export include directories from. Entries must be present in static_libs."/>
        <field name="force_symbols_not_weak_list" type="string" descr="local file name to pass to the linker as -force_symbols_not_weak_list"/>
        <field name="force_symbols_weak_list" type="string" descr="local file name to pass to the linker as -force_symbols_weak_list"/>
        <field name="generated_headers" type="blueprint[]" descr="list of generated headers to add to the include path. These are the names of genrule modules."/>
        <field name="generated_sources" type="blueprint[]" descr="list of generated sources to compile. These are the names of gensrcs or genrule modules."/>
        <field name="gnu_extensions" type="bool" descr="if set to false, use -std=c++* instead of -std=gnu++*"/>
        <field name="group_static_libs" type="bool" descr="group static libraries.  This can resolve missing symbols issues with interdependencies between static libraries, but it is generally better to order them correctly instead."/>
        <field name="gtest" type="bool" descr="if set, build against the gtest library. Defaults to true."/>
        <object-field name="header_abi_checker">
            <field name="symbol_file" type="string" descr="Path to a symbol file that specifies the symbols to be included in the generated ABI dump file"/>
            <field name="exclude_symbol_versions" type="string[]" descr="Symbol versions that should be ignored from the symbol file"/>
            <field name="exclude_symbol_tags" type="string[]" descr="Symbol tags that should be ignored from the symbol file"/>
        </object-field>
        <field name="header_libs" type="blueprint[]" descr="list of modules that should only provide headers for this module."/>
        <field name="host_ldlibs" type="string[]" descr="-l arguments to pass to linker for host-provided shared libraries"/>
        <field name="include_build_directory" type="bool" descr="Add the directory containing the Android.bp file to the list of include directories. Defaults to true."/>
        <field name="include_dirs" type="string[]" descr="list of directories relative to the root of the source tree that will be added to the include path using -I. If possible, don't use this.  If adding paths from the current directory use local_include_dirs, if adding paths from other modules use export_include_dirs in that module."/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="instruction_set" type="string" descr="the instruction set architecture to use to compile the C/C++ module."/>
        <field name="isolated" type="bool" descr="if set, use the isolated gtest runner. Defaults to false."/>
        <field name="ldflags" type="string[]" descr="list of module-specific flags that will be used for all link steps"/>
        <field name="local_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the include path using -I"/>
        <field name="logtags" type="string[]" descr="*.logtags files, to combine together in order to generate the /system/etc/event-log-tags file"/>
        <object-field name="lto">
            <field name="never" type="bool"/>
            <field name="full" type="bool"/>
            <field name="thin" type="bool"/>
        </object-field>
        <field name="native_coverage" type="bool"/>
        <field name="no_libcrt" type="bool" descr="don't link in libclang_rt.builtins-*.a"/>
        <field name="no_libgcc" type="bool" descr="don't link in libgcc.a"/>
        <field name="no_named_install_directory" type="bool" descr="Disables the creation of a test-specific directory when used with relative_install_path. Useful if several tests need to be in the same directory, but test_per_src doesn't work."/>
        <field name="nocrt" type="bool" descr="don't link in crt_begin and crt_end.  This flag should only be necessary for compiling crt or libc."/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="openmp" type="bool" descr="Build and link with OpenMP"/>
        <field name="overrides" type="blueprint[]" descr="Names of modules to be overridden. Listed modules can only be other shared libraries (in Make or Soong). This does not completely prevent installation of the overridden libraries, but if both binaries would be installed by default (in PRODUCT_PACKAGES) the other library will be removed from PRODUCT_PACKAGES."/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="pack_relocations" type="bool" descr="Generate compact dynamic relocation table, default true."/>
        <object-field name="pgo">
            <field name="instrumentation" type="bool"/>
            <field name="sampling" type="bool"/>
            <field name="profile_file" type="string"/>
            <field name="benchmarks" type="string[]"/>
            <field name="enable_profile_use" type="bool"/>
            <field name="cflags" type="string[]" descr="Additional compiler flags to use when building this module for profiling (either instrumentation or sampling)."/>
        </object-field>
        <field name="prefix_symbols" type="string" descr="if set, add an extra objcopy --prefix-symbols= step"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <object-field name="proto">
            <field name="static" type="bool" descr="Link statically against the protobuf runtime"/>
            <field name="type" type="string" descr="Proto generator type.  C++: full or lite.  Java: micro, nano, stream, or lite."/>
            <field name="plugin" type="string" descr="Proto plugin to use as the generator.  Must be a cc_binary_host module."/>
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the protoc include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the bp file that will be added to the protoc include paths."/>
            <field name="canonical_path_from_root" type="bool" descr="whether to identify the proto files from the root of the source tree (the original method in Android, useful for android-specific protos), or relative from where they were specified (useful for external/third party protos). This defaults to true today, but is expected to default to false in the future."/>
            <field name="export_proto_headers" type="bool" descr="export headers generated from .proto sources"/>
        </object-field>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="recovery_available" type="bool" descr="Make this module available when building for recovery"/>
        <field name="reexportedIncludeFlags" type="string[]"/>
        <field name="relative_install_path" type="string" descr="install to a subdirectory of the default install path for the module"/>
        <object-field name="renderscript">
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the llvm-rs-cc include paths"/>
            <field name="flags" type="string[]" descr="list of flags that will be passed to llvm-rs-cc"/>
            <field name="target_api" type="string" descr="Renderscript API level to target"/>
        </object-field>
        <field name="require_root" type="bool" descr="Add RootTargetPreparer to auto generated test config. This guarantees the test to run with root permission."/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="rtti" type="bool" descr="pass -frtti instead of -fno-rtti"/>
        <field name="runtime_libs" type="blueprint[]" descr="list of modules that should be installed with this module.  This is similar to 'required' but '.vendor' suffix will be appended to the module names if the shared libraries have vendor variants and this module uses VNDK."/>
        <object-field name="sanitize">
            <field name="never" type="bool"/>
            <field name="address" type="bool" descr="main sanitizers"/>
            <field name="thread" type="bool"/>
            <field name="hwaddress" type="bool"/>
            <field name="undefined" type="bool" descr="local sanitizers"/>
            <field name="all_undefined" type="bool"/>
            <field name="misc_undefined" type="string[]"/>
            <field name="coverage" type="bool"/>
            <field name="safestack" type="bool"/>
            <field name="cfi" type="bool"/>
            <field name="integer_overflow" type="bool"/>
            <field name="scudo" type="bool"/>
            <field name="scs" type="bool"/>
            <object-field name="diag">
                <field name="undefined" type="bool"/>
                <field name="cfi" type="bool"/>
                <field name="integer_overflow" type="bool"/>
                <field name="misc_undefined" type="string[]"/>
                <field name="no_recover" type="string[]"/>
            </object-field>
            <field name="recover" type="string[]" descr="value to pass to -fsanitize-recover="/>
            <field name="blacklist" type="string" descr="value to pass to -fsanitize-blacklist"/>
        </object-field>
        <field name="sdclang" type="bool" descr="compile module with SDLLVM instead of AOSP LLVM"/>
        <field name="sdk_version" type="string" descr="Minimum sdk version supported when compiling against the ndk"/>
        <field name="shared" type="string[]"/>
        <field name="shared_libs" type="blueprint[]" descr="list of modules that should be dynamically linked into this module."/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="static" type="string[]"/>
        <field name="static_executable" type="bool" descr="compile executable with -static"/>
        <field name="static_libs" type="blueprint[]" descr="list of modules that should be statically linked into this module."/>
        <field name="static_ndk_lib" type="bool"/>
        <field name="stem" type="string" descr="set the name of the output"/>
        <field name="stl" type="string" descr="Select the STL library to use.  Possible values are &quot;libc++&quot;, &quot;libc++_static&quot;, &quot;libstdc++&quot;, or &quot;none&quot;. Leave blank to select the default."/>
        <object-field name="strip">
            <field name="none" type="bool"/>
            <field name="all" type="bool"/>
            <field name="keep_symbols" type="bool"/>
            <field name="keep_symbols_list" type="string[]"/>
            <field name="use_gnu_strip" type="bool"/>
        </object-field>
        <object-field name="stubs">
            <field name="symbol_file" type="string" descr="Relative path to the symbol map. The symbol map provides the list of symbols that are exported for stubs variant of this library."/>
            <field name="versions" type="string[]" descr="List versions to generate stubs libs for."/>
        </object-field>
        <field name="suffix" type="string" descr="append to the name of the output"/>
        <field name="symbol_ordering_file" type="string" descr="Local file name to pass to the linker as --symbol-ordering-file"/>
        <field name="symlink_preferred_arch" type="bool" descr="if set, install a symlink to the preferred architecture"/>
        <field name="symlinks" type="string[]" descr="install symlinks to the binary.  Symlink names will have the suffix and the binary extension (if any) appended"/>
        <field name="system_shared_libs" type="blueprint[]" descr="list of system libraries that will be dynamically linked to shared library and executable modules.  If unset, generally defaults to libc, libm, and libdl.  Set to [] to prevent linking against the defaults."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
            <object-field name="recovery">
                <field name="srcs" type="string[]" descr="list of source files that should only be used in the recovery variant of the C/C++ module."/>
                <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="cflags" type="string[]" descr="List of additional cflags that should be used to build the recovery variant of the C/C++ module."/>
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the recovery variant of the C/C++ module."/>
            </object-field>
            <object-field name="vendor">
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_runtime_libs" type="blueprint[]" descr="list of runtime libs that should not be installed along with the vendor variant of the C/C++ module."/>
                <field name="version_script" type="string" descr="version script for this vendor variant"/>
                <field name="override_export_include_dirs" type="string[]" descr="list of exported include directories, like export_include_dirs, that will be applied to the vendor variant of this library. This will overwrite any other declarations."/>
                <field name="srcs" type="string[]" descr="list of source files that should only be used in the vendor variant of the C/C++ module."/>
                <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="cflags" type="string[]" descr="List of additional cflags that should be used to build the vendor variant of the C/C++ module."/>
            </object-field>
        </object-field>
        <field name="test_config" type="string" descr="the name of the test configuration (for example &quot;AndroidTest.xml&quot;) that should be installed with the module."/>
        <field name="test_config_template" type="string" descr="the name of the test configuration template (for example &quot;AndroidTestTemplate.xml&quot;) that should be installed with the module."/>
        <field name="test_options" type="string[]" descr="Test options."/>
        <field name="test_per_src" type="bool" descr="Create a separate binary for each source file.  Useful when there is global state that can not be torn down and reset between each test suite."/>
        <field name="test_suites" type="string[]" descr="list of compatibility suites (for example &quot;cts&quot;, &quot;vts&quot;) that the module should be installed into."/>
        <field name="tidy" type="bool" descr="whether to run clang-tidy over C-like sources."/>
        <field name="tidy_checks" type="string[]" descr="Extra checks to enable or disable in clang-tidy"/>
        <field name="tidy_checks_as_errors" type="string[]" descr="Checks that should be treated as errors."/>
        <field name="tidy_flags" type="string[]" descr="Extra flags to pass to clang-tidy"/>
        <field name="unexported_symbols_list" type="string" descr="local file name to pass to the linker as -unexported_symbols_list"/>
        <field name="unique_host_soname" type="bool" descr="rename host libraries to prevent overlap with system installed libraries"/>
        <field name="use_clang_lld" type="bool" descr="Use clang lld instead of gnu ld."/>
        <field name="use_version_lib" type="bool" descr="make android::build:GetBuildNumber() available containing the build ID."/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vendor_available" type="bool" descr="whether this module should be allowed to be directly depended by other modules with `vendor: true`, `proprietary: true`, or `vendor_available:true`. If set to true, two variants will be built separately, one like normal, and the other limited to the set of libraries and headers that are exposed to /vendor modules. The vendor variant may be used with a different (newer) /system, so it shouldn't have any unversioned runtime dependencies, or make assumptions about the system that may not be true in the future. If set to false, this module becomes inaccessible from /vendor modules. Default value is true when vndk: {enabled: true} or vendor: true. Nothing happens if BOARD_VNDK_VERSION isn't set in the BoardConfig.mk"/>
        <field name="version_script" type="string" descr="local file name to pass to the linker as --version_script"/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
        <object-field name="vndk">
            <field name="enabled" type="bool" descr="declared as a VNDK or VNDK-SP module. The vendor variant will be installed in /system instead of /vendor partition. `vendor_vailable` must be explicitly set to either true or false together with `vndk: {enabled: true}`."/>
            <field name="support_system_process" type="bool" descr="declared as a VNDK-SP module, which is a subset of VNDK. `vndk: { enabled: true }` must set together. All these modules are allowed to link to VNDK-SP or LL-NDK modules only. Other dependency will cause link-type errors. If `support_system_process` is not set or set to false, the module is VNDK-core and can link to other VNDK-core, VNDK-SP or LL-NDK modules only."/>
            <field name="extends" type="string" descr="Extending another module"/>
        </object-field>
        <field name="whole_static_libs" type="blueprint[]" descr="list of modules whose object files should be linked into this module in their entirety.  For static library modules, all of the .o files from the intermediate directory of the dependency will be linked into this modules .a file.  For a shared library, the dependency's .a file will be linked into this module using -Wl,--whole-archive."/>
        <field name="xom" type="bool"/>
        <field name="yaccflags" type="string[]" descr="list of module-specific flags that will be used for .y and .yy compiles"/>
    </blueprint>
    <blueprint name="android_app">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="list of source files used to compile the Java module.  May be .java, .logtags, .proto, or .aidl files."/>
        <field name="aapt_include_all_resources" type="bool" descr="include all resource configurations, not just the product-configured ones."/>
        <field name="aaptflags" type="string[]" descr="flags passed to aapt when creating the apk"/>
        <field name="additional_certificates" type="string[]" descr="Names of extra android_app_certificate modules to sign the apk with in the form &quot;:module&quot;."/>
        <object-field name="aidl">
            <field name="include_dirs" type="string[]" descr="Top level directories to pass to aidl tool"/>
            <field name="local_include_dirs" type="string[]" descr="Directories rooted at the Android.bp file to pass to aidl tool"/>
            <field name="export_include_dirs" type="string[]" descr="directories that should be added as include directories for any aidl sources of modules that depend on this module, as well as to aidl for this module."/>
            <field name="generate_traces" type="bool" descr="whether to generate traces (for systrace) for this interface"/>
            <field name="generate_get_transaction_name" type="bool" descr="whether to generate Binder#GetTransaction name method."/>
        </object-field>
        <field name="asset_dirs" type="string[]" descr="list of directories relative to the Blueprints file containing assets. Defaults to [&quot;assets&quot;] if a directory called assets exists.  Set to [] to disable the default."/>
        <field name="certificate" type="string" descr="The name of a certificate in the default certificate directory, blank to use the default product certificate, or an android_app_certificate module name in the form &quot;:module&quot;."/>
        <field name="compile_dex" type="bool" descr="If set to true, compile dex regardless of installable.  Defaults to false."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dex_preopt">
            <field name="enabled" type="bool" descr="If false, prevent dexpreopting and stripping the dex file from the final jar.  Defaults to true."/>
            <field name="no_stripping" type="bool" descr="If true, never strip the dex files from the final jar when dexpreopting.  Defaults to false."/>
            <field name="app_image" type="bool" descr="If true, generate an app image (.art file) for this module."/>
            <field name="profile_guided" type="bool" descr="If true, use a checked-in profile to guide optimization.  Defaults to false unless a matching profile is set or a profile is found in PRODUCT_DEX_PREOPT_PROFILE_DIR that matches the name of this module, in which case it is defaulted to true."/>
            <field name="profile" type="string" descr="If set, provides the path to profile relative to the Android.bp file.  If not set, defaults to searching for a file that matches the name of this module in the default profile location set by PRODUCT_DEX_PREOPT_PROFILE_DIR, or empty if not found."/>
        </object-field>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="dxflags" type="string[]" descr="list of module-specific flags that will be used for dex compiles"/>
        <field name="embed_notices" type="bool" descr="If set, find and merge all NOTICE files that this module and its dependencies have and store it in the APK as an asset."/>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <object-field name="errorprone">
            <field name="javacflags" type="string[]" descr="List of javac flags that should only be used when running errorprone."/>
        </object-field>
        <field name="exclude_java_resource_dirs" type="string[]" descr="list of directories that should be excluded from java_resource_dirs"/>
        <field name="exclude_java_resources" type="string[]" descr="list of files that should be excluded from java_resources and java_resource_dirs"/>
        <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the Java module. This is most useful in the arch/multilib variants to remove non-common files"/>
        <field name="export_package_resources" type="bool" descr="If set, create package-export.apk, which other packages can use to get PRODUCT-agnostic resource data like IDs and type definitions."/>
        <field name="hostdex" type="bool" descr="If true, export a copy of the module as a -hostdex module for host testing."/>
        <field name="include_srcs" type="bool" descr="If set to true, include sources used to compile the module in to the final jar"/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="installable" type="bool" descr="If set to true, allow this module to be dexed and installed on devices.  Has no effect on host modules, which are always considered installable."/>
        <object-field name="jacoco">
            <field name="include_filter" type="string[]" descr="List of classes to include for instrumentation with jacoco to collect coverage information at runtime when building with coverage enabled.  If unset defaults to all classes. Supports '*' as the last character of an entry in the list as a wildcard match. If preceded by '.' it matches all classes in the package and subpackages, otherwise it matches classes in the package that have the class name as a prefix."/>
            <field name="exclude_filter" type="string[]" descr="List of classes to exclude from instrumentation with jacoco to collect coverage information at runtime when building with coverage enabled.  Overrides classes selected by the include_filter property. Supports '*' as the last character of an entry in the list as a wildcard match. If preceded by '.' it matches all classes in the package and subpackages, otherwise it matches classes in the package that have the class name as a prefix."/>
        </object-field>
        <field name="jarjar_rules" type="string" descr="if not blank, run jarjar using the specified rules file"/>
        <field name="java_resource_dirs" type="string[]" descr="list of directories containing Java resources"/>
        <field name="java_resources" type="string[]" descr="list of files to use as Java resources"/>
        <field name="java_version" type="string" descr="If not blank, set the java version passed to javac as -source and -target"/>
        <field name="javac_shard_size" type="number" descr="The number of Java source entries each Javac instance can process"/>
        <field name="javacflags" type="string[]" descr="list of module-specific flags that will be used for javac compiles"/>
        <field name="jni_libs" type="blueprint[]" descr="list of native libraries that will be provided in or alongside the resulting jar"/>
        <field name="kotlincflags" type="string[]" descr="list of module-specific flags that will be used for kotlinc compiles"/>
        <field name="libs" type="blueprint[]" descr="list of of java libraries that will be in the classpath"/>
        <field name="manifest" type="string" descr="path to AndroidManifest.xml.  If unset, defaults to &quot;AndroidManifest.xml&quot;."/>
        <field name="min_sdk_version" type="string" descr="if not blank, set the minimum version of the sdk that the compiled artifacts will run against. Defaults to sdk_version if not set."/>
        <field name="no_framework_libs" type="bool" descr="don't build against the framework libraries (ext, and framework for device targets)"/>
        <field name="no_standard_libs" type="bool" descr="don't build against the default libraries (bootclasspath, ext, and framework for device targets)"/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <object-field name="openjdk9">
            <field name="srcs" type="string[]" descr="List of source files that should only be used when passing -source 1.9"/>
            <field name="javacflags" type="string[]" descr="List of javac flags that should only be used when passing -source 1.9"/>
        </object-field>
        <object-field name="optimize">
            <field name="enabled" type="bool" descr="If false, disable all optimization.  Defaults to true for android_app and android_test modules, false for java_library and java_test modules."/>
            <field name="enabledByDefault" type="bool" descr="True if the module containing this has it set by default."/>
            <field name="shrink" type="bool" descr="If true, optimize for size by removing unused code.  Defaults to true for apps, false for libraries and tests."/>
            <field name="optimize" type="bool" descr="If true, optimize bytecode.  Defaults to false."/>
            <field name="obfuscate" type="bool" descr="If true, obfuscate bytecode.  Defaults to false."/>
            <field name="no_aapt_flags" type="bool" descr="If true, do not use the flag files generated by aapt that automatically keep classes referenced by the app manifest.  Defaults to false."/>
            <field name="proguard_flags" type="string[]" descr="Flags to pass to proguard."/>
            <field name="proguard_flags_files" type="string[]" descr="Specifies the locations of files containing proguard flags."/>
        </object-field>
        <field name="overrides" type="blueprint[]" descr="Names of modules to be overridden. Listed modules can only be other binaries (in Make or Soong). This does not completely prevent installation of the overridden binaries, but if both binaries would be installed by default (in PRODUCT_PACKAGES) the other binary will be removed from PRODUCT_PACKAGES."/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="package_name" type="string" descr="the package name of this app. The package name in the manifest file is used if one was not given."/>
        <field name="package_splits" type="string[]" descr="list of resource labels to generate individual resource packages"/>
        <field name="patch_module" type="string" descr="When compiling language level 9+ .java code in packages that are part of a system module, patch_module names the module that your sources and dependencies should be patched into. The Android runtime currently doesn't implement the JEP 261 module system so this option is only supported at compile time. It should only be needed to compile tests in packages that exist in libcore and which are inconvenient to move elsewhere."/>
        <field name="permitted_packages" type="string[]" descr="If not empty, classes are restricted to the specified packages and their sub-packages. This restriction is checked after applying jarjar rules and including static libs."/>
        <field name="platform_apis" type="bool" descr="if true, compile against the platform APIs instead of an SDK."/>
        <field name="plugins" type="string[]" descr="List of modules to use as annotation processors"/>
        <field name="privileged" type="bool" descr="Specifies that this app should be installed to the priv-app directory, where the system will grant it additional privileges not available to normal apps."/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <object-field name="proto">
            <field name="output_params" type="string[]" descr="List of extra options that will be passed to the proto generator."/>
            <field name="type" type="string" descr="Proto generator type.  C++: full or lite.  Java: micro, nano, stream, or lite."/>
            <field name="plugin" type="string" descr="Proto plugin to use as the generator.  Must be a cc_binary_host module."/>
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the protoc include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the bp file that will be added to the protoc include paths."/>
            <field name="canonical_path_from_root" type="bool" descr="whether to identify the proto files from the root of the source tree (the original method in Android, useful for android-specific protos), or relative from where they were specified (useful for external/third party protos). This defaults to true today, but is expected to default to false in the future."/>
        </object-field>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="resource_dirs" type="string[]" descr="list of directories relative to the Blueprints file containing Android resources.  Defaults to [&quot;res&quot;] if a directory called res exists. Set to [] to disable the default."/>
        <field name="resource_zips" type="string[]" descr="list of zip files containing Android resources."/>
        <field name="sdk_version" type="string" descr="if not blank, set to the version of the sdk to compile against.  Defaults to compiling against the current sdk if platform_apis is not set."/>
        <field name="services" type="string[]" descr="List of files to include in the META-INF/services folder of the resulting jar."/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="static_libs" type="blueprint[]" descr="list of java libraries that will be compiled into the resulting jar"/>
        <field name="system_modules" type="string" descr="When targeting 1.9, override the modules to use with --system"/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
            <object-field name="hostdex">
                <field name="required" type="blueprint[]" descr="Additional required dependencies to add to -hostdex modules."/>
            </object-field>
        </object-field>
        <field name="target_sdk_version" type="string" descr="if not blank, set the targetSdkVersion in the AndroidManifest.xml. Defaults to sdk_version if not set."/>
        <field name="use_embedded_dex" type="bool" descr="Store dex files uncompressed in the APK and set the android:useEmbeddedDex=&quot;true&quot; manifest attribute so that they are used from inside the APK at runtime."/>
        <field name="use_embedded_native_libs" type="bool" descr="Store native libraries uncompressed in the APK and set the android:extractNativeLibs=&quot;false&quot; manifest flag so that they are used from inside the APK at runtime.  Defaults to true for android_test modules unless sdk_version or min_sdk_version is set to a version that doesn't support it (<23), defaults to false for other module types where the native libraries are generally preinstalled outside the APK."/>
        <field name="use_tools_jar" type="bool" descr="Add host jdk tools.jar to bootclasspath"/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="android_app_certificate">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="certificate" type="string" descr="Name of the certificate files.  Extensions .x509.pem and .pk8 will be added to the name."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
        </object-field>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="android_library">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="list of source files used to compile the Java module.  May be .java, .logtags, .proto, or .aidl files."/>
        <field name="aapt_include_all_resources" type="bool" descr="include all resource configurations, not just the product-configured ones."/>
        <field name="aaptflags" type="string[]" descr="flags passed to aapt when creating the apk"/>
        <object-field name="aidl">
            <field name="include_dirs" type="string[]" descr="Top level directories to pass to aidl tool"/>
            <field name="local_include_dirs" type="string[]" descr="Directories rooted at the Android.bp file to pass to aidl tool"/>
            <field name="export_include_dirs" type="string[]" descr="directories that should be added as include directories for any aidl sources of modules that depend on this module, as well as to aidl for this module."/>
            <field name="generate_traces" type="bool" descr="whether to generate traces (for systrace) for this interface"/>
            <field name="generate_get_transaction_name" type="bool" descr="whether to generate Binder#GetTransaction name method."/>
        </object-field>
        <field name="asset_dirs" type="string[]" descr="list of directories relative to the Blueprints file containing assets. Defaults to [&quot;assets&quot;] if a directory called assets exists.  Set to [] to disable the default."/>
        <field name="compile_dex" type="bool" descr="If set to true, compile dex regardless of installable.  Defaults to false."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dex_preopt">
            <field name="enabled" type="bool" descr="If false, prevent dexpreopting and stripping the dex file from the final jar.  Defaults to true."/>
            <field name="no_stripping" type="bool" descr="If true, never strip the dex files from the final jar when dexpreopting.  Defaults to false."/>
            <field name="app_image" type="bool" descr="If true, generate an app image (.art file) for this module."/>
            <field name="profile_guided" type="bool" descr="If true, use a checked-in profile to guide optimization.  Defaults to false unless a matching profile is set or a profile is found in PRODUCT_DEX_PREOPT_PROFILE_DIR that matches the name of this module, in which case it is defaulted to true."/>
            <field name="profile" type="string" descr="If set, provides the path to profile relative to the Android.bp file.  If not set, defaults to searching for a file that matches the name of this module in the default profile location set by PRODUCT_DEX_PREOPT_PROFILE_DIR, or empty if not found."/>
        </object-field>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="dxflags" type="string[]" descr="list of module-specific flags that will be used for dex compiles"/>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <object-field name="errorprone">
            <field name="javacflags" type="string[]" descr="List of javac flags that should only be used when running errorprone."/>
        </object-field>
        <field name="exclude_java_resource_dirs" type="string[]" descr="list of directories that should be excluded from java_resource_dirs"/>
        <field name="exclude_java_resources" type="string[]" descr="list of files that should be excluded from java_resources and java_resource_dirs"/>
        <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the Java module. This is most useful in the arch/multilib variants to remove non-common files"/>
        <field name="hostdex" type="bool" descr="If true, export a copy of the module as a -hostdex module for host testing."/>
        <field name="include_srcs" type="bool" descr="If set to true, include sources used to compile the module in to the final jar"/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="installable" type="bool" descr="If set to true, allow this module to be dexed and installed on devices.  Has no effect on host modules, which are always considered installable."/>
        <object-field name="jacoco">
            <field name="include_filter" type="string[]" descr="List of classes to include for instrumentation with jacoco to collect coverage information at runtime when building with coverage enabled.  If unset defaults to all classes. Supports '*' as the last character of an entry in the list as a wildcard match. If preceded by '.' it matches all classes in the package and subpackages, otherwise it matches classes in the package that have the class name as a prefix."/>
            <field name="exclude_filter" type="string[]" descr="List of classes to exclude from instrumentation with jacoco to collect coverage information at runtime when building with coverage enabled.  Overrides classes selected by the include_filter property. Supports '*' as the last character of an entry in the list as a wildcard match. If preceded by '.' it matches all classes in the package and subpackages, otherwise it matches classes in the package that have the class name as a prefix."/>
        </object-field>
        <field name="jarjar_rules" type="string" descr="if not blank, run jarjar using the specified rules file"/>
        <field name="java_resource_dirs" type="string[]" descr="list of directories containing Java resources"/>
        <field name="java_resources" type="string[]" descr="list of files to use as Java resources"/>
        <field name="java_version" type="string" descr="If not blank, set the java version passed to javac as -source and -target"/>
        <field name="javac_shard_size" type="number" descr="The number of Java source entries each Javac instance can process"/>
        <field name="javacflags" type="string[]" descr="list of module-specific flags that will be used for javac compiles"/>
        <field name="kotlincflags" type="string[]" descr="list of module-specific flags that will be used for kotlinc compiles"/>
        <field name="libs" type="blueprint[]" descr="list of of java libraries that will be in the classpath"/>
        <field name="manifest" type="string" descr="path to AndroidManifest.xml.  If unset, defaults to &quot;AndroidManifest.xml&quot;."/>
        <field name="min_sdk_version" type="string" descr="if not blank, set the minimum version of the sdk that the compiled artifacts will run against. Defaults to sdk_version if not set."/>
        <field name="no_framework_libs" type="bool" descr="don't build against the framework libraries (ext, and framework for device targets)"/>
        <field name="no_standard_libs" type="bool" descr="don't build against the default libraries (bootclasspath, ext, and framework for device targets)"/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <object-field name="openjdk9">
            <field name="srcs" type="string[]" descr="List of source files that should only be used when passing -source 1.9"/>
            <field name="javacflags" type="string[]" descr="List of javac flags that should only be used when passing -source 1.9"/>
        </object-field>
        <object-field name="optimize">
            <field name="enabled" type="bool" descr="If false, disable all optimization.  Defaults to true for android_app and android_test modules, false for java_library and java_test modules."/>
            <field name="enabledByDefault" type="bool" descr="True if the module containing this has it set by default."/>
            <field name="shrink" type="bool" descr="If true, optimize for size by removing unused code.  Defaults to true for apps, false for libraries and tests."/>
            <field name="optimize" type="bool" descr="If true, optimize bytecode.  Defaults to false."/>
            <field name="obfuscate" type="bool" descr="If true, obfuscate bytecode.  Defaults to false."/>
            <field name="no_aapt_flags" type="bool" descr="If true, do not use the flag files generated by aapt that automatically keep classes referenced by the app manifest.  Defaults to false."/>
            <field name="proguard_flags" type="string[]" descr="Flags to pass to proguard."/>
            <field name="proguard_flags_files" type="string[]" descr="Specifies the locations of files containing proguard flags."/>
        </object-field>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="patch_module" type="string" descr="When compiling language level 9+ .java code in packages that are part of a system module, patch_module names the module that your sources and dependencies should be patched into. The Android runtime currently doesn't implement the JEP 261 module system so this option is only supported at compile time. It should only be needed to compile tests in packages that exist in libcore and which are inconvenient to move elsewhere."/>
        <field name="permitted_packages" type="string[]" descr="If not empty, classes are restricted to the specified packages and their sub-packages. This restriction is checked after applying jarjar rules and including static libs."/>
        <field name="platform_apis" type="bool" descr="if true, compile against the platform APIs instead of an SDK."/>
        <field name="plugins" type="string[]" descr="List of modules to use as annotation processors"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <object-field name="proto">
            <field name="output_params" type="string[]" descr="List of extra options that will be passed to the proto generator."/>
            <field name="type" type="string" descr="Proto generator type.  C++: full or lite.  Java: micro, nano, stream, or lite."/>
            <field name="plugin" type="string" descr="Proto plugin to use as the generator.  Must be a cc_binary_host module."/>
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the protoc include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the bp file that will be added to the protoc include paths."/>
            <field name="canonical_path_from_root" type="bool" descr="whether to identify the proto files from the root of the source tree (the original method in Android, useful for android-specific protos), or relative from where they were specified (useful for external/third party protos). This defaults to true today, but is expected to default to false in the future."/>
        </object-field>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="resource_dirs" type="string[]" descr="list of directories relative to the Blueprints file containing Android resources.  Defaults to [&quot;res&quot;] if a directory called res exists. Set to [] to disable the default."/>
        <field name="resource_zips" type="string[]" descr="list of zip files containing Android resources."/>
        <field name="sdk_version" type="string" descr="if not blank, set to the version of the sdk to compile against.  Defaults to compiling against the current sdk if platform_apis is not set."/>
        <field name="services" type="string[]" descr="List of files to include in the META-INF/services folder of the resulting jar."/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="static_libs" type="blueprint[]" descr="list of java libraries that will be compiled into the resulting jar"/>
        <field name="system_modules" type="string" descr="When targeting 1.9, override the modules to use with --system"/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
            <object-field name="hostdex">
                <field name="required" type="blueprint[]" descr="Additional required dependencies to add to -hostdex modules."/>
            </object-field>
        </object-field>
        <field name="target_sdk_version" type="string" descr="if not blank, set the targetSdkVersion in the AndroidManifest.xml. Defaults to sdk_version if not set."/>
        <field name="use_tools_jar" type="bool" descr="Add host jdk tools.jar to bootclasspath"/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="android_library_import">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="aars" type="string[]"/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="jetifier" type="bool" descr="if set to true, run Jetifier against .aar file. Defaults to false."/>
        <field name="libs" type="blueprint[]"/>
        <field name="min_sdk_version" type="string"/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="prefer" type="bool" descr="When prefer is set to true the prebuilt will be used instead of any source module with a matching name."/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="sdk_version" type="string"/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="static_libs" type="blueprint[]"/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
        </object-field>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="android_test">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="list of source files used to compile the Java module.  May be .java, .logtags, .proto, or .aidl files."/>
        <field name="aapt_include_all_resources" type="bool" descr="include all resource configurations, not just the product-configured ones."/>
        <field name="aaptflags" type="string[]" descr="flags passed to aapt when creating the apk"/>
        <field name="additional_certificates" type="string[]" descr="Names of extra android_app_certificate modules to sign the apk with in the form &quot;:module&quot;."/>
        <object-field name="aidl">
            <field name="include_dirs" type="string[]" descr="Top level directories to pass to aidl tool"/>
            <field name="local_include_dirs" type="string[]" descr="Directories rooted at the Android.bp file to pass to aidl tool"/>
            <field name="export_include_dirs" type="string[]" descr="directories that should be added as include directories for any aidl sources of modules that depend on this module, as well as to aidl for this module."/>
            <field name="generate_traces" type="bool" descr="whether to generate traces (for systrace) for this interface"/>
            <field name="generate_get_transaction_name" type="bool" descr="whether to generate Binder#GetTransaction name method."/>
        </object-field>
        <field name="asset_dirs" type="string[]" descr="list of directories relative to the Blueprints file containing assets. Defaults to [&quot;assets&quot;] if a directory called assets exists.  Set to [] to disable the default."/>
        <field name="certificate" type="string" descr="The name of a certificate in the default certificate directory, blank to use the default product certificate, or an android_app_certificate module name in the form &quot;:module&quot;."/>
        <field name="compile_dex" type="bool" descr="If set to true, compile dex regardless of installable.  Defaults to false."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="data" type="string[]" descr="list of files or filegroup modules that provide data that should be installed alongside the test"/>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dex_preopt">
            <field name="enabled" type="bool" descr="If false, prevent dexpreopting and stripping the dex file from the final jar.  Defaults to true."/>
            <field name="no_stripping" type="bool" descr="If true, never strip the dex files from the final jar when dexpreopting.  Defaults to false."/>
            <field name="app_image" type="bool" descr="If true, generate an app image (.art file) for this module."/>
            <field name="profile_guided" type="bool" descr="If true, use a checked-in profile to guide optimization.  Defaults to false unless a matching profile is set or a profile is found in PRODUCT_DEX_PREOPT_PROFILE_DIR that matches the name of this module, in which case it is defaulted to true."/>
            <field name="profile" type="string" descr="If set, provides the path to profile relative to the Android.bp file.  If not set, defaults to searching for a file that matches the name of this module in the default profile location set by PRODUCT_DEX_PREOPT_PROFILE_DIR, or empty if not found."/>
        </object-field>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="dxflags" type="string[]" descr="list of module-specific flags that will be used for dex compiles"/>
        <field name="embed_notices" type="bool" descr="If set, find and merge all NOTICE files that this module and its dependencies have and store it in the APK as an asset."/>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <object-field name="errorprone">
            <field name="javacflags" type="string[]" descr="List of javac flags that should only be used when running errorprone."/>
        </object-field>
        <field name="exclude_java_resource_dirs" type="string[]" descr="list of directories that should be excluded from java_resource_dirs"/>
        <field name="exclude_java_resources" type="string[]" descr="list of files that should be excluded from java_resources and java_resource_dirs"/>
        <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the Java module. This is most useful in the arch/multilib variants to remove non-common files"/>
        <field name="export_package_resources" type="bool" descr="If set, create package-export.apk, which other packages can use to get PRODUCT-agnostic resource data like IDs and type definitions."/>
        <field name="hostdex" type="bool" descr="If true, export a copy of the module as a -hostdex module for host testing."/>
        <field name="include_srcs" type="bool" descr="If set to true, include sources used to compile the module in to the final jar"/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="installable" type="bool" descr="If set to true, allow this module to be dexed and installed on devices.  Has no effect on host modules, which are always considered installable."/>
        <field name="instrumentation_for" type="string"/>
        <object-field name="jacoco">
            <field name="include_filter" type="string[]" descr="List of classes to include for instrumentation with jacoco to collect coverage information at runtime when building with coverage enabled.  If unset defaults to all classes. Supports '*' as the last character of an entry in the list as a wildcard match. If preceded by '.' it matches all classes in the package and subpackages, otherwise it matches classes in the package that have the class name as a prefix."/>
            <field name="exclude_filter" type="string[]" descr="List of classes to exclude from instrumentation with jacoco to collect coverage information at runtime when building with coverage enabled.  Overrides classes selected by the include_filter property. Supports '*' as the last character of an entry in the list as a wildcard match. If preceded by '.' it matches all classes in the package and subpackages, otherwise it matches classes in the package that have the class name as a prefix."/>
        </object-field>
        <field name="jarjar_rules" type="string" descr="if not blank, run jarjar using the specified rules file"/>
        <field name="java_resource_dirs" type="string[]" descr="list of directories containing Java resources"/>
        <field name="java_resources" type="string[]" descr="list of files to use as Java resources"/>
        <field name="java_version" type="string" descr="If not blank, set the java version passed to javac as -source and -target"/>
        <field name="javac_shard_size" type="number" descr="The number of Java source entries each Javac instance can process"/>
        <field name="javacflags" type="string[]" descr="list of module-specific flags that will be used for javac compiles"/>
        <field name="jni_libs" type="blueprint[]" descr="list of native libraries that will be provided in or alongside the resulting jar"/>
        <field name="kotlincflags" type="string[]" descr="list of module-specific flags that will be used for kotlinc compiles"/>
        <field name="libs" type="blueprint[]" descr="list of of java libraries that will be in the classpath"/>
        <field name="manifest" type="string" descr="manifest file to be included in resulting jar"/>
        <field name="min_sdk_version" type="string" descr="if not blank, set the minimum version of the sdk that the compiled artifacts will run against. Defaults to sdk_version if not set."/>
        <field name="no_framework_libs" type="bool" descr="don't build against the framework libraries (ext, and framework for device targets)"/>
        <field name="no_standard_libs" type="bool" descr="don't build against the default libraries (bootclasspath, ext, and framework for device targets)"/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <object-field name="openjdk9">
            <field name="srcs" type="string[]" descr="List of source files that should only be used when passing -source 1.9"/>
            <field name="javacflags" type="string[]" descr="List of javac flags that should only be used when passing -source 1.9"/>
        </object-field>
        <object-field name="optimize">
            <field name="enabled" type="bool" descr="If false, disable all optimization.  Defaults to true for android_app and android_test modules, false for java_library and java_test modules."/>
            <field name="enabledByDefault" type="bool" descr="True if the module containing this has it set by default."/>
            <field name="shrink" type="bool" descr="If true, optimize for size by removing unused code.  Defaults to true for apps, false for libraries and tests."/>
            <field name="optimize" type="bool" descr="If true, optimize bytecode.  Defaults to false."/>
            <field name="obfuscate" type="bool" descr="If true, obfuscate bytecode.  Defaults to false."/>
            <field name="no_aapt_flags" type="bool" descr="If true, do not use the flag files generated by aapt that automatically keep classes referenced by the app manifest.  Defaults to false."/>
            <field name="proguard_flags" type="string[]" descr="Flags to pass to proguard."/>
            <field name="proguard_flags_files" type="string[]" descr="Specifies the locations of files containing proguard flags."/>
        </object-field>
        <field name="overrides" type="blueprint[]" descr="Names of modules to be overridden. Listed modules can only be other binaries (in Make or Soong). This does not completely prevent installation of the overridden binaries, but if both binaries would be installed by default (in PRODUCT_PACKAGES) the other binary will be removed from PRODUCT_PACKAGES."/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="package_name" type="string" descr="the package name of this app. The package name in the manifest file is used if one was not given."/>
        <field name="package_splits" type="string[]" descr="list of resource labels to generate individual resource packages"/>
        <field name="patch_module" type="string" descr="When compiling language level 9+ .java code in packages that are part of a system module, patch_module names the module that your sources and dependencies should be patched into. The Android runtime currently doesn't implement the JEP 261 module system so this option is only supported at compile time. It should only be needed to compile tests in packages that exist in libcore and which are inconvenient to move elsewhere."/>
        <field name="permitted_packages" type="string[]" descr="If not empty, classes are restricted to the specified packages and their sub-packages. This restriction is checked after applying jarjar rules and including static libs."/>
        <field name="platform_apis" type="bool" descr="if true, compile against the platform APIs instead of an SDK."/>
        <field name="plugins" type="string[]" descr="List of modules to use as annotation processors"/>
        <field name="privileged" type="bool" descr="Specifies that this app should be installed to the priv-app directory, where the system will grant it additional privileges not available to normal apps."/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <object-field name="proto">
            <field name="output_params" type="string[]" descr="List of extra options that will be passed to the proto generator."/>
            <field name="type" type="string" descr="Proto generator type.  C++: full or lite.  Java: micro, nano, stream, or lite."/>
            <field name="plugin" type="string" descr="Proto plugin to use as the generator.  Must be a cc_binary_host module."/>
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the protoc include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the bp file that will be added to the protoc include paths."/>
            <field name="canonical_path_from_root" type="bool" descr="whether to identify the proto files from the root of the source tree (the original method in Android, useful for android-specific protos), or relative from where they were specified (useful for external/third party protos). This defaults to true today, but is expected to default to false in the future."/>
        </object-field>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="resource_dirs" type="string[]" descr="list of directories relative to the Blueprints file containing Android resources.  Defaults to [&quot;res&quot;] if a directory called res exists. Set to [] to disable the default."/>
        <field name="resource_zips" type="string[]" descr="list of zip files containing Android resources."/>
        <field name="sdk_version" type="string" descr="if not blank, set to the version of the sdk to compile against.  Defaults to compiling against the current sdk if platform_apis is not set."/>
        <field name="services" type="string[]" descr="List of files to include in the META-INF/services folder of the resulting jar."/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="static_libs" type="blueprint[]" descr="list of java libraries that will be compiled into the resulting jar"/>
        <field name="system_modules" type="string" descr="When targeting 1.9, override the modules to use with --system"/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
            <object-field name="hostdex">
                <field name="required" type="blueprint[]" descr="Additional required dependencies to add to -hostdex modules."/>
            </object-field>
        </object-field>
        <field name="target_sdk_version" type="string" descr="if not blank, set the targetSdkVersion in the AndroidManifest.xml. Defaults to sdk_version if not set."/>
        <field name="test_config" type="string" descr="the name of the test configuration (for example &quot;AndroidTest.xml&quot;) that should be installed with the module."/>
        <field name="test_config_template" type="string" descr="the name of the test configuration template (for example &quot;AndroidTestTemplate.xml&quot;) that should be installed with the module."/>
        <field name="test_suites" type="string[]" descr="list of compatibility suites (for example &quot;cts&quot;, &quot;vts&quot;) that the module should be installed into."/>
        <field name="use_embedded_dex" type="bool" descr="Store dex files uncompressed in the APK and set the android:useEmbeddedDex=&quot;true&quot; manifest attribute so that they are used from inside the APK at runtime."/>
        <field name="use_embedded_native_libs" type="bool" descr="Store native libraries uncompressed in the APK and set the android:extractNativeLibs=&quot;false&quot; manifest flag so that they are used from inside the APK at runtime.  Defaults to true for android_test modules unless sdk_version or min_sdk_version is set to a version that doesn't support it (<23), defaults to false for other module types where the native libraries are generally preinstalled outside the APK."/>
        <field name="use_tools_jar" type="bool" descr="Add host jdk tools.jar to bootclasspath"/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="android_test_helper_app">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="list of source files used to compile the Java module.  May be .java, .logtags, .proto, or .aidl files."/>
        <field name="aapt_include_all_resources" type="bool" descr="include all resource configurations, not just the product-configured ones."/>
        <field name="aaptflags" type="string[]" descr="flags passed to aapt when creating the apk"/>
        <field name="additional_certificates" type="string[]" descr="Names of extra android_app_certificate modules to sign the apk with in the form &quot;:module&quot;."/>
        <object-field name="aidl">
            <field name="include_dirs" type="string[]" descr="Top level directories to pass to aidl tool"/>
            <field name="local_include_dirs" type="string[]" descr="Directories rooted at the Android.bp file to pass to aidl tool"/>
            <field name="export_include_dirs" type="string[]" descr="directories that should be added as include directories for any aidl sources of modules that depend on this module, as well as to aidl for this module."/>
            <field name="generate_traces" type="bool" descr="whether to generate traces (for systrace) for this interface"/>
            <field name="generate_get_transaction_name" type="bool" descr="whether to generate Binder#GetTransaction name method."/>
        </object-field>
        <field name="asset_dirs" type="string[]" descr="list of directories relative to the Blueprints file containing assets. Defaults to [&quot;assets&quot;] if a directory called assets exists.  Set to [] to disable the default."/>
        <field name="certificate" type="string" descr="The name of a certificate in the default certificate directory, blank to use the default product certificate, or an android_app_certificate module name in the form &quot;:module&quot;."/>
        <field name="compile_dex" type="bool" descr="If set to true, compile dex regardless of installable.  Defaults to false."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dex_preopt">
            <field name="enabled" type="bool" descr="If false, prevent dexpreopting and stripping the dex file from the final jar.  Defaults to true."/>
            <field name="no_stripping" type="bool" descr="If true, never strip the dex files from the final jar when dexpreopting.  Defaults to false."/>
            <field name="app_image" type="bool" descr="If true, generate an app image (.art file) for this module."/>
            <field name="profile_guided" type="bool" descr="If true, use a checked-in profile to guide optimization.  Defaults to false unless a matching profile is set or a profile is found in PRODUCT_DEX_PREOPT_PROFILE_DIR that matches the name of this module, in which case it is defaulted to true."/>
            <field name="profile" type="string" descr="If set, provides the path to profile relative to the Android.bp file.  If not set, defaults to searching for a file that matches the name of this module in the default profile location set by PRODUCT_DEX_PREOPT_PROFILE_DIR, or empty if not found."/>
        </object-field>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="dxflags" type="string[]" descr="list of module-specific flags that will be used for dex compiles"/>
        <field name="embed_notices" type="bool" descr="If set, find and merge all NOTICE files that this module and its dependencies have and store it in the APK as an asset."/>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <object-field name="errorprone">
            <field name="javacflags" type="string[]" descr="List of javac flags that should only be used when running errorprone."/>
        </object-field>
        <field name="exclude_java_resource_dirs" type="string[]" descr="list of directories that should be excluded from java_resource_dirs"/>
        <field name="exclude_java_resources" type="string[]" descr="list of files that should be excluded from java_resources and java_resource_dirs"/>
        <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the Java module. This is most useful in the arch/multilib variants to remove non-common files"/>
        <field name="export_package_resources" type="bool" descr="If set, create package-export.apk, which other packages can use to get PRODUCT-agnostic resource data like IDs and type definitions."/>
        <field name="hostdex" type="bool" descr="If true, export a copy of the module as a -hostdex module for host testing."/>
        <field name="include_srcs" type="bool" descr="If set to true, include sources used to compile the module in to the final jar"/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="installable" type="bool" descr="If set to true, allow this module to be dexed and installed on devices.  Has no effect on host modules, which are always considered installable."/>
        <object-field name="jacoco">
            <field name="include_filter" type="string[]" descr="List of classes to include for instrumentation with jacoco to collect coverage information at runtime when building with coverage enabled.  If unset defaults to all classes. Supports '*' as the last character of an entry in the list as a wildcard match. If preceded by '.' it matches all classes in the package and subpackages, otherwise it matches classes in the package that have the class name as a prefix."/>
            <field name="exclude_filter" type="string[]" descr="List of classes to exclude from instrumentation with jacoco to collect coverage information at runtime when building with coverage enabled.  Overrides classes selected by the include_filter property. Supports '*' as the last character of an entry in the list as a wildcard match. If preceded by '.' it matches all classes in the package and subpackages, otherwise it matches classes in the package that have the class name as a prefix."/>
        </object-field>
        <field name="jarjar_rules" type="string" descr="if not blank, run jarjar using the specified rules file"/>
        <field name="java_resource_dirs" type="string[]" descr="list of directories containing Java resources"/>
        <field name="java_resources" type="string[]" descr="list of files to use as Java resources"/>
        <field name="java_version" type="string" descr="If not blank, set the java version passed to javac as -source and -target"/>
        <field name="javac_shard_size" type="number" descr="The number of Java source entries each Javac instance can process"/>
        <field name="javacflags" type="string[]" descr="list of module-specific flags that will be used for javac compiles"/>
        <field name="jni_libs" type="blueprint[]" descr="list of native libraries that will be provided in or alongside the resulting jar"/>
        <field name="kotlincflags" type="string[]" descr="list of module-specific flags that will be used for kotlinc compiles"/>
        <field name="libs" type="blueprint[]" descr="list of of java libraries that will be in the classpath"/>
        <field name="manifest" type="string" descr="path to AndroidManifest.xml.  If unset, defaults to &quot;AndroidManifest.xml&quot;."/>
        <field name="min_sdk_version" type="string" descr="if not blank, set the minimum version of the sdk that the compiled artifacts will run against. Defaults to sdk_version if not set."/>
        <field name="no_framework_libs" type="bool" descr="don't build against the framework libraries (ext, and framework for device targets)"/>
        <field name="no_standard_libs" type="bool" descr="don't build against the default libraries (bootclasspath, ext, and framework for device targets)"/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <object-field name="openjdk9">
            <field name="srcs" type="string[]" descr="List of source files that should only be used when passing -source 1.9"/>
            <field name="javacflags" type="string[]" descr="List of javac flags that should only be used when passing -source 1.9"/>
        </object-field>
        <object-field name="optimize">
            <field name="enabled" type="bool" descr="If false, disable all optimization.  Defaults to true for android_app and android_test modules, false for java_library and java_test modules."/>
            <field name="enabledByDefault" type="bool" descr="True if the module containing this has it set by default."/>
            <field name="shrink" type="bool" descr="If true, optimize for size by removing unused code.  Defaults to true for apps, false for libraries and tests."/>
            <field name="optimize" type="bool" descr="If true, optimize bytecode.  Defaults to false."/>
            <field name="obfuscate" type="bool" descr="If true, obfuscate bytecode.  Defaults to false."/>
            <field name="no_aapt_flags" type="bool" descr="If true, do not use the flag files generated by aapt that automatically keep classes referenced by the app manifest.  Defaults to false."/>
            <field name="proguard_flags" type="string[]" descr="Flags to pass to proguard."/>
            <field name="proguard_flags_files" type="string[]" descr="Specifies the locations of files containing proguard flags."/>
        </object-field>
        <field name="overrides" type="blueprint[]" descr="Names of modules to be overridden. Listed modules can only be other binaries (in Make or Soong). This does not completely prevent installation of the overridden binaries, but if both binaries would be installed by default (in PRODUCT_PACKAGES) the other binary will be removed from PRODUCT_PACKAGES."/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="package_name" type="string" descr="the package name of this app. The package name in the manifest file is used if one was not given."/>
        <field name="package_splits" type="string[]" descr="list of resource labels to generate individual resource packages"/>
        <field name="patch_module" type="string" descr="When compiling language level 9+ .java code in packages that are part of a system module, patch_module names the module that your sources and dependencies should be patched into. The Android runtime currently doesn't implement the JEP 261 module system so this option is only supported at compile time. It should only be needed to compile tests in packages that exist in libcore and which are inconvenient to move elsewhere."/>
        <field name="permitted_packages" type="string[]" descr="If not empty, classes are restricted to the specified packages and their sub-packages. This restriction is checked after applying jarjar rules and including static libs."/>
        <field name="platform_apis" type="bool" descr="if true, compile against the platform APIs instead of an SDK."/>
        <field name="plugins" type="string[]" descr="List of modules to use as annotation processors"/>
        <field name="privileged" type="bool" descr="Specifies that this app should be installed to the priv-app directory, where the system will grant it additional privileges not available to normal apps."/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <object-field name="proto">
            <field name="type" type="string" descr="Proto generator type.  C++: full or lite.  Java: micro, nano, stream, or lite."/>
            <field name="plugin" type="string" descr="Proto plugin to use as the generator.  Must be a cc_binary_host module."/>
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the protoc include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the bp file that will be added to the protoc include paths."/>
            <field name="canonical_path_from_root" type="bool" descr="whether to identify the proto files from the root of the source tree (the original method in Android, useful for android-specific protos), or relative from where they were specified (useful for external/third party protos). This defaults to true today, but is expected to default to false in the future."/>
            <field name="output_params" type="string[]" descr="List of extra options that will be passed to the proto generator."/>
        </object-field>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="resource_dirs" type="string[]" descr="list of directories relative to the Blueprints file containing Android resources.  Defaults to [&quot;res&quot;] if a directory called res exists. Set to [] to disable the default."/>
        <field name="resource_zips" type="string[]" descr="list of zip files containing Android resources."/>
        <field name="sdk_version" type="string" descr="if not blank, set to the version of the sdk to compile against.  Defaults to compiling against the current sdk if platform_apis is not set."/>
        <field name="services" type="string[]" descr="List of files to include in the META-INF/services folder of the resulting jar."/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="static_libs" type="blueprint[]" descr="list of java libraries that will be compiled into the resulting jar"/>
        <field name="system_modules" type="string" descr="When targeting 1.9, override the modules to use with --system"/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
            <object-field name="hostdex">
                <field name="required" type="blueprint[]" descr="Additional required dependencies to add to -hostdex modules."/>
            </object-field>
        </object-field>
        <field name="target_sdk_version" type="string" descr="if not blank, set the targetSdkVersion in the AndroidManifest.xml. Defaults to sdk_version if not set."/>
        <field name="test_suites" type="string[]" descr="list of compatibility suites (for example &quot;cts&quot;, &quot;vts&quot;) that the module should be installed into."/>
        <field name="use_embedded_dex" type="bool" descr="Store dex files uncompressed in the APK and set the android:useEmbeddedDex=&quot;true&quot; manifest attribute so that they are used from inside the APK at runtime."/>
        <field name="use_embedded_native_libs" type="bool" descr="Store native libraries uncompressed in the APK and set the android:extractNativeLibs=&quot;false&quot; manifest flag so that they are used from inside the APK at runtime.  Defaults to true for android_test modules unless sdk_version or min_sdk_version is set to a version that doesn't support it (<23), defaults to false for other module types where the native libraries are generally preinstalled outside the APK."/>
        <field name="use_tools_jar" type="bool" descr="Add host jdk tools.jar to bootclasspath"/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="dex_import">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="jars" type="string[]"/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="prefer" type="bool" descr="When prefer is set to true the prebuilt will be used instead of any source module with a matching name."/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
        </object-field>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="doc_defaults">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="list of source files used to compile the Java module.  May be .java, .logtags, .proto, or .aidl files."/>
        <field name="host_supported" type="bool" descr="If set to true, build a variant of the module for the host.  Defaults to false."/>
        <field name="device_supported" type="bool" descr="If set to true, build a variant of the module for the device.  Defaults to true."/>
        <object-field name="aidl">
            <field name="include_dirs" type="string[]" descr="Top level directories to pass to aidl tool"/>
            <field name="local_include_dirs" type="string[]" descr="Directories rooted at the Android.bp file to pass to aidl tool"/>
        </object-field>
        <field name="api_filename" type="string" descr="the generated public API filename by Doclava."/>
        <field name="api_tag_name" type="string" descr="the tag name used to distinguish if the API files belong to public/system/test."/>
        <field name="arg_files" type="string[]" descr="local files that are used within user customized droiddoc options."/>
        <field name="args" type="string" descr="user customized droiddoc args. Available variables for substitution:"/>
        <object-field name="check_api">
            <field name="last_released" type="string"/>
            <field name="current" type="string"/>
            <field name="ignore_missing_latest_api" type="bool" descr="do not perform API check against Last_released, in the case that both two specified API files by Last_released are modules which don't exist."/>
        </object-field>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="create_stubs" type="bool" descr="if set to false, don't allow droiddoc to generate stubs source files. Defaults to true."/>
        <field name="custom_template" type="string" descr="directory relative to top of the source tree that contains doc templates files."/>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <field name="dex_api_filename" type="string" descr="the generated public Dex API filename by Doclava."/>
        <field name="dex_mapping_filename" type="string" descr="mapping of dex signatures to source file and line number. This is a temporary property and will be deleted; you probably shouldn't be using it."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="dokka_enabled" type="bool" descr="if set to true, generate docs through Dokka instead of Doclava."/>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="exact_api_filename" type="string" descr="the generated exact API filename by Doclava."/>
        <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the Java module. This is most useful in the arch/multilib variants to remove non-common files filegroup or genrule can be included within this property."/>
        <field name="hdf" type="string[]" descr="set a value in the Clearsilver hdf namespace."/>
        <field name="html_dirs" type="string[]" descr="directories under current module source which contains html/jd files."/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="installable" type="bool" descr="If set to false, don't allow this module(-docs.zip) to be exported. Defaults to true."/>
        <field name="java_version" type="string" descr="If not blank, set the java version passed to javadoc as -source"/>
        <field name="knowntags" type="string[]" descr="a list of files under current module source dir which contains known tags in Java sources. filegroup or genrule can be included within this property."/>
        <field name="libs" type="blueprint[]" descr="list of java libraries that will be in the classpath."/>
        <field name="local_sourcepaths" type="string[]" descr="list of directories rooted at the Android.bp file that will be added to the search paths for finding source files when passing package names."/>
        <field name="no_framework_libs" type="bool" descr="don't build against the framework libraries (ext, and framework for device targets)"/>
        <field name="no_standard_libs" type="bool" descr="don't build against the default libraries (bootclasspath, ext, and framework for device targets)"/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="out" type="string[]" descr="names of the output files used in args that will be generated"/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="private_api_filename" type="string" descr="the generated private API filename by Doclava."/>
        <field name="private_dex_api_filename" type="string" descr="the generated private Dex API filename by Doclava."/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proguard_filename" type="string" descr="the generated proguard filename by Doclava."/>
        <field name="proofread_file" type="string" descr="proofread file contains all of the text content of the javadocs concatenated into one file, suitable for spell-checking and other goodness."/>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="removed_api_filename" type="string" descr="the generated removed API filename by Doclava."/>
        <field name="removed_dex_api_filename" type="string" descr="the generated removed Dex API filename by Doclava."/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="resourcesdir" type="string" descr="directory under current module source that provide additional resources (images)."/>
        <field name="resourcesoutdir" type="string" descr="resources output directory under out/soong/.intermediates."/>
        <field name="sdk_version" type="string" descr="if not blank, set to the version of the sdk to compile against"/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="srcs_lib" type="string" descr="the java library (in classpath) for documentation that provides java srcs and srcjars."/>
        <field name="srcs_lib_whitelist_dirs" type="string[]" descr="the base dirs under srcs_lib will be scanned for java srcs."/>
        <field name="srcs_lib_whitelist_pkgs" type="string[]" descr="the sub dirs under srcs_lib_whitelist_dirs will be scanned for java srcs."/>
        <field name="static_doc_index_redirect" type="string" descr="index.html under current module will be copied to docs out dir, if not null."/>
        <field name="static_doc_properties" type="string" descr="source.properties under current module will be copied to docs out dir, if not null."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
        </object-field>
        <field name="todo_file" type="string" descr="a todo file lists the program elements that are missing documentation. At some point, this might be improved to show more warnings."/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
        <field name="write_sdk_values" type="bool" descr="if set to true, collect the values used by the Dev tools and write them in files packaged with the SDK. Defaults to false."/>
    </blueprint>
    <blueprint name="droiddoc">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="list of source files used to compile the Java module.  May be .java, .logtags, .proto, or .aidl files."/>
        <field name="host_supported" type="bool" descr="If set to true, build a variant of the module for the host.  Defaults to false."/>
        <field name="device_supported" type="bool" descr="If set to true, build a variant of the module for the device.  Defaults to true."/>
        <object-field name="aidl">
            <field name="include_dirs" type="string[]" descr="Top level directories to pass to aidl tool"/>
            <field name="local_include_dirs" type="string[]" descr="Directories rooted at the Android.bp file to pass to aidl tool"/>
        </object-field>
        <field name="api_filename" type="string" descr="the generated public API filename by Doclava."/>
        <field name="api_tag_name" type="string" descr="the tag name used to distinguish if the API files belong to public/system/test."/>
        <field name="arg_files" type="string[]" descr="local files that are used within user customized droiddoc options."/>
        <field name="args" type="string" descr="user customized droiddoc args. Available variables for substitution:"/>
        <object-field name="check_api">
            <field name="last_released" type="string"/>
            <field name="current" type="string"/>
            <field name="ignore_missing_latest_api" type="bool" descr="do not perform API check against Last_released, in the case that both two specified API files by Last_released are modules which don't exist."/>
        </object-field>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="create_stubs" type="bool" descr="if set to false, don't allow droiddoc to generate stubs source files. Defaults to true."/>
        <field name="custom_template" type="string" descr="directory relative to top of the source tree that contains doc templates files."/>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <field name="dex_api_filename" type="string" descr="the generated public Dex API filename by Doclava."/>
        <field name="dex_mapping_filename" type="string" descr="mapping of dex signatures to source file and line number. This is a temporary property and will be deleted; you probably shouldn't be using it."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="dokka_enabled" type="bool" descr="if set to true, generate docs through Dokka instead of Doclava."/>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="exact_api_filename" type="string" descr="the generated exact API filename by Doclava."/>
        <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the Java module. This is most useful in the arch/multilib variants to remove non-common files filegroup or genrule can be included within this property."/>
        <field name="hdf" type="string[]" descr="set a value in the Clearsilver hdf namespace."/>
        <field name="html_dirs" type="string[]" descr="directories under current module source which contains html/jd files."/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="installable" type="bool" descr="If set to false, don't allow this module(-docs.zip) to be exported. Defaults to true."/>
        <field name="java_version" type="string" descr="If not blank, set the java version passed to javadoc as -source"/>
        <field name="knowntags" type="string[]" descr="a list of files under current module source dir which contains known tags in Java sources. filegroup or genrule can be included within this property."/>
        <field name="libs" type="blueprint[]" descr="list of java libraries that will be in the classpath."/>
        <field name="local_sourcepaths" type="string[]" descr="list of directories rooted at the Android.bp file that will be added to the search paths for finding source files when passing package names."/>
        <field name="no_framework_libs" type="bool" descr="don't build against the framework libraries (ext, and framework for device targets)"/>
        <field name="no_standard_libs" type="bool" descr="don't build against the default libraries (bootclasspath, ext, and framework for device targets)"/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="out" type="string[]" descr="names of the output files used in args that will be generated"/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="private_api_filename" type="string" descr="the generated private API filename by Doclava."/>
        <field name="private_dex_api_filename" type="string" descr="the generated private Dex API filename by Doclava."/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proguard_filename" type="string" descr="the generated proguard filename by Doclava."/>
        <field name="proofread_file" type="string" descr="proofread file contains all of the text content of the javadocs concatenated into one file, suitable for spell-checking and other goodness."/>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="removed_api_filename" type="string" descr="the generated removed API filename by Doclava."/>
        <field name="removed_dex_api_filename" type="string" descr="the generated removed Dex API filename by Doclava."/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="resourcesdir" type="string" descr="directory under current module source that provide additional resources (images)."/>
        <field name="resourcesoutdir" type="string" descr="resources output directory under out/soong/.intermediates."/>
        <field name="sdk_version" type="string" descr="if not blank, set to the version of the sdk to compile against"/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="srcs_lib" type="string" descr="the java library (in classpath) for documentation that provides java srcs and srcjars."/>
        <field name="srcs_lib_whitelist_dirs" type="string[]" descr="the base dirs under srcs_lib will be scanned for java srcs."/>
        <field name="srcs_lib_whitelist_pkgs" type="string[]" descr="the sub dirs under srcs_lib_whitelist_dirs will be scanned for java srcs."/>
        <field name="static_doc_index_redirect" type="string" descr="index.html under current module will be copied to docs out dir, if not null."/>
        <field name="static_doc_properties" type="string" descr="source.properties under current module will be copied to docs out dir, if not null."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
        </object-field>
        <field name="todo_file" type="string" descr="a todo file lists the program elements that are missing documentation. At some point, this might be improved to show more warnings."/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
        <field name="write_sdk_values" type="bool" descr="if set to true, collect the values used by the Dev tools and write them in files packaged with the SDK. Defaults to false."/>
    </blueprint>
    <blueprint name="droiddoc_exported_dir">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="path" type="string" descr="path to the directory containing Droiddoc related files."/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
        </object-field>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="droiddoc_host">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="list of source files used to compile the Java module.  May be .java, .logtags, .proto, or .aidl files."/>
        <object-field name="aidl">
            <field name="include_dirs" type="string[]" descr="Top level directories to pass to aidl tool"/>
            <field name="local_include_dirs" type="string[]" descr="Directories rooted at the Android.bp file to pass to aidl tool"/>
        </object-field>
        <field name="api_filename" type="string" descr="the generated public API filename by Doclava."/>
        <field name="api_tag_name" type="string" descr="the tag name used to distinguish if the API files belong to public/system/test."/>
        <field name="arg_files" type="string[]" descr="local files that are used within user customized droiddoc options."/>
        <field name="args" type="string" descr="user customized droiddoc args. Available variables for substitution:"/>
        <object-field name="check_api">
            <field name="last_released" type="string"/>
            <field name="current" type="string"/>
            <field name="ignore_missing_latest_api" type="bool" descr="do not perform API check against Last_released, in the case that both two specified API files by Last_released are modules which don't exist."/>
        </object-field>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="create_stubs" type="bool" descr="if set to false, don't allow droiddoc to generate stubs source files. Defaults to true."/>
        <field name="custom_template" type="string" descr="directory relative to top of the source tree that contains doc templates files."/>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <field name="dex_api_filename" type="string" descr="the generated public Dex API filename by Doclava."/>
        <field name="dex_mapping_filename" type="string" descr="mapping of dex signatures to source file and line number. This is a temporary property and will be deleted; you probably shouldn't be using it."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="dokka_enabled" type="bool" descr="if set to true, generate docs through Dokka instead of Doclava."/>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="exact_api_filename" type="string" descr="the generated exact API filename by Doclava."/>
        <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the Java module. This is most useful in the arch/multilib variants to remove non-common files filegroup or genrule can be included within this property."/>
        <field name="hdf" type="string[]" descr="set a value in the Clearsilver hdf namespace."/>
        <field name="html_dirs" type="string[]" descr="directories under current module source which contains html/jd files."/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="installable" type="bool" descr="If set to false, don't allow this module(-docs.zip) to be exported. Defaults to true."/>
        <field name="java_version" type="string" descr="If not blank, set the java version passed to javadoc as -source"/>
        <field name="knowntags" type="string[]" descr="a list of files under current module source dir which contains known tags in Java sources. filegroup or genrule can be included within this property."/>
        <field name="libs" type="blueprint[]" descr="list of java libraries that will be in the classpath."/>
        <field name="local_sourcepaths" type="string[]" descr="list of directories rooted at the Android.bp file that will be added to the search paths for finding source files when passing package names."/>
        <field name="no_framework_libs" type="bool" descr="don't build against the framework libraries (ext, and framework for device targets)"/>
        <field name="no_standard_libs" type="bool" descr="don't build against the default libraries (bootclasspath, ext, and framework for device targets)"/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="out" type="string[]" descr="names of the output files used in args that will be generated"/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="private_api_filename" type="string" descr="the generated private API filename by Doclava."/>
        <field name="private_dex_api_filename" type="string" descr="the generated private Dex API filename by Doclava."/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proguard_filename" type="string" descr="the generated proguard filename by Doclava."/>
        <field name="proofread_file" type="string" descr="proofread file contains all of the text content of the javadocs concatenated into one file, suitable for spell-checking and other goodness."/>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="removed_api_filename" type="string" descr="the generated removed API filename by Doclava."/>
        <field name="removed_dex_api_filename" type="string" descr="the generated removed Dex API filename by Doclava."/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="resourcesdir" type="string" descr="directory under current module source that provide additional resources (images)."/>
        <field name="resourcesoutdir" type="string" descr="resources output directory under out/soong/.intermediates."/>
        <field name="sdk_version" type="string" descr="if not blank, set to the version of the sdk to compile against"/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="srcs_lib" type="string" descr="the java library (in classpath) for documentation that provides java srcs and srcjars."/>
        <field name="srcs_lib_whitelist_dirs" type="string[]" descr="the base dirs under srcs_lib will be scanned for java srcs."/>
        <field name="srcs_lib_whitelist_pkgs" type="string[]" descr="the sub dirs under srcs_lib_whitelist_dirs will be scanned for java srcs."/>
        <field name="static_doc_index_redirect" type="string" descr="index.html under current module will be copied to docs out dir, if not null."/>
        <field name="static_doc_properties" type="string" descr="source.properties under current module will be copied to docs out dir, if not null."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
        </object-field>
        <field name="todo_file" type="string" descr="a todo file lists the program elements that are missing documentation. At some point, this might be improved to show more warnings."/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
        <field name="write_sdk_values" type="bool" descr="if set to true, collect the values used by the Dev tools and write them in files packaged with the SDK. Defaults to false."/>
    </blueprint>
    <blueprint name="droidstubs">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="list of source files used to compile the Java module.  May be .java, .logtags, .proto, or .aidl files."/>
        <field name="host_supported" type="bool" descr="If set to true, build a variant of the module for the host.  Defaults to false."/>
        <field name="device_supported" type="bool" descr="If set to true, build a variant of the module for the device.  Defaults to true."/>
        <object-field name="aidl">
            <field name="include_dirs" type="string[]" descr="Top level directories to pass to aidl tool"/>
            <field name="local_include_dirs" type="string[]" descr="Directories rooted at the Android.bp file to pass to aidl tool"/>
        </object-field>
        <field name="annotations_enabled" type="bool" descr="is set to true, Metalava will allow framework SDK to contain annotations."/>
        <field name="api_filename" type="string" descr="the generated public API filename by Metalava."/>
        <field name="api_levels_annotations_dirs" type="string[]" descr="the dirs which Metalava extracts API levels annotations from."/>
        <field name="api_levels_annotations_enabled" type="bool" descr="is set to true, Metalava will allow framework SDK to contain API levels annotations."/>
        <field name="api_tag_name" type="string" descr="the tag name used to distinguish if the API files belong to public/system/test."/>
        <field name="arg_files" type="string[]" descr="local files that are used within user customized droiddoc options."/>
        <field name="args" type="string" descr="user customized droiddoc args. Available variables for substitution:"/>
        <object-field name="check_api">
            <field name="last_released" type="string"/>
            <field name="current" type="string"/>
            <field name="ignore_missing_latest_api" type="bool" descr="do not perform API check against Last_released, in the case that both two specified API files by Last_released are modules which don't exist."/>
        </object-field>
        <field name="check_nullability_warnings" type="string" descr="a file containing expected warnings produced by validation of nullability annotations."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="create_doc_stubs" type="bool" descr="if set to true, allow Metalava to generate doc_stubs source files. Defaults to false."/>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <field name="dex_api_filename" type="string" descr="the generated public Dex API filename by Metalava."/>
        <field name="dex_mapping_filename" type="string" descr="mapping of dex signatures to source file and line number. This is a temporary property and will be deleted; you probably shouldn't be using it."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="exact_api_filename" type="string" descr="the generated exact API filename by Metalava."/>
        <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the Java module. This is most useful in the arch/multilib variants to remove non-common files filegroup or genrule can be included within this property."/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="installable" type="bool" descr="If set to false, don't allow this module(-docs.zip) to be exported. Defaults to true."/>
        <field name="java_version" type="string" descr="If not blank, set the java version passed to javadoc as -source"/>
        <field name="jdiff_enabled" type="bool" descr="If set to true, .xml based public API file will be also generated, and JDiff tool will be invoked to genreate javadoc files. Defaults to false."/>
        <field name="libs" type="blueprint[]" descr="list of java libraries that will be in the classpath."/>
        <field name="local_sourcepaths" type="string[]" descr="list of directories rooted at the Android.bp file that will be added to the search paths for finding source files when passing package names."/>
        <field name="merge_annotations_dirs" type="string[]" descr="a list of top-level directories containing files to merge qualifier annotations (i.e. those intended to be included in the stubs written) from."/>
        <field name="merge_inclusion_annotations_dirs" type="string[]" descr="a list of top-level directories containing Java stub files to merge show/hide annotations from."/>
        <field name="no_framework_libs" type="bool" descr="don't build against the framework libraries (ext, and framework for device targets)"/>
        <field name="no_standard_libs" type="bool" descr="don't build against the default libraries (bootclasspath, ext, and framework for device targets)"/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="out" type="string[]" descr="names of the output files used in args that will be generated"/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="previous_api" type="string" descr="user can specify the version of previous released API file in order to do compatibility check."/>
        <field name="private_api_filename" type="string" descr="the generated private API filename by Metalava."/>
        <field name="private_dex_api_filename" type="string" descr="the generated private Dex API filename by Metalava."/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proguard_filename" type="string" descr="the generated proguard filename by Metalava."/>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="removed_api_filename" type="string" descr="the generated removed API filename by Metalava."/>
        <field name="removed_dex_api_filename" type="string" descr="the generated removed Dex API filename by Metalava."/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="sdk_version" type="string" descr="if not blank, set to the version of the sdk to compile against"/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="srcs_lib" type="string" descr="the java library (in classpath) for documentation that provides java srcs and srcjars."/>
        <field name="srcs_lib_whitelist_dirs" type="string[]" descr="the base dirs under srcs_lib will be scanned for java srcs."/>
        <field name="srcs_lib_whitelist_pkgs" type="string[]" descr="the sub dirs under srcs_lib_whitelist_dirs will be scanned for java srcs."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
        </object-field>
        <field name="validate_nullability_from_list" type="string" descr="a file containing a list of classes to do nullability validation for."/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
        <field name="write_sdk_values" type="bool" descr="if set to true, collect the values used by the Dev tools and write them in files packaged with the SDK. Defaults to false."/>
    </blueprint>
    <blueprint name="droidstubs_host">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="list of source files used to compile the Java module.  May be .java, .logtags, .proto, or .aidl files."/>
        <object-field name="aidl">
            <field name="include_dirs" type="string[]" descr="Top level directories to pass to aidl tool"/>
            <field name="local_include_dirs" type="string[]" descr="Directories rooted at the Android.bp file to pass to aidl tool"/>
        </object-field>
        <field name="annotations_enabled" type="bool" descr="is set to true, Metalava will allow framework SDK to contain annotations."/>
        <field name="api_filename" type="string" descr="the generated public API filename by Metalava."/>
        <field name="api_levels_annotations_dirs" type="string[]" descr="the dirs which Metalava extracts API levels annotations from."/>
        <field name="api_levels_annotations_enabled" type="bool" descr="is set to true, Metalava will allow framework SDK to contain API levels annotations."/>
        <field name="api_tag_name" type="string" descr="the tag name used to distinguish if the API files belong to public/system/test."/>
        <field name="arg_files" type="string[]" descr="local files that are used within user customized droiddoc options."/>
        <field name="args" type="string" descr="user customized droiddoc args. Available variables for substitution:"/>
        <object-field name="check_api">
            <field name="last_released" type="string"/>
            <field name="current" type="string"/>
            <field name="ignore_missing_latest_api" type="bool" descr="do not perform API check against Last_released, in the case that both two specified API files by Last_released are modules which don't exist."/>
        </object-field>
        <field name="check_nullability_warnings" type="string" descr="a file containing expected warnings produced by validation of nullability annotations."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="create_doc_stubs" type="bool" descr="if set to true, allow Metalava to generate doc_stubs source files. Defaults to false."/>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <field name="dex_api_filename" type="string" descr="the generated public Dex API filename by Metalava."/>
        <field name="dex_mapping_filename" type="string" descr="mapping of dex signatures to source file and line number. This is a temporary property and will be deleted; you probably shouldn't be using it."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="exact_api_filename" type="string" descr="the generated exact API filename by Metalava."/>
        <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the Java module. This is most useful in the arch/multilib variants to remove non-common files filegroup or genrule can be included within this property."/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="installable" type="bool" descr="If set to false, don't allow this module(-docs.zip) to be exported. Defaults to true."/>
        <field name="java_version" type="string" descr="If not blank, set the java version passed to javadoc as -source"/>
        <field name="jdiff_enabled" type="bool" descr="If set to true, .xml based public API file will be also generated, and JDiff tool will be invoked to genreate javadoc files. Defaults to false."/>
        <field name="libs" type="blueprint[]" descr="list of java libraries that will be in the classpath."/>
        <field name="local_sourcepaths" type="string[]" descr="list of directories rooted at the Android.bp file that will be added to the search paths for finding source files when passing package names."/>
        <field name="merge_annotations_dirs" type="string[]" descr="a list of top-level directories containing files to merge qualifier annotations (i.e. those intended to be included in the stubs written) from."/>
        <field name="merge_inclusion_annotations_dirs" type="string[]" descr="a list of top-level directories containing Java stub files to merge show/hide annotations from."/>
        <field name="no_framework_libs" type="bool" descr="don't build against the framework libraries (ext, and framework for device targets)"/>
        <field name="no_standard_libs" type="bool" descr="don't build against the default libraries (bootclasspath, ext, and framework for device targets)"/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="out" type="string[]" descr="names of the output files used in args that will be generated"/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="previous_api" type="string" descr="user can specify the version of previous released API file in order to do compatibility check."/>
        <field name="private_api_filename" type="string" descr="the generated private API filename by Metalava."/>
        <field name="private_dex_api_filename" type="string" descr="the generated private Dex API filename by Metalava."/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proguard_filename" type="string" descr="the generated proguard filename by Metalava."/>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="removed_api_filename" type="string" descr="the generated removed API filename by Metalava."/>
        <field name="removed_dex_api_filename" type="string" descr="the generated removed Dex API filename by Metalava."/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="sdk_version" type="string" descr="if not blank, set to the version of the sdk to compile against"/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="srcs_lib" type="string" descr="the java library (in classpath) for documentation that provides java srcs and srcjars."/>
        <field name="srcs_lib_whitelist_dirs" type="string[]" descr="the base dirs under srcs_lib will be scanned for java srcs."/>
        <field name="srcs_lib_whitelist_pkgs" type="string[]" descr="the sub dirs under srcs_lib_whitelist_dirs will be scanned for java srcs."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
        </object-field>
        <field name="validate_nullability_from_list" type="string" descr="a file containing a list of classes to do nullability validation for."/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
        <field name="write_sdk_values" type="bool" descr="if set to true, collect the values used by the Dev tools and write them in files packaged with the SDK. Defaults to false."/>
    </blueprint>
    <blueprint name="java_binary">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="list of source files used to compile the Java module.  May be .java, .logtags, .proto, or .aidl files."/>
        <field name="host_supported" type="bool" descr="If set to true, build a variant of the module for the host.  Defaults to false."/>
        <field name="device_supported" type="bool" descr="If set to true, build a variant of the module for the device.  Defaults to true."/>
        <object-field name="aidl">
            <field name="include_dirs" type="string[]" descr="Top level directories to pass to aidl tool"/>
            <field name="local_include_dirs" type="string[]" descr="Directories rooted at the Android.bp file to pass to aidl tool"/>
            <field name="export_include_dirs" type="string[]" descr="directories that should be added as include directories for any aidl sources of modules that depend on this module, as well as to aidl for this module."/>
            <field name="generate_traces" type="bool" descr="whether to generate traces (for systrace) for this interface"/>
            <field name="generate_get_transaction_name" type="bool" descr="whether to generate Binder#GetTransaction name method."/>
        </object-field>
        <field name="compile_dex" type="bool" descr="If set to true, compile dex regardless of installable.  Defaults to false."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dex_preopt">
            <field name="enabled" type="bool" descr="If false, prevent dexpreopting and stripping the dex file from the final jar.  Defaults to true."/>
            <field name="no_stripping" type="bool" descr="If true, never strip the dex files from the final jar when dexpreopting.  Defaults to false."/>
            <field name="app_image" type="bool" descr="If true, generate an app image (.art file) for this module."/>
            <field name="profile_guided" type="bool" descr="If true, use a checked-in profile to guide optimization.  Defaults to false unless a matching profile is set or a profile is found in PRODUCT_DEX_PREOPT_PROFILE_DIR that matches the name of this module, in which case it is defaulted to true."/>
            <field name="profile" type="string" descr="If set, provides the path to profile relative to the Android.bp file.  If not set, defaults to searching for a file that matches the name of this module in the default profile location set by PRODUCT_DEX_PREOPT_PROFILE_DIR, or empty if not found."/>
        </object-field>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="dxflags" type="string[]" descr="list of module-specific flags that will be used for dex compiles"/>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <object-field name="errorprone">
            <field name="javacflags" type="string[]" descr="List of javac flags that should only be used when running errorprone."/>
        </object-field>
        <field name="exclude_java_resource_dirs" type="string[]" descr="list of directories that should be excluded from java_resource_dirs"/>
        <field name="exclude_java_resources" type="string[]" descr="list of files that should be excluded from java_resources and java_resource_dirs"/>
        <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the Java module. This is most useful in the arch/multilib variants to remove non-common files"/>
        <field name="hostdex" type="bool" descr="If true, export a copy of the module as a -hostdex module for host testing."/>
        <field name="include_srcs" type="bool" descr="If set to true, include sources used to compile the module in to the final jar"/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="installable" type="bool" descr="If set to true, allow this module to be dexed and installed on devices.  Has no effect on host modules, which are always considered installable."/>
        <object-field name="jacoco">
            <field name="include_filter" type="string[]" descr="List of classes to include for instrumentation with jacoco to collect coverage information at runtime when building with coverage enabled.  If unset defaults to all classes. Supports '*' as the last character of an entry in the list as a wildcard match. If preceded by '.' it matches all classes in the package and subpackages, otherwise it matches classes in the package that have the class name as a prefix."/>
            <field name="exclude_filter" type="string[]" descr="List of classes to exclude from instrumentation with jacoco to collect coverage information at runtime when building with coverage enabled.  Overrides classes selected by the include_filter property. Supports '*' as the last character of an entry in the list as a wildcard match. If preceded by '.' it matches all classes in the package and subpackages, otherwise it matches classes in the package that have the class name as a prefix."/>
        </object-field>
        <field name="jarjar_rules" type="string" descr="if not blank, run jarjar using the specified rules file"/>
        <field name="java_resource_dirs" type="string[]" descr="list of directories containing Java resources"/>
        <field name="java_resources" type="string[]" descr="list of files to use as Java resources"/>
        <field name="java_version" type="string" descr="If not blank, set the java version passed to javac as -source and -target"/>
        <field name="javac_shard_size" type="number" descr="The number of Java source entries each Javac instance can process"/>
        <field name="javacflags" type="string[]" descr="list of module-specific flags that will be used for javac compiles"/>
        <field name="kotlincflags" type="string[]" descr="list of module-specific flags that will be used for kotlinc compiles"/>
        <field name="libs" type="blueprint[]" descr="list of of java libraries that will be in the classpath"/>
        <field name="main_class" type="string" descr="Name of the class containing main to be inserted into the manifest as Main-Class."/>
        <field name="manifest" type="string" descr="manifest file to be included in resulting jar"/>
        <field name="min_sdk_version" type="string" descr="if not blank, set the minimum version of the sdk that the compiled artifacts will run against. Defaults to sdk_version if not set."/>
        <field name="no_framework_libs" type="bool" descr="don't build against the framework libraries (ext, and framework for device targets)"/>
        <field name="no_standard_libs" type="bool" descr="don't build against the default libraries (bootclasspath, ext, and framework for device targets)"/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <object-field name="openjdk9">
            <field name="srcs" type="string[]" descr="List of source files that should only be used when passing -source 1.9"/>
            <field name="javacflags" type="string[]" descr="List of javac flags that should only be used when passing -source 1.9"/>
        </object-field>
        <object-field name="optimize">
            <field name="enabled" type="bool" descr="If false, disable all optimization.  Defaults to true for android_app and android_test modules, false for java_library and java_test modules."/>
            <field name="enabledByDefault" type="bool" descr="True if the module containing this has it set by default."/>
            <field name="shrink" type="bool" descr="If true, optimize for size by removing unused code.  Defaults to true for apps, false for libraries and tests."/>
            <field name="optimize" type="bool" descr="If true, optimize bytecode.  Defaults to false."/>
            <field name="obfuscate" type="bool" descr="If true, obfuscate bytecode.  Defaults to false."/>
            <field name="no_aapt_flags" type="bool" descr="If true, do not use the flag files generated by aapt that automatically keep classes referenced by the app manifest.  Defaults to false."/>
            <field name="proguard_flags" type="string[]" descr="Flags to pass to proguard."/>
            <field name="proguard_flags_files" type="string[]" descr="Specifies the locations of files containing proguard flags."/>
        </object-field>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="patch_module" type="string" descr="When compiling language level 9+ .java code in packages that are part of a system module, patch_module names the module that your sources and dependencies should be patched into. The Android runtime currently doesn't implement the JEP 261 module system so this option is only supported at compile time. It should only be needed to compile tests in packages that exist in libcore and which are inconvenient to move elsewhere."/>
        <field name="permitted_packages" type="string[]" descr="If not empty, classes are restricted to the specified packages and their sub-packages. This restriction is checked after applying jarjar rules and including static libs."/>
        <field name="platform_apis" type="bool" descr="if true, compile against the platform APIs instead of an SDK."/>
        <field name="plugins" type="string[]" descr="List of modules to use as annotation processors"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <object-field name="proto">
            <field name="output_params" type="string[]" descr="List of extra options that will be passed to the proto generator."/>
            <field name="type" type="string" descr="Proto generator type.  C++: full or lite.  Java: micro, nano, stream, or lite."/>
            <field name="plugin" type="string" descr="Proto plugin to use as the generator.  Must be a cc_binary_host module."/>
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the protoc include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the bp file that will be added to the protoc include paths."/>
            <field name="canonical_path_from_root" type="bool" descr="whether to identify the proto files from the root of the source tree (the original method in Android, useful for android-specific protos), or relative from where they were specified (useful for external/third party protos). This defaults to true today, but is expected to default to false in the future."/>
        </object-field>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="sdk_version" type="string" descr="if not blank, set to the version of the sdk to compile against.  Defaults to compiling against the current sdk if platform_apis is not set."/>
        <field name="services" type="string[]" descr="List of files to include in the META-INF/services folder of the resulting jar."/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="static_libs" type="blueprint[]" descr="list of java libraries that will be compiled into the resulting jar"/>
        <field name="system_modules" type="string" descr="When targeting 1.9, override the modules to use with --system"/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
            <object-field name="hostdex">
                <field name="required" type="blueprint[]" descr="Additional required dependencies to add to -hostdex modules."/>
            </object-field>
        </object-field>
        <field name="target_sdk_version" type="string" descr="if not blank, set the targetSdkVersion in the AndroidManifest.xml. Defaults to sdk_version if not set."/>
        <field name="use_tools_jar" type="bool" descr="Add host jdk tools.jar to bootclasspath"/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
        <field name="wrapper" type="string" descr="installable script to execute the resulting jar"/>
    </blueprint>
    <blueprint name="java_binary_host">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="list of source files used to compile the Java module.  May be .java, .logtags, .proto, or .aidl files."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <object-field name="errorprone">
            <field name="javacflags" type="string[]" descr="List of javac flags that should only be used when running errorprone."/>
        </object-field>
        <field name="exclude_java_resource_dirs" type="string[]" descr="list of directories that should be excluded from java_resource_dirs"/>
        <field name="exclude_java_resources" type="string[]" descr="list of files that should be excluded from java_resources and java_resource_dirs"/>
        <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the Java module. This is most useful in the arch/multilib variants to remove non-common files"/>
        <field name="include_srcs" type="bool" descr="If set to true, include sources used to compile the module in to the final jar"/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="installable" type="bool" descr="If set to true, allow this module to be dexed and installed on devices.  Has no effect on host modules, which are always considered installable."/>
        <object-field name="jacoco">
            <field name="include_filter" type="string[]" descr="List of classes to include for instrumentation with jacoco to collect coverage information at runtime when building with coverage enabled.  If unset defaults to all classes. Supports '*' as the last character of an entry in the list as a wildcard match. If preceded by '.' it matches all classes in the package and subpackages, otherwise it matches classes in the package that have the class name as a prefix."/>
            <field name="exclude_filter" type="string[]" descr="List of classes to exclude from instrumentation with jacoco to collect coverage information at runtime when building with coverage enabled.  Overrides classes selected by the include_filter property. Supports '*' as the last character of an entry in the list as a wildcard match. If preceded by '.' it matches all classes in the package and subpackages, otherwise it matches classes in the package that have the class name as a prefix."/>
        </object-field>
        <field name="jarjar_rules" type="string" descr="if not blank, run jarjar using the specified rules file"/>
        <field name="java_resource_dirs" type="string[]" descr="list of directories containing Java resources"/>
        <field name="java_resources" type="string[]" descr="list of files to use as Java resources"/>
        <field name="java_version" type="string" descr="If not blank, set the java version passed to javac as -source and -target"/>
        <field name="javac_shard_size" type="number" descr="The number of Java source entries each Javac instance can process"/>
        <field name="javacflags" type="string[]" descr="list of module-specific flags that will be used for javac compiles"/>
        <field name="kotlincflags" type="string[]" descr="list of module-specific flags that will be used for kotlinc compiles"/>
        <field name="libs" type="blueprint[]" descr="list of of java libraries that will be in the classpath"/>
        <field name="main_class" type="string" descr="Name of the class containing main to be inserted into the manifest as Main-Class."/>
        <field name="manifest" type="string" descr="manifest file to be included in resulting jar"/>
        <field name="no_framework_libs" type="bool" descr="don't build against the framework libraries (ext, and framework for device targets)"/>
        <field name="no_standard_libs" type="bool" descr="don't build against the default libraries (bootclasspath, ext, and framework for device targets)"/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <object-field name="openjdk9">
            <field name="srcs" type="string[]" descr="List of source files that should only be used when passing -source 1.9"/>
            <field name="javacflags" type="string[]" descr="List of javac flags that should only be used when passing -source 1.9"/>
        </object-field>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="patch_module" type="string" descr="When compiling language level 9+ .java code in packages that are part of a system module, patch_module names the module that your sources and dependencies should be patched into. The Android runtime currently doesn't implement the JEP 261 module system so this option is only supported at compile time. It should only be needed to compile tests in packages that exist in libcore and which are inconvenient to move elsewhere."/>
        <field name="permitted_packages" type="string[]" descr="If not empty, classes are restricted to the specified packages and their sub-packages. This restriction is checked after applying jarjar rules and including static libs."/>
        <field name="plugins" type="string[]" descr="List of modules to use as annotation processors"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <object-field name="proto">
            <field name="output_params" type="string[]" descr="List of extra options that will be passed to the proto generator."/>
            <field name="type" type="string" descr="Proto generator type.  C++: full or lite.  Java: micro, nano, stream, or lite."/>
            <field name="plugin" type="string" descr="Proto plugin to use as the generator.  Must be a cc_binary_host module."/>
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the protoc include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the bp file that will be added to the protoc include paths."/>
            <field name="canonical_path_from_root" type="bool" descr="whether to identify the proto files from the root of the source tree (the original method in Android, useful for android-specific protos), or relative from where they were specified (useful for external/third party protos). This defaults to true today, but is expected to default to false in the future."/>
        </object-field>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="services" type="string[]" descr="List of files to include in the META-INF/services folder of the resulting jar."/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="static_libs" type="blueprint[]" descr="list of java libraries that will be compiled into the resulting jar"/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
        </object-field>
        <field name="use_tools_jar" type="bool" descr="Add host jdk tools.jar to bootclasspath"/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
        <field name="wrapper" type="string" descr="installable script to execute the resulting jar"/>
    </blueprint>
    <blueprint name="java_defaults">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="list of source files used to compile the Java module.  May be .java, .logtags, .proto, or .aidl files."/>
        <field name="host_supported" type="bool" descr="If set to true, build a variant of the module for the host.  Defaults to false."/>
        <field name="device_supported" type="bool" descr="If set to true, build a variant of the module for the device.  Defaults to true."/>
        <field name="aapt_include_all_resources" type="bool" descr="include all resource configurations, not just the product-configured ones."/>
        <field name="aaptflags" type="string[]" descr="flags passed to aapt when creating the apk"/>
        <field name="aars" type="string[]"/>
        <field name="additional_certificates" type="string[]" descr="Names of extra android_app_certificate modules to sign the apk with in the form &quot;:module&quot;."/>
        <object-field name="aidl">
            <field name="include_dirs" type="string[]" descr="Top level directories to pass to aidl tool"/>
            <field name="local_include_dirs" type="string[]" descr="Directories rooted at the Android.bp file to pass to aidl tool"/>
            <field name="export_include_dirs" type="string[]" descr="directories that should be added as include directories for any aidl sources of modules that depend on this module, as well as to aidl for this module."/>
            <field name="generate_traces" type="bool" descr="whether to generate traces (for systrace) for this interface"/>
            <field name="generate_get_transaction_name" type="bool" descr="whether to generate Binder#GetTransaction name method."/>
        </object-field>
        <field name="api_packages" type="string[]" descr="list of package names that will be documented and publicized as API"/>
        <field name="api_srcs" type="string[]" descr="list of optional source files that are part of API but not part of runtime library."/>
        <field name="asset_dirs" type="string[]" descr="list of directories relative to the Blueprints file containing assets. Defaults to [&quot;assets&quot;] if a directory called assets exists.  Set to [] to disable the default."/>
        <field name="certificate" type="string" descr="The name of a certificate in the default certificate directory, blank to use the default product certificate, or an android_app_certificate module name in the form &quot;:module&quot;."/>
        <field name="compile_dex" type="bool" descr="If set to true, compile dex regardless of installable.  Defaults to false."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="core_lib" type="bool" descr="If set to true, the path of dist files is apistubs/core. Defaults to false."/>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dex_preopt">
            <field name="enabled" type="bool" descr="If false, prevent dexpreopting and stripping the dex file from the final jar.  Defaults to true."/>
            <field name="no_stripping" type="bool" descr="If true, never strip the dex files from the final jar when dexpreopting.  Defaults to false."/>
            <field name="app_image" type="bool" descr="If true, generate an app image (.art file) for this module."/>
            <field name="profile_guided" type="bool" descr="If true, use a checked-in profile to guide optimization.  Defaults to false unless a matching profile is set or a profile is found in PRODUCT_DEX_PREOPT_PROFILE_DIR that matches the name of this module, in which case it is defaulted to true."/>
            <field name="profile" type="string" descr="If set, provides the path to profile relative to the Android.bp file.  If not set, defaults to searching for a file that matches the name of this module in the default profile location set by PRODUCT_DEX_PREOPT_PROFILE_DIR, or empty if not found."/>
        </object-field>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="droiddoc_option_files" type="string[]" descr="local files that are used within user customized droiddoc options."/>
        <field name="droiddoc_options" type="string[]" descr="additional droiddoc options Available variables for substitution:"/>
        <field name="dxflags" type="string[]" descr="list of module-specific flags that will be used for dex compiles"/>
        <field name="embed_notices" type="bool" descr="If set, find and merge all NOTICE files that this module and its dependencies have and store it in the APK as an asset."/>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <object-field name="errorprone">
            <field name="javacflags" type="string[]" descr="List of javac flags that should only be used when running errorprone."/>
        </object-field>
        <field name="exclude_dirs" type="string[]" descr="List of directories to remove from the jar file(s)"/>
        <field name="exclude_files" type="string[]" descr="List of files to remove from the jar file(s)"/>
        <field name="exclude_java_resource_dirs" type="string[]" descr="list of directories that should be excluded from java_resource_dirs"/>
        <field name="exclude_java_resources" type="string[]" descr="list of files that should be excluded from java_resources and java_resource_dirs"/>
        <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the Java module. This is most useful in the arch/multilib variants to remove non-common files"/>
        <field name="export_package_resources" type="bool" descr="If set, create package-export.apk, which other packages can use to get PRODUCT-agnostic resource data like IDs and type definitions."/>
        <field name="hidden_api_packages" type="string[]" descr="list of package names that must be hidden from the API"/>
        <field name="hostdex" type="bool" descr="If true, export a copy of the module as a -hostdex module for host testing."/>
        <field name="include_srcs" type="bool" descr="If set to true, include sources used to compile the module in to the final jar"/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="installable" type="bool"/>
        <field name="instrumentation_for" type="string"/>
        <object-field name="jacoco">
            <field name="include_filter" type="string[]" descr="List of classes to include for instrumentation with jacoco to collect coverage information at runtime when building with coverage enabled.  If unset defaults to all classes. Supports '*' as the last character of an entry in the list as a wildcard match. If preceded by '.' it matches all classes in the package and subpackages, otherwise it matches classes in the package that have the class name as a prefix."/>
            <field name="exclude_filter" type="string[]" descr="List of classes to exclude from instrumentation with jacoco to collect coverage information at runtime when building with coverage enabled.  Overrides classes selected by the include_filter property. Supports '*' as the last character of an entry in the list as a wildcard match. If preceded by '.' it matches all classes in the package and subpackages, otherwise it matches classes in the package that have the class name as a prefix."/>
        </object-field>
        <field name="jarjar_rules" type="string" descr="if not blank, run jarjar using the specified rules file"/>
        <field name="jars" type="string[]"/>
        <field name="java_resource_dirs" type="string[]" descr="list of directories containing Java resources"/>
        <field name="java_resources" type="string[]" descr="list of files to use as Java resources"/>
        <field name="java_version" type="string" descr="If not blank, set the java version passed to javac as -source and -target"/>
        <field name="javac_shard_size" type="number" descr="The number of Java source entries each Javac instance can process"/>
        <field name="javacflags" type="string[]" descr="list of module-specific flags that will be used for javac compiles"/>
        <field name="jetifier" type="bool" descr="if set to true, run Jetifier against .jar file. Defaults to false."/>
        <field name="jni_libs" type="blueprint[]" descr="list of native libraries that will be provided in or alongside the resulting jar"/>
        <field name="kotlincflags" type="string[]" descr="list of module-specific flags that will be used for kotlinc compiles"/>
        <field name="libs" type="blueprint[]"/>
        <field name="manifest" type="string" descr="path to AndroidManifest.xml.  If unset, defaults to &quot;AndroidManifest.xml&quot;."/>
        <field name="merge_annotations_dirs" type="string[]" descr="a list of top-level directories containing files to merge qualifier annotations (i.e. those intended to be included in the stubs written) from."/>
        <field name="merge_inclusion_annotations_dirs" type="string[]" descr="a list of top-level directories containing Java stub files to merge show/hide annotations from."/>
        <field name="min_sdk_version" type="string"/>
        <field name="no_framework_libs" type="bool" descr="don't build against the framework libraries (ext, and framework for device targets)"/>
        <field name="no_standard_libs" type="bool" descr="don't build against the default libraries (bootclasspath, ext, and framework for device targets)"/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <object-field name="openjdk9">
            <field name="srcs" type="string[]" descr="List of source files that should only be used when passing -source 1.9"/>
            <field name="javacflags" type="string[]" descr="List of javac flags that should only be used when passing -source 1.9"/>
        </object-field>
        <object-field name="optimize">
            <field name="enabled" type="bool" descr="If false, disable all optimization.  Defaults to true for android_app and android_test modules, false for java_library and java_test modules."/>
            <field name="enabledByDefault" type="bool" descr="True if the module containing this has it set by default."/>
            <field name="shrink" type="bool" descr="If true, optimize for size by removing unused code.  Defaults to true for apps, false for libraries and tests."/>
            <field name="optimize" type="bool" descr="If true, optimize bytecode.  Defaults to false."/>
            <field name="obfuscate" type="bool" descr="If true, obfuscate bytecode.  Defaults to false."/>
            <field name="no_aapt_flags" type="bool" descr="If true, do not use the flag files generated by aapt that automatically keep classes referenced by the app manifest.  Defaults to false."/>
            <field name="proguard_flags" type="string[]" descr="Flags to pass to proguard."/>
            <field name="proguard_flags_files" type="string[]" descr="Specifies the locations of files containing proguard flags."/>
        </object-field>
        <field name="overrides" type="blueprint[]" descr="Names of modules to be overridden. Listed modules can only be other binaries (in Make or Soong). This does not completely prevent installation of the overridden binaries, but if both binaries would be installed by default (in PRODUCT_PACKAGES) the other binary will be removed from PRODUCT_PACKAGES."/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="package_name" type="string" descr="the package name of this app. The package name in the manifest file is used if one was not given."/>
        <field name="package_splits" type="string[]" descr="list of resource labels to generate individual resource packages"/>
        <field name="patch_module" type="string" descr="When compiling language level 9+ .java code in packages that are part of a system module, patch_module names the module that your sources and dependencies should be patched into. The Android runtime currently doesn't implement the JEP 261 module system so this option is only supported at compile time. It should only be needed to compile tests in packages that exist in libcore and which are inconvenient to move elsewhere."/>
        <field name="permitted_packages" type="string[]" descr="If not empty, classes are restricted to the specified packages and their sub-packages. This restriction is checked after applying jarjar rules and including static libs."/>
        <field name="platform_apis" type="bool" descr="if true, compile against the platform APIs instead of an SDK."/>
        <field name="plugins" type="string[]" descr="List of modules to use as annotation processors"/>
        <field name="privileged" type="bool" descr="Specifies that this app should be installed to the priv-app directory, where the system will grant it additional privileges not available to normal apps."/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <object-field name="proto">
            <field name="type" type="string" descr="Proto generator type.  C++: full or lite.  Java: micro, nano, stream, or lite."/>
            <field name="plugin" type="string" descr="Proto plugin to use as the generator.  Must be a cc_binary_host module."/>
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the protoc include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the bp file that will be added to the protoc include paths."/>
            <field name="canonical_path_from_root" type="bool" descr="whether to identify the proto files from the root of the source tree (the original method in Android, useful for android-specific protos), or relative from where they were specified (useful for external/third party protos). This defaults to true today, but is expected to default to false in the future."/>
            <field name="output_params" type="string[]" descr="List of extra options that will be passed to the proto generator."/>
        </object-field>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="resource_dirs" type="string[]" descr="list of directories relative to the Blueprints file containing Android resources.  Defaults to [&quot;res&quot;] if a directory called res exists. Set to [] to disable the default."/>
        <field name="resource_zips" type="string[]" descr="list of zip files containing Android resources."/>
        <field name="sdk_version" type="string"/>
        <field name="services" type="string[]" descr="List of files to include in the META-INF/services folder of the resulting jar."/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="srcs_lib" type="string" descr="the java library (in classpath) for documentation that provides java srcs and srcjars."/>
        <field name="srcs_lib_whitelist_dirs" type="string[]" descr="the base dirs under srcs_lib will be scanned for java srcs."/>
        <field name="srcs_lib_whitelist_pkgs" type="string[]" descr="the sub dirs under srcs_lib_whitelist_dirs will be scanned for java srcs. Defaults to &quot;android.annotation&quot;."/>
        <field name="static_libs" type="blueprint[]" descr="list of java libraries that will be compiled into the resulting jar"/>
        <field name="stub_only_libs" type="blueprint[]" descr="List of Java libraries that will be in the classpath when building stubs"/>
        <field name="system_modules" type="string" descr="When targeting 1.9, override the modules to use with --system"/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
            <object-field name="hostdex">
                <field name="required" type="blueprint[]" descr="Additional required dependencies to add to -hostdex modules."/>
            </object-field>
        </object-field>
        <field name="target_sdk_version" type="string" descr="if not blank, set the targetSdkVersion in the AndroidManifest.xml. Defaults to sdk_version if not set."/>
        <field name="use_embedded_dex" type="bool" descr="Store dex files uncompressed in the APK and set the android:useEmbeddedDex=&quot;true&quot; manifest attribute so that they are used from inside the APK at runtime."/>
        <field name="use_embedded_native_libs" type="bool" descr="Store native libraries uncompressed in the APK and set the android:extractNativeLibs=&quot;false&quot; manifest flag so that they are used from inside the APK at runtime.  Defaults to true for android_test modules unless sdk_version or min_sdk_version is set to a version that doesn't support it (<23), defaults to false for other module types where the native libraries are generally preinstalled outside the APK."/>
        <field name="use_tools_jar" type="bool" descr="Add host jdk tools.jar to bootclasspath"/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="java_device_for_host">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="libs" type="blueprint[]" descr="List of modules whose contents will be visible to modules that depend on this module."/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
        </object-field>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="java_genrule">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="list of input files"/>
        <field name="host_supported" type="bool" descr="If set to true, build a variant of the module for the host.  Defaults to false."/>
        <field name="device_supported" type="bool" descr="If set to true, build a variant of the module for the device.  Defaults to true."/>
        <field name="cmd" type="string" descr="The command to run on one or more input files. Cmd supports substitution of a few variables (the actual substitution is implemented in GenerateAndroidBuildActions below) Available variables for substitution: All files used must be declared as inputs (to ensure proper up-to-date checks). Use &quot;$(in)&quot; directly in Cmd to ensure that all inputs used are declared."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="depfile" type="bool" descr="Enable reading a file containing dependencies in gcc format after the command completes"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="exclude_srcs" type="string[]" descr="input files to exclude"/>
        <field name="export_include_dirs" type="string[]" descr="List of directories to export generated headers from"/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="out" type="string[]" descr="names of the output files that will be generated"/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
        </object-field>
        <field name="tool_files" type="string[]" descr="Local file that is used as the tool"/>
        <field name="tools" type="string[]" descr="name of the modules (if any) that produces the host executable.   Leave empty for prebuilts or scripts that do not need a module to build them."/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="java_genrule_host">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="list of input files"/>
        <field name="cmd" type="string" descr="The command to run on one or more input files. Cmd supports substitution of a few variables (the actual substitution is implemented in GenerateAndroidBuildActions below) Available variables for substitution: All files used must be declared as inputs (to ensure proper up-to-date checks). Use &quot;$(in)&quot; directly in Cmd to ensure that all inputs used are declared."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="depfile" type="bool" descr="Enable reading a file containing dependencies in gcc format after the command completes"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="exclude_srcs" type="string[]" descr="input files to exclude"/>
        <field name="export_include_dirs" type="string[]" descr="List of directories to export generated headers from"/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="out" type="string[]" descr="names of the output files that will be generated"/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
        </object-field>
        <field name="tool_files" type="string[]" descr="Local file that is used as the tool"/>
        <field name="tools" type="string[]" descr="name of the modules (if any) that produces the host executable.   Leave empty for prebuilts or scripts that do not need a module to build them."/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="java_host_for_device">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="libs" type="blueprint[]" descr="List of modules whose contents will be visible to modules that depend on this module."/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
        </object-field>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="java_import">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="host_supported" type="bool" descr="If set to true, build a variant of the module for the host.  Defaults to false."/>
        <field name="device_supported" type="bool" descr="If set to true, build a variant of the module for the device.  Defaults to true."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="exclude_dirs" type="string[]" descr="List of directories to remove from the jar file(s)"/>
        <field name="exclude_files" type="string[]" descr="List of files to remove from the jar file(s)"/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="installable" type="bool"/>
        <field name="jars" type="string[]"/>
        <field name="jetifier" type="bool" descr="if set to true, run Jetifier against .jar file. Defaults to false."/>
        <field name="libs" type="blueprint[]" descr="List of shared java libs that this module has dependencies to"/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="prefer" type="bool" descr="When prefer is set to true the prebuilt will be used instead of any source module with a matching name."/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="sdk_version" type="string"/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
        </object-field>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="java_import_host">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="exclude_dirs" type="string[]" descr="List of directories to remove from the jar file(s)"/>
        <field name="exclude_files" type="string[]" descr="List of files to remove from the jar file(s)"/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="installable" type="bool"/>
        <field name="jars" type="string[]"/>
        <field name="jetifier" type="bool" descr="if set to true, run Jetifier against .jar file. Defaults to false."/>
        <field name="libs" type="blueprint[]" descr="List of shared java libs that this module has dependencies to"/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="prefer" type="bool" descr="When prefer is set to true the prebuilt will be used instead of any source module with a matching name."/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="sdk_version" type="string"/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
        </object-field>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="java_library">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="list of source files used to compile the Java module.  May be .java, .logtags, .proto, or .aidl files."/>
        <field name="host_supported" type="bool" descr="If set to true, build a variant of the module for the host.  Defaults to false."/>
        <field name="device_supported" type="bool" descr="If set to true, build a variant of the module for the device.  Defaults to true."/>
        <object-field name="aidl">
            <field name="include_dirs" type="string[]" descr="Top level directories to pass to aidl tool"/>
            <field name="local_include_dirs" type="string[]" descr="Directories rooted at the Android.bp file to pass to aidl tool"/>
            <field name="export_include_dirs" type="string[]" descr="directories that should be added as include directories for any aidl sources of modules that depend on this module, as well as to aidl for this module."/>
            <field name="generate_traces" type="bool" descr="whether to generate traces (for systrace) for this interface"/>
            <field name="generate_get_transaction_name" type="bool" descr="whether to generate Binder#GetTransaction name method."/>
        </object-field>
        <field name="compile_dex" type="bool" descr="If set to true, compile dex regardless of installable.  Defaults to false."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dex_preopt">
            <field name="enabled" type="bool" descr="If false, prevent dexpreopting and stripping the dex file from the final jar.  Defaults to true."/>
            <field name="no_stripping" type="bool" descr="If true, never strip the dex files from the final jar when dexpreopting.  Defaults to false."/>
            <field name="app_image" type="bool" descr="If true, generate an app image (.art file) for this module."/>
            <field name="profile_guided" type="bool" descr="If true, use a checked-in profile to guide optimization.  Defaults to false unless a matching profile is set or a profile is found in PRODUCT_DEX_PREOPT_PROFILE_DIR that matches the name of this module, in which case it is defaulted to true."/>
            <field name="profile" type="string" descr="If set, provides the path to profile relative to the Android.bp file.  If not set, defaults to searching for a file that matches the name of this module in the default profile location set by PRODUCT_DEX_PREOPT_PROFILE_DIR, or empty if not found."/>
        </object-field>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="dxflags" type="string[]" descr="list of module-specific flags that will be used for dex compiles"/>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <object-field name="errorprone">
            <field name="javacflags" type="string[]" descr="List of javac flags that should only be used when running errorprone."/>
        </object-field>
        <field name="exclude_java_resource_dirs" type="string[]" descr="list of directories that should be excluded from java_resource_dirs"/>
        <field name="exclude_java_resources" type="string[]" descr="list of files that should be excluded from java_resources and java_resource_dirs"/>
        <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the Java module. This is most useful in the arch/multilib variants to remove non-common files"/>
        <field name="hostdex" type="bool" descr="If true, export a copy of the module as a -hostdex module for host testing."/>
        <field name="include_srcs" type="bool" descr="If set to true, include sources used to compile the module in to the final jar"/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="installable" type="bool" descr="If set to true, allow this module to be dexed and installed on devices.  Has no effect on host modules, which are always considered installable."/>
        <object-field name="jacoco">
            <field name="include_filter" type="string[]" descr="List of classes to include for instrumentation with jacoco to collect coverage information at runtime when building with coverage enabled.  If unset defaults to all classes. Supports '*' as the last character of an entry in the list as a wildcard match. If preceded by '.' it matches all classes in the package and subpackages, otherwise it matches classes in the package that have the class name as a prefix."/>
            <field name="exclude_filter" type="string[]" descr="List of classes to exclude from instrumentation with jacoco to collect coverage information at runtime when building with coverage enabled.  Overrides classes selected by the include_filter property. Supports '*' as the last character of an entry in the list as a wildcard match. If preceded by '.' it matches all classes in the package and subpackages, otherwise it matches classes in the package that have the class name as a prefix."/>
        </object-field>
        <field name="jarjar_rules" type="string" descr="if not blank, run jarjar using the specified rules file"/>
        <field name="java_resource_dirs" type="string[]" descr="list of directories containing Java resources"/>
        <field name="java_resources" type="string[]" descr="list of files to use as Java resources"/>
        <field name="java_version" type="string" descr="If not blank, set the java version passed to javac as -source and -target"/>
        <field name="javac_shard_size" type="number" descr="The number of Java source entries each Javac instance can process"/>
        <field name="javacflags" type="string[]" descr="list of module-specific flags that will be used for javac compiles"/>
        <field name="kotlincflags" type="string[]" descr="list of module-specific flags that will be used for kotlinc compiles"/>
        <field name="libs" type="blueprint[]" descr="list of of java libraries that will be in the classpath"/>
        <field name="manifest" type="string" descr="manifest file to be included in resulting jar"/>
        <field name="min_sdk_version" type="string" descr="if not blank, set the minimum version of the sdk that the compiled artifacts will run against. Defaults to sdk_version if not set."/>
        <field name="no_framework_libs" type="bool" descr="don't build against the framework libraries (ext, and framework for device targets)"/>
        <field name="no_standard_libs" type="bool" descr="don't build against the default libraries (bootclasspath, ext, and framework for device targets)"/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <object-field name="openjdk9">
            <field name="srcs" type="string[]" descr="List of source files that should only be used when passing -source 1.9"/>
            <field name="javacflags" type="string[]" descr="List of javac flags that should only be used when passing -source 1.9"/>
        </object-field>
        <object-field name="optimize">
            <field name="enabled" type="bool" descr="If false, disable all optimization.  Defaults to true for android_app and android_test modules, false for java_library and java_test modules."/>
            <field name="enabledByDefault" type="bool" descr="True if the module containing this has it set by default."/>
            <field name="shrink" type="bool" descr="If true, optimize for size by removing unused code.  Defaults to true for apps, false for libraries and tests."/>
            <field name="optimize" type="bool" descr="If true, optimize bytecode.  Defaults to false."/>
            <field name="obfuscate" type="bool" descr="If true, obfuscate bytecode.  Defaults to false."/>
            <field name="no_aapt_flags" type="bool" descr="If true, do not use the flag files generated by aapt that automatically keep classes referenced by the app manifest.  Defaults to false."/>
            <field name="proguard_flags" type="string[]" descr="Flags to pass to proguard."/>
            <field name="proguard_flags_files" type="string[]" descr="Specifies the locations of files containing proguard flags."/>
        </object-field>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="patch_module" type="string" descr="When compiling language level 9+ .java code in packages that are part of a system module, patch_module names the module that your sources and dependencies should be patched into. The Android runtime currently doesn't implement the JEP 261 module system so this option is only supported at compile time. It should only be needed to compile tests in packages that exist in libcore and which are inconvenient to move elsewhere."/>
        <field name="permitted_packages" type="string[]" descr="If not empty, classes are restricted to the specified packages and their sub-packages. This restriction is checked after applying jarjar rules and including static libs."/>
        <field name="platform_apis" type="bool" descr="if true, compile against the platform APIs instead of an SDK."/>
        <field name="plugins" type="string[]" descr="List of modules to use as annotation processors"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <object-field name="proto">
            <field name="output_params" type="string[]" descr="List of extra options that will be passed to the proto generator."/>
            <field name="type" type="string" descr="Proto generator type.  C++: full or lite.  Java: micro, nano, stream, or lite."/>
            <field name="plugin" type="string" descr="Proto plugin to use as the generator.  Must be a cc_binary_host module."/>
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the protoc include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the bp file that will be added to the protoc include paths."/>
            <field name="canonical_path_from_root" type="bool" descr="whether to identify the proto files from the root of the source tree (the original method in Android, useful for android-specific protos), or relative from where they were specified (useful for external/third party protos). This defaults to true today, but is expected to default to false in the future."/>
        </object-field>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="sdk_version" type="string" descr="if not blank, set to the version of the sdk to compile against.  Defaults to compiling against the current sdk if platform_apis is not set."/>
        <field name="services" type="string[]" descr="List of files to include in the META-INF/services folder of the resulting jar."/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="static_libs" type="blueprint[]" descr="list of java libraries that will be compiled into the resulting jar"/>
        <field name="system_modules" type="string" descr="When targeting 1.9, override the modules to use with --system"/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
            <object-field name="hostdex">
                <field name="required" type="blueprint[]" descr="Additional required dependencies to add to -hostdex modules."/>
            </object-field>
        </object-field>
        <field name="target_sdk_version" type="string" descr="if not blank, set the targetSdkVersion in the AndroidManifest.xml. Defaults to sdk_version if not set."/>
        <field name="use_tools_jar" type="bool" descr="Add host jdk tools.jar to bootclasspath"/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="java_library_host">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="list of source files used to compile the Java module.  May be .java, .logtags, .proto, or .aidl files."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <object-field name="errorprone">
            <field name="javacflags" type="string[]" descr="List of javac flags that should only be used when running errorprone."/>
        </object-field>
        <field name="exclude_java_resource_dirs" type="string[]" descr="list of directories that should be excluded from java_resource_dirs"/>
        <field name="exclude_java_resources" type="string[]" descr="list of files that should be excluded from java_resources and java_resource_dirs"/>
        <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the Java module. This is most useful in the arch/multilib variants to remove non-common files"/>
        <field name="include_srcs" type="bool" descr="If set to true, include sources used to compile the module in to the final jar"/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="installable" type="bool" descr="If set to true, allow this module to be dexed and installed on devices.  Has no effect on host modules, which are always considered installable."/>
        <object-field name="jacoco">
            <field name="include_filter" type="string[]" descr="List of classes to include for instrumentation with jacoco to collect coverage information at runtime when building with coverage enabled.  If unset defaults to all classes. Supports '*' as the last character of an entry in the list as a wildcard match. If preceded by '.' it matches all classes in the package and subpackages, otherwise it matches classes in the package that have the class name as a prefix."/>
            <field name="exclude_filter" type="string[]" descr="List of classes to exclude from instrumentation with jacoco to collect coverage information at runtime when building with coverage enabled.  Overrides classes selected by the include_filter property. Supports '*' as the last character of an entry in the list as a wildcard match. If preceded by '.' it matches all classes in the package and subpackages, otherwise it matches classes in the package that have the class name as a prefix."/>
        </object-field>
        <field name="jarjar_rules" type="string" descr="if not blank, run jarjar using the specified rules file"/>
        <field name="java_resource_dirs" type="string[]" descr="list of directories containing Java resources"/>
        <field name="java_resources" type="string[]" descr="list of files to use as Java resources"/>
        <field name="java_version" type="string" descr="If not blank, set the java version passed to javac as -source and -target"/>
        <field name="javac_shard_size" type="number" descr="The number of Java source entries each Javac instance can process"/>
        <field name="javacflags" type="string[]" descr="list of module-specific flags that will be used for javac compiles"/>
        <field name="kotlincflags" type="string[]" descr="list of module-specific flags that will be used for kotlinc compiles"/>
        <field name="libs" type="blueprint[]" descr="list of of java libraries that will be in the classpath"/>
        <field name="manifest" type="string" descr="manifest file to be included in resulting jar"/>
        <field name="no_framework_libs" type="bool" descr="don't build against the framework libraries (ext, and framework for device targets)"/>
        <field name="no_standard_libs" type="bool" descr="don't build against the default libraries (bootclasspath, ext, and framework for device targets)"/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <object-field name="openjdk9">
            <field name="srcs" type="string[]" descr="List of source files that should only be used when passing -source 1.9"/>
            <field name="javacflags" type="string[]" descr="List of javac flags that should only be used when passing -source 1.9"/>
        </object-field>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="patch_module" type="string" descr="When compiling language level 9+ .java code in packages that are part of a system module, patch_module names the module that your sources and dependencies should be patched into. The Android runtime currently doesn't implement the JEP 261 module system so this option is only supported at compile time. It should only be needed to compile tests in packages that exist in libcore and which are inconvenient to move elsewhere."/>
        <field name="permitted_packages" type="string[]" descr="If not empty, classes are restricted to the specified packages and their sub-packages. This restriction is checked after applying jarjar rules and including static libs."/>
        <field name="plugins" type="string[]" descr="List of modules to use as annotation processors"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <object-field name="proto">
            <field name="output_params" type="string[]" descr="List of extra options that will be passed to the proto generator."/>
            <field name="type" type="string" descr="Proto generator type.  C++: full or lite.  Java: micro, nano, stream, or lite."/>
            <field name="plugin" type="string" descr="Proto plugin to use as the generator.  Must be a cc_binary_host module."/>
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the protoc include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the bp file that will be added to the protoc include paths."/>
            <field name="canonical_path_from_root" type="bool" descr="whether to identify the proto files from the root of the source tree (the original method in Android, useful for android-specific protos), or relative from where they were specified (useful for external/third party protos). This defaults to true today, but is expected to default to false in the future."/>
        </object-field>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="services" type="string[]" descr="List of files to include in the META-INF/services folder of the resulting jar."/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="static_libs" type="blueprint[]" descr="list of java libraries that will be compiled into the resulting jar"/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
        </object-field>
        <field name="use_tools_jar" type="bool" descr="Add host jdk tools.jar to bootclasspath"/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="java_library_static">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="list of source files used to compile the Java module.  May be .java, .logtags, .proto, or .aidl files."/>
        <field name="host_supported" type="bool" descr="If set to true, build a variant of the module for the host.  Defaults to false."/>
        <field name="device_supported" type="bool" descr="If set to true, build a variant of the module for the device.  Defaults to true."/>
        <object-field name="aidl">
            <field name="include_dirs" type="string[]" descr="Top level directories to pass to aidl tool"/>
            <field name="local_include_dirs" type="string[]" descr="Directories rooted at the Android.bp file to pass to aidl tool"/>
            <field name="export_include_dirs" type="string[]" descr="directories that should be added as include directories for any aidl sources of modules that depend on this module, as well as to aidl for this module."/>
            <field name="generate_traces" type="bool" descr="whether to generate traces (for systrace) for this interface"/>
            <field name="generate_get_transaction_name" type="bool" descr="whether to generate Binder#GetTransaction name method."/>
        </object-field>
        <field name="compile_dex" type="bool" descr="If set to true, compile dex regardless of installable.  Defaults to false."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dex_preopt">
            <field name="enabled" type="bool" descr="If false, prevent dexpreopting and stripping the dex file from the final jar.  Defaults to true."/>
            <field name="no_stripping" type="bool" descr="If true, never strip the dex files from the final jar when dexpreopting.  Defaults to false."/>
            <field name="app_image" type="bool" descr="If true, generate an app image (.art file) for this module."/>
            <field name="profile_guided" type="bool" descr="If true, use a checked-in profile to guide optimization.  Defaults to false unless a matching profile is set or a profile is found in PRODUCT_DEX_PREOPT_PROFILE_DIR that matches the name of this module, in which case it is defaulted to true."/>
            <field name="profile" type="string" descr="If set, provides the path to profile relative to the Android.bp file.  If not set, defaults to searching for a file that matches the name of this module in the default profile location set by PRODUCT_DEX_PREOPT_PROFILE_DIR, or empty if not found."/>
        </object-field>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="dxflags" type="string[]" descr="list of module-specific flags that will be used for dex compiles"/>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <object-field name="errorprone">
            <field name="javacflags" type="string[]" descr="List of javac flags that should only be used when running errorprone."/>
        </object-field>
        <field name="exclude_java_resource_dirs" type="string[]" descr="list of directories that should be excluded from java_resource_dirs"/>
        <field name="exclude_java_resources" type="string[]" descr="list of files that should be excluded from java_resources and java_resource_dirs"/>
        <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the Java module. This is most useful in the arch/multilib variants to remove non-common files"/>
        <field name="hostdex" type="bool" descr="If true, export a copy of the module as a -hostdex module for host testing."/>
        <field name="include_srcs" type="bool" descr="If set to true, include sources used to compile the module in to the final jar"/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="installable" type="bool" descr="If set to true, allow this module to be dexed and installed on devices.  Has no effect on host modules, which are always considered installable."/>
        <object-field name="jacoco">
            <field name="include_filter" type="string[]" descr="List of classes to include for instrumentation with jacoco to collect coverage information at runtime when building with coverage enabled.  If unset defaults to all classes. Supports '*' as the last character of an entry in the list as a wildcard match. If preceded by '.' it matches all classes in the package and subpackages, otherwise it matches classes in the package that have the class name as a prefix."/>
            <field name="exclude_filter" type="string[]" descr="List of classes to exclude from instrumentation with jacoco to collect coverage information at runtime when building with coverage enabled.  Overrides classes selected by the include_filter property. Supports '*' as the last character of an entry in the list as a wildcard match. If preceded by '.' it matches all classes in the package and subpackages, otherwise it matches classes in the package that have the class name as a prefix."/>
        </object-field>
        <field name="jarjar_rules" type="string" descr="if not blank, run jarjar using the specified rules file"/>
        <field name="java_resource_dirs" type="string[]" descr="list of directories containing Java resources"/>
        <field name="java_resources" type="string[]" descr="list of files to use as Java resources"/>
        <field name="java_version" type="string" descr="If not blank, set the java version passed to javac as -source and -target"/>
        <field name="javac_shard_size" type="number" descr="The number of Java source entries each Javac instance can process"/>
        <field name="javacflags" type="string[]" descr="list of module-specific flags that will be used for javac compiles"/>
        <field name="kotlincflags" type="string[]" descr="list of module-specific flags that will be used for kotlinc compiles"/>
        <field name="libs" type="blueprint[]" descr="list of of java libraries that will be in the classpath"/>
        <field name="manifest" type="string" descr="manifest file to be included in resulting jar"/>
        <field name="min_sdk_version" type="string" descr="if not blank, set the minimum version of the sdk that the compiled artifacts will run against. Defaults to sdk_version if not set."/>
        <field name="no_framework_libs" type="bool" descr="don't build against the framework libraries (ext, and framework for device targets)"/>
        <field name="no_standard_libs" type="bool" descr="don't build against the default libraries (bootclasspath, ext, and framework for device targets)"/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <object-field name="openjdk9">
            <field name="srcs" type="string[]" descr="List of source files that should only be used when passing -source 1.9"/>
            <field name="javacflags" type="string[]" descr="List of javac flags that should only be used when passing -source 1.9"/>
        </object-field>
        <object-field name="optimize">
            <field name="enabled" type="bool" descr="If false, disable all optimization.  Defaults to true for android_app and android_test modules, false for java_library and java_test modules."/>
            <field name="enabledByDefault" type="bool" descr="True if the module containing this has it set by default."/>
            <field name="shrink" type="bool" descr="If true, optimize for size by removing unused code.  Defaults to true for apps, false for libraries and tests."/>
            <field name="optimize" type="bool" descr="If true, optimize bytecode.  Defaults to false."/>
            <field name="obfuscate" type="bool" descr="If true, obfuscate bytecode.  Defaults to false."/>
            <field name="no_aapt_flags" type="bool" descr="If true, do not use the flag files generated by aapt that automatically keep classes referenced by the app manifest.  Defaults to false."/>
            <field name="proguard_flags" type="string[]" descr="Flags to pass to proguard."/>
            <field name="proguard_flags_files" type="string[]" descr="Specifies the locations of files containing proguard flags."/>
        </object-field>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="patch_module" type="string" descr="When compiling language level 9+ .java code in packages that are part of a system module, patch_module names the module that your sources and dependencies should be patched into. The Android runtime currently doesn't implement the JEP 261 module system so this option is only supported at compile time. It should only be needed to compile tests in packages that exist in libcore and which are inconvenient to move elsewhere."/>
        <field name="permitted_packages" type="string[]" descr="If not empty, classes are restricted to the specified packages and their sub-packages. This restriction is checked after applying jarjar rules and including static libs."/>
        <field name="platform_apis" type="bool" descr="if true, compile against the platform APIs instead of an SDK."/>
        <field name="plugins" type="string[]" descr="List of modules to use as annotation processors"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <object-field name="proto">
            <field name="output_params" type="string[]" descr="List of extra options that will be passed to the proto generator."/>
            <field name="type" type="string" descr="Proto generator type.  C++: full or lite.  Java: micro, nano, stream, or lite."/>
            <field name="plugin" type="string" descr="Proto plugin to use as the generator.  Must be a cc_binary_host module."/>
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the protoc include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the bp file that will be added to the protoc include paths."/>
            <field name="canonical_path_from_root" type="bool" descr="whether to identify the proto files from the root of the source tree (the original method in Android, useful for android-specific protos), or relative from where they were specified (useful for external/third party protos). This defaults to true today, but is expected to default to false in the future."/>
        </object-field>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="sdk_version" type="string" descr="if not blank, set to the version of the sdk to compile against.  Defaults to compiling against the current sdk if platform_apis is not set."/>
        <field name="services" type="string[]" descr="List of files to include in the META-INF/services folder of the resulting jar."/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="static_libs" type="blueprint[]" descr="list of java libraries that will be compiled into the resulting jar"/>
        <field name="system_modules" type="string" descr="When targeting 1.9, override the modules to use with --system"/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
            <object-field name="hostdex">
                <field name="required" type="blueprint[]" descr="Additional required dependencies to add to -hostdex modules."/>
            </object-field>
        </object-field>
        <field name="target_sdk_version" type="string" descr="if not blank, set the targetSdkVersion in the AndroidManifest.xml. Defaults to sdk_version if not set."/>
        <field name="use_tools_jar" type="bool" descr="Add host jdk tools.jar to bootclasspath"/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="java_plugin">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="list of source files used to compile the Java module.  May be .java, .logtags, .proto, or .aidl files."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <object-field name="errorprone">
            <field name="javacflags" type="string[]" descr="List of javac flags that should only be used when running errorprone."/>
        </object-field>
        <field name="exclude_java_resource_dirs" type="string[]" descr="list of directories that should be excluded from java_resource_dirs"/>
        <field name="exclude_java_resources" type="string[]" descr="list of files that should be excluded from java_resources and java_resource_dirs"/>
        <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the Java module. This is most useful in the arch/multilib variants to remove non-common files"/>
        <field name="generates_api" type="bool" descr="If true, assume the annotation processor will generate classes that are referenced from outside the module. This necessitates disabling the turbine optimization on modules that use this plugin, which will reduce parallelism and cause more recompilation for modules that depend on modules that use this plugin."/>
        <field name="include_srcs" type="bool" descr="If set to true, include sources used to compile the module in to the final jar"/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="installable" type="bool" descr="If set to true, allow this module to be dexed and installed on devices.  Has no effect on host modules, which are always considered installable."/>
        <object-field name="jacoco">
            <field name="include_filter" type="string[]" descr="List of classes to include for instrumentation with jacoco to collect coverage information at runtime when building with coverage enabled.  If unset defaults to all classes. Supports '*' as the last character of an entry in the list as a wildcard match. If preceded by '.' it matches all classes in the package and subpackages, otherwise it matches classes in the package that have the class name as a prefix."/>
            <field name="exclude_filter" type="string[]" descr="List of classes to exclude from instrumentation with jacoco to collect coverage information at runtime when building with coverage enabled.  Overrides classes selected by the include_filter property. Supports '*' as the last character of an entry in the list as a wildcard match. If preceded by '.' it matches all classes in the package and subpackages, otherwise it matches classes in the package that have the class name as a prefix."/>
        </object-field>
        <field name="jarjar_rules" type="string" descr="if not blank, run jarjar using the specified rules file"/>
        <field name="java_resource_dirs" type="string[]" descr="list of directories containing Java resources"/>
        <field name="java_resources" type="string[]" descr="list of files to use as Java resources"/>
        <field name="java_version" type="string" descr="If not blank, set the java version passed to javac as -source and -target"/>
        <field name="javac_shard_size" type="number" descr="The number of Java source entries each Javac instance can process"/>
        <field name="javacflags" type="string[]" descr="list of module-specific flags that will be used for javac compiles"/>
        <field name="kotlincflags" type="string[]" descr="list of module-specific flags that will be used for kotlinc compiles"/>
        <field name="libs" type="blueprint[]" descr="list of of java libraries that will be in the classpath"/>
        <field name="manifest" type="string" descr="manifest file to be included in resulting jar"/>
        <field name="no_framework_libs" type="bool" descr="don't build against the framework libraries (ext, and framework for device targets)"/>
        <field name="no_standard_libs" type="bool" descr="don't build against the default libraries (bootclasspath, ext, and framework for device targets)"/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <object-field name="openjdk9">
            <field name="srcs" type="string[]" descr="List of source files that should only be used when passing -source 1.9"/>
            <field name="javacflags" type="string[]" descr="List of javac flags that should only be used when passing -source 1.9"/>
        </object-field>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="patch_module" type="string" descr="When compiling language level 9+ .java code in packages that are part of a system module, patch_module names the module that your sources and dependencies should be patched into. The Android runtime currently doesn't implement the JEP 261 module system so this option is only supported at compile time. It should only be needed to compile tests in packages that exist in libcore and which are inconvenient to move elsewhere."/>
        <field name="permitted_packages" type="string[]" descr="If not empty, classes are restricted to the specified packages and their sub-packages. This restriction is checked after applying jarjar rules and including static libs."/>
        <field name="plugins" type="string[]" descr="List of modules to use as annotation processors"/>
        <field name="processor_class" type="string" descr="The optional name of the class that javac will use to run the annotation processor."/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <object-field name="proto">
            <field name="output_params" type="string[]" descr="List of extra options that will be passed to the proto generator."/>
            <field name="type" type="string" descr="Proto generator type.  C++: full or lite.  Java: micro, nano, stream, or lite."/>
            <field name="plugin" type="string" descr="Proto plugin to use as the generator.  Must be a cc_binary_host module."/>
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the protoc include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the bp file that will be added to the protoc include paths."/>
            <field name="canonical_path_from_root" type="bool" descr="whether to identify the proto files from the root of the source tree (the original method in Android, useful for android-specific protos), or relative from where they were specified (useful for external/third party protos). This defaults to true today, but is expected to default to false in the future."/>
        </object-field>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="services" type="string[]" descr="List of files to include in the META-INF/services folder of the resulting jar."/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="static_libs" type="blueprint[]" descr="list of java libraries that will be compiled into the resulting jar"/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
        </object-field>
        <field name="use_tools_jar" type="bool" descr="Add host jdk tools.jar to bootclasspath"/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="java_sdk_library">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="list of source files used to compile the Java module.  May be .java, .logtags, .proto, or .aidl files."/>
        <field name="host_supported" type="bool" descr="If set to true, build a variant of the module for the host.  Defaults to false."/>
        <field name="device_supported" type="bool" descr="If set to true, build a variant of the module for the device.  Defaults to true."/>
        <object-field name="aidl">
            <field name="include_dirs" type="string[]" descr="Top level directories to pass to aidl tool"/>
            <field name="local_include_dirs" type="string[]" descr="Directories rooted at the Android.bp file to pass to aidl tool"/>
            <field name="export_include_dirs" type="string[]" descr="directories that should be added as include directories for any aidl sources of modules that depend on this module, as well as to aidl for this module."/>
            <field name="generate_traces" type="bool" descr="whether to generate traces (for systrace) for this interface"/>
            <field name="generate_get_transaction_name" type="bool" descr="whether to generate Binder#GetTransaction name method."/>
        </object-field>
        <field name="api_packages" type="string[]" descr="list of package names that will be documented and publicized as API"/>
        <field name="api_srcs" type="string[]" descr="list of optional source files that are part of API but not part of runtime library."/>
        <field name="compile_dex" type="bool" descr="If set to true, compile dex regardless of installable.  Defaults to false."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="core_lib" type="bool" descr="If set to true, the path of dist files is apistubs/core. Defaults to false."/>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dex_preopt">
            <field name="enabled" type="bool" descr="If false, prevent dexpreopting and stripping the dex file from the final jar.  Defaults to true."/>
            <field name="no_stripping" type="bool" descr="If true, never strip the dex files from the final jar when dexpreopting.  Defaults to false."/>
            <field name="app_image" type="bool" descr="If true, generate an app image (.art file) for this module."/>
            <field name="profile_guided" type="bool" descr="If true, use a checked-in profile to guide optimization.  Defaults to false unless a matching profile is set or a profile is found in PRODUCT_DEX_PREOPT_PROFILE_DIR that matches the name of this module, in which case it is defaulted to true."/>
            <field name="profile" type="string" descr="If set, provides the path to profile relative to the Android.bp file.  If not set, defaults to searching for a file that matches the name of this module in the default profile location set by PRODUCT_DEX_PREOPT_PROFILE_DIR, or empty if not found."/>
        </object-field>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="droiddoc_option_files" type="string[]" descr="local files that are used within user customized droiddoc options."/>
        <field name="droiddoc_options" type="string[]" descr="additional droiddoc options Available variables for substitution:"/>
        <field name="dxflags" type="string[]" descr="list of module-specific flags that will be used for dex compiles"/>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <object-field name="errorprone">
            <field name="javacflags" type="string[]" descr="List of javac flags that should only be used when running errorprone."/>
        </object-field>
        <field name="exclude_java_resource_dirs" type="string[]" descr="list of directories that should be excluded from java_resource_dirs"/>
        <field name="exclude_java_resources" type="string[]" descr="list of files that should be excluded from java_resources and java_resource_dirs"/>
        <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the Java module. This is most useful in the arch/multilib variants to remove non-common files"/>
        <field name="hidden_api_packages" type="string[]" descr="list of package names that must be hidden from the API"/>
        <field name="hostdex" type="bool" descr="If true, export a copy of the module as a -hostdex module for host testing."/>
        <field name="include_srcs" type="bool" descr="If set to true, include sources used to compile the module in to the final jar"/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="installable" type="bool" descr="If set to true, allow this module to be dexed and installed on devices.  Has no effect on host modules, which are always considered installable."/>
        <object-field name="jacoco">
            <field name="include_filter" type="string[]" descr="List of classes to include for instrumentation with jacoco to collect coverage information at runtime when building with coverage enabled.  If unset defaults to all classes. Supports '*' as the last character of an entry in the list as a wildcard match. If preceded by '.' it matches all classes in the package and subpackages, otherwise it matches classes in the package that have the class name as a prefix."/>
            <field name="exclude_filter" type="string[]" descr="List of classes to exclude from instrumentation with jacoco to collect coverage information at runtime when building with coverage enabled.  Overrides classes selected by the include_filter property. Supports '*' as the last character of an entry in the list as a wildcard match. If preceded by '.' it matches all classes in the package and subpackages, otherwise it matches classes in the package that have the class name as a prefix."/>
        </object-field>
        <field name="jarjar_rules" type="string" descr="if not blank, run jarjar using the specified rules file"/>
        <field name="java_resource_dirs" type="string[]" descr="list of directories containing Java resources"/>
        <field name="java_resources" type="string[]" descr="list of files to use as Java resources"/>
        <field name="java_version" type="string" descr="If not blank, set the java version passed to javac as -source and -target"/>
        <field name="javac_shard_size" type="number" descr="The number of Java source entries each Javac instance can process"/>
        <field name="javacflags" type="string[]" descr="list of module-specific flags that will be used for javac compiles"/>
        <field name="kotlincflags" type="string[]" descr="list of module-specific flags that will be used for kotlinc compiles"/>
        <field name="libs" type="blueprint[]" descr="list of of java libraries that will be in the classpath"/>
        <field name="manifest" type="string" descr="manifest file to be included in resulting jar"/>
        <field name="merge_annotations_dirs" type="string[]" descr="a list of top-level directories containing files to merge qualifier annotations (i.e. those intended to be included in the stubs written) from."/>
        <field name="merge_inclusion_annotations_dirs" type="string[]" descr="a list of top-level directories containing Java stub files to merge show/hide annotations from."/>
        <field name="min_sdk_version" type="string" descr="if not blank, set the minimum version of the sdk that the compiled artifacts will run against. Defaults to sdk_version if not set."/>
        <field name="no_framework_libs" type="bool" descr="don't build against the framework libraries (ext, and framework for device targets)"/>
        <field name="no_standard_libs" type="bool" descr="don't build against the default libraries (bootclasspath, ext, and framework for device targets)"/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <object-field name="openjdk9">
            <field name="srcs" type="string[]" descr="List of source files that should only be used when passing -source 1.9"/>
            <field name="javacflags" type="string[]" descr="List of javac flags that should only be used when passing -source 1.9"/>
        </object-field>
        <object-field name="optimize">
            <field name="enabled" type="bool" descr="If false, disable all optimization.  Defaults to true for android_app and android_test modules, false for java_library and java_test modules."/>
            <field name="enabledByDefault" type="bool" descr="True if the module containing this has it set by default."/>
            <field name="shrink" type="bool" descr="If true, optimize for size by removing unused code.  Defaults to true for apps, false for libraries and tests."/>
            <field name="optimize" type="bool" descr="If true, optimize bytecode.  Defaults to false."/>
            <field name="obfuscate" type="bool" descr="If true, obfuscate bytecode.  Defaults to false."/>
            <field name="no_aapt_flags" type="bool" descr="If true, do not use the flag files generated by aapt that automatically keep classes referenced by the app manifest.  Defaults to false."/>
            <field name="proguard_flags" type="string[]" descr="Flags to pass to proguard."/>
            <field name="proguard_flags_files" type="string[]" descr="Specifies the locations of files containing proguard flags."/>
        </object-field>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="patch_module" type="string" descr="When compiling language level 9+ .java code in packages that are part of a system module, patch_module names the module that your sources and dependencies should be patched into. The Android runtime currently doesn't implement the JEP 261 module system so this option is only supported at compile time. It should only be needed to compile tests in packages that exist in libcore and which are inconvenient to move elsewhere."/>
        <field name="permitted_packages" type="string[]" descr="If not empty, classes are restricted to the specified packages and their sub-packages. This restriction is checked after applying jarjar rules and including static libs."/>
        <field name="platform_apis" type="bool" descr="if true, compile against the platform APIs instead of an SDK."/>
        <field name="plugins" type="string[]" descr="List of modules to use as annotation processors"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <object-field name="proto">
            <field name="output_params" type="string[]" descr="List of extra options that will be passed to the proto generator."/>
            <field name="type" type="string" descr="Proto generator type.  C++: full or lite.  Java: micro, nano, stream, or lite."/>
            <field name="plugin" type="string" descr="Proto plugin to use as the generator.  Must be a cc_binary_host module."/>
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the protoc include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the bp file that will be added to the protoc include paths."/>
            <field name="canonical_path_from_root" type="bool" descr="whether to identify the proto files from the root of the source tree (the original method in Android, useful for android-specific protos), or relative from where they were specified (useful for external/third party protos). This defaults to true today, but is expected to default to false in the future."/>
        </object-field>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="sdk_version" type="string" descr="if not blank, set to the version of the sdk to compile against.  Defaults to compiling against the current sdk if platform_apis is not set."/>
        <field name="services" type="string[]" descr="List of files to include in the META-INF/services folder of the resulting jar."/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="srcs_lib" type="string" descr="the java library (in classpath) for documentation that provides java srcs and srcjars."/>
        <field name="srcs_lib_whitelist_dirs" type="string[]" descr="the base dirs under srcs_lib will be scanned for java srcs."/>
        <field name="srcs_lib_whitelist_pkgs" type="string[]" descr="the sub dirs under srcs_lib_whitelist_dirs will be scanned for java srcs. Defaults to &quot;android.annotation&quot;."/>
        <field name="static_libs" type="blueprint[]" descr="list of java libraries that will be compiled into the resulting jar"/>
        <field name="stub_only_libs" type="blueprint[]" descr="List of Java libraries that will be in the classpath when building stubs"/>
        <field name="system_modules" type="string" descr="When targeting 1.9, override the modules to use with --system"/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
            <object-field name="hostdex">
                <field name="required" type="blueprint[]" descr="Additional required dependencies to add to -hostdex modules."/>
            </object-field>
        </object-field>
        <field name="target_sdk_version" type="string" descr="if not blank, set the targetSdkVersion in the AndroidManifest.xml. Defaults to sdk_version if not set."/>
        <field name="use_tools_jar" type="bool" descr="Add host jdk tools.jar to bootclasspath"/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="java_system_modules">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="host_supported" type="bool" descr="If set to true, build a variant of the module for the host.  Defaults to false."/>
        <field name="device_supported" type="bool" descr="If set to true, build a variant of the module for the device.  Defaults to true."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="jars" type="string[]" descr="List of prebuilt jars that should be included in the system modules"/>
        <field name="libs" type="blueprint[]" descr="List of java library modules that should be included in the system modules"/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="sdk_version" type="string" descr="Sdk version that should be included in the system modules"/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
        </object-field>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="java_test">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="list of source files used to compile the Java module.  May be .java, .logtags, .proto, or .aidl files."/>
        <field name="host_supported" type="bool" descr="If set to true, build a variant of the module for the host.  Defaults to false."/>
        <field name="device_supported" type="bool" descr="If set to true, build a variant of the module for the device.  Defaults to true."/>
        <object-field name="aidl">
            <field name="include_dirs" type="string[]" descr="Top level directories to pass to aidl tool"/>
            <field name="local_include_dirs" type="string[]" descr="Directories rooted at the Android.bp file to pass to aidl tool"/>
            <field name="export_include_dirs" type="string[]" descr="directories that should be added as include directories for any aidl sources of modules that depend on this module, as well as to aidl for this module."/>
            <field name="generate_traces" type="bool" descr="whether to generate traces (for systrace) for this interface"/>
            <field name="generate_get_transaction_name" type="bool" descr="whether to generate Binder#GetTransaction name method."/>
        </object-field>
        <field name="compile_dex" type="bool" descr="If set to true, compile dex regardless of installable.  Defaults to false."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="data" type="string[]" descr="list of files or filegroup modules that provide data that should be installed alongside the test"/>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dex_preopt">
            <field name="enabled" type="bool" descr="If false, prevent dexpreopting and stripping the dex file from the final jar.  Defaults to true."/>
            <field name="no_stripping" type="bool" descr="If true, never strip the dex files from the final jar when dexpreopting.  Defaults to false."/>
            <field name="app_image" type="bool" descr="If true, generate an app image (.art file) for this module."/>
            <field name="profile_guided" type="bool" descr="If true, use a checked-in profile to guide optimization.  Defaults to false unless a matching profile is set or a profile is found in PRODUCT_DEX_PREOPT_PROFILE_DIR that matches the name of this module, in which case it is defaulted to true."/>
            <field name="profile" type="string" descr="If set, provides the path to profile relative to the Android.bp file.  If not set, defaults to searching for a file that matches the name of this module in the default profile location set by PRODUCT_DEX_PREOPT_PROFILE_DIR, or empty if not found."/>
        </object-field>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="dxflags" type="string[]" descr="list of module-specific flags that will be used for dex compiles"/>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <object-field name="errorprone">
            <field name="javacflags" type="string[]" descr="List of javac flags that should only be used when running errorprone."/>
        </object-field>
        <field name="exclude_java_resource_dirs" type="string[]" descr="list of directories that should be excluded from java_resource_dirs"/>
        <field name="exclude_java_resources" type="string[]" descr="list of files that should be excluded from java_resources and java_resource_dirs"/>
        <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the Java module. This is most useful in the arch/multilib variants to remove non-common files"/>
        <field name="hostdex" type="bool" descr="If true, export a copy of the module as a -hostdex module for host testing."/>
        <field name="include_srcs" type="bool" descr="If set to true, include sources used to compile the module in to the final jar"/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="installable" type="bool" descr="If set to true, allow this module to be dexed and installed on devices.  Has no effect on host modules, which are always considered installable."/>
        <object-field name="jacoco">
            <field name="include_filter" type="string[]" descr="List of classes to include for instrumentation with jacoco to collect coverage information at runtime when building with coverage enabled.  If unset defaults to all classes. Supports '*' as the last character of an entry in the list as a wildcard match. If preceded by '.' it matches all classes in the package and subpackages, otherwise it matches classes in the package that have the class name as a prefix."/>
            <field name="exclude_filter" type="string[]" descr="List of classes to exclude from instrumentation with jacoco to collect coverage information at runtime when building with coverage enabled.  Overrides classes selected by the include_filter property. Supports '*' as the last character of an entry in the list as a wildcard match. If preceded by '.' it matches all classes in the package and subpackages, otherwise it matches classes in the package that have the class name as a prefix."/>
        </object-field>
        <field name="jarjar_rules" type="string" descr="if not blank, run jarjar using the specified rules file"/>
        <field name="java_resource_dirs" type="string[]" descr="list of directories containing Java resources"/>
        <field name="java_resources" type="string[]" descr="list of files to use as Java resources"/>
        <field name="java_version" type="string" descr="If not blank, set the java version passed to javac as -source and -target"/>
        <field name="javac_shard_size" type="number" descr="The number of Java source entries each Javac instance can process"/>
        <field name="javacflags" type="string[]" descr="list of module-specific flags that will be used for javac compiles"/>
        <field name="kotlincflags" type="string[]" descr="list of module-specific flags that will be used for kotlinc compiles"/>
        <field name="libs" type="blueprint[]" descr="list of of java libraries that will be in the classpath"/>
        <field name="manifest" type="string" descr="manifest file to be included in resulting jar"/>
        <field name="min_sdk_version" type="string" descr="if not blank, set the minimum version of the sdk that the compiled artifacts will run against. Defaults to sdk_version if not set."/>
        <field name="no_framework_libs" type="bool" descr="don't build against the framework libraries (ext, and framework for device targets)"/>
        <field name="no_standard_libs" type="bool" descr="don't build against the default libraries (bootclasspath, ext, and framework for device targets)"/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <object-field name="openjdk9">
            <field name="srcs" type="string[]" descr="List of source files that should only be used when passing -source 1.9"/>
            <field name="javacflags" type="string[]" descr="List of javac flags that should only be used when passing -source 1.9"/>
        </object-field>
        <object-field name="optimize">
            <field name="enabled" type="bool" descr="If false, disable all optimization.  Defaults to true for android_app and android_test modules, false for java_library and java_test modules."/>
            <field name="enabledByDefault" type="bool" descr="True if the module containing this has it set by default."/>
            <field name="shrink" type="bool" descr="If true, optimize for size by removing unused code.  Defaults to true for apps, false for libraries and tests."/>
            <field name="optimize" type="bool" descr="If true, optimize bytecode.  Defaults to false."/>
            <field name="obfuscate" type="bool" descr="If true, obfuscate bytecode.  Defaults to false."/>
            <field name="no_aapt_flags" type="bool" descr="If true, do not use the flag files generated by aapt that automatically keep classes referenced by the app manifest.  Defaults to false."/>
            <field name="proguard_flags" type="string[]" descr="Flags to pass to proguard."/>
            <field name="proguard_flags_files" type="string[]" descr="Specifies the locations of files containing proguard flags."/>
        </object-field>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="patch_module" type="string" descr="When compiling language level 9+ .java code in packages that are part of a system module, patch_module names the module that your sources and dependencies should be patched into. The Android runtime currently doesn't implement the JEP 261 module system so this option is only supported at compile time. It should only be needed to compile tests in packages that exist in libcore and which are inconvenient to move elsewhere."/>
        <field name="permitted_packages" type="string[]" descr="If not empty, classes are restricted to the specified packages and their sub-packages. This restriction is checked after applying jarjar rules and including static libs."/>
        <field name="platform_apis" type="bool" descr="if true, compile against the platform APIs instead of an SDK."/>
        <field name="plugins" type="string[]" descr="List of modules to use as annotation processors"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <object-field name="proto">
            <field name="type" type="string" descr="Proto generator type.  C++: full or lite.  Java: micro, nano, stream, or lite."/>
            <field name="plugin" type="string" descr="Proto plugin to use as the generator.  Must be a cc_binary_host module."/>
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the protoc include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the bp file that will be added to the protoc include paths."/>
            <field name="canonical_path_from_root" type="bool" descr="whether to identify the proto files from the root of the source tree (the original method in Android, useful for android-specific protos), or relative from where they were specified (useful for external/third party protos). This defaults to true today, but is expected to default to false in the future."/>
            <field name="output_params" type="string[]" descr="List of extra options that will be passed to the proto generator."/>
        </object-field>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="sdk_version" type="string" descr="if not blank, set to the version of the sdk to compile against.  Defaults to compiling against the current sdk if platform_apis is not set."/>
        <field name="services" type="string[]" descr="List of files to include in the META-INF/services folder of the resulting jar."/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="static_libs" type="blueprint[]" descr="list of java libraries that will be compiled into the resulting jar"/>
        <field name="system_modules" type="string" descr="When targeting 1.9, override the modules to use with --system"/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
            <object-field name="hostdex">
                <field name="required" type="blueprint[]" descr="Additional required dependencies to add to -hostdex modules."/>
            </object-field>
        </object-field>
        <field name="target_sdk_version" type="string" descr="if not blank, set the targetSdkVersion in the AndroidManifest.xml. Defaults to sdk_version if not set."/>
        <field name="test_config" type="string" descr="the name of the test configuration (for example &quot;AndroidTest.xml&quot;) that should be installed with the module."/>
        <field name="test_config_template" type="string" descr="the name of the test configuration template (for example &quot;AndroidTestTemplate.xml&quot;) that should be installed with the module."/>
        <field name="test_suites" type="string[]" descr="list of compatibility suites (for example &quot;cts&quot;, &quot;vts&quot;) that the module should be installed into."/>
        <field name="use_tools_jar" type="bool" descr="Add host jdk tools.jar to bootclasspath"/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="java_test_helper_library">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="list of source files used to compile the Java module.  May be .java, .logtags, .proto, or .aidl files."/>
        <field name="host_supported" type="bool" descr="If set to true, build a variant of the module for the host.  Defaults to false."/>
        <field name="device_supported" type="bool" descr="If set to true, build a variant of the module for the device.  Defaults to true."/>
        <object-field name="aidl">
            <field name="include_dirs" type="string[]" descr="Top level directories to pass to aidl tool"/>
            <field name="local_include_dirs" type="string[]" descr="Directories rooted at the Android.bp file to pass to aidl tool"/>
            <field name="export_include_dirs" type="string[]" descr="directories that should be added as include directories for any aidl sources of modules that depend on this module, as well as to aidl for this module."/>
            <field name="generate_traces" type="bool" descr="whether to generate traces (for systrace) for this interface"/>
            <field name="generate_get_transaction_name" type="bool" descr="whether to generate Binder#GetTransaction name method."/>
        </object-field>
        <field name="compile_dex" type="bool" descr="If set to true, compile dex regardless of installable.  Defaults to false."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dex_preopt">
            <field name="enabled" type="bool" descr="If false, prevent dexpreopting and stripping the dex file from the final jar.  Defaults to true."/>
            <field name="no_stripping" type="bool" descr="If true, never strip the dex files from the final jar when dexpreopting.  Defaults to false."/>
            <field name="app_image" type="bool" descr="If true, generate an app image (.art file) for this module."/>
            <field name="profile_guided" type="bool" descr="If true, use a checked-in profile to guide optimization.  Defaults to false unless a matching profile is set or a profile is found in PRODUCT_DEX_PREOPT_PROFILE_DIR that matches the name of this module, in which case it is defaulted to true."/>
            <field name="profile" type="string" descr="If set, provides the path to profile relative to the Android.bp file.  If not set, defaults to searching for a file that matches the name of this module in the default profile location set by PRODUCT_DEX_PREOPT_PROFILE_DIR, or empty if not found."/>
        </object-field>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="dxflags" type="string[]" descr="list of module-specific flags that will be used for dex compiles"/>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <object-field name="errorprone">
            <field name="javacflags" type="string[]" descr="List of javac flags that should only be used when running errorprone."/>
        </object-field>
        <field name="exclude_java_resource_dirs" type="string[]" descr="list of directories that should be excluded from java_resource_dirs"/>
        <field name="exclude_java_resources" type="string[]" descr="list of files that should be excluded from java_resources and java_resource_dirs"/>
        <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the Java module. This is most useful in the arch/multilib variants to remove non-common files"/>
        <field name="hostdex" type="bool" descr="If true, export a copy of the module as a -hostdex module for host testing."/>
        <field name="include_srcs" type="bool" descr="If set to true, include sources used to compile the module in to the final jar"/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="installable" type="bool" descr="If set to true, allow this module to be dexed and installed on devices.  Has no effect on host modules, which are always considered installable."/>
        <object-field name="jacoco">
            <field name="include_filter" type="string[]" descr="List of classes to include for instrumentation with jacoco to collect coverage information at runtime when building with coverage enabled.  If unset defaults to all classes. Supports '*' as the last character of an entry in the list as a wildcard match. If preceded by '.' it matches all classes in the package and subpackages, otherwise it matches classes in the package that have the class name as a prefix."/>
            <field name="exclude_filter" type="string[]" descr="List of classes to exclude from instrumentation with jacoco to collect coverage information at runtime when building with coverage enabled.  Overrides classes selected by the include_filter property. Supports '*' as the last character of an entry in the list as a wildcard match. If preceded by '.' it matches all classes in the package and subpackages, otherwise it matches classes in the package that have the class name as a prefix."/>
        </object-field>
        <field name="jarjar_rules" type="string" descr="if not blank, run jarjar using the specified rules file"/>
        <field name="java_resource_dirs" type="string[]" descr="list of directories containing Java resources"/>
        <field name="java_resources" type="string[]" descr="list of files to use as Java resources"/>
        <field name="java_version" type="string" descr="If not blank, set the java version passed to javac as -source and -target"/>
        <field name="javac_shard_size" type="number" descr="The number of Java source entries each Javac instance can process"/>
        <field name="javacflags" type="string[]" descr="list of module-specific flags that will be used for javac compiles"/>
        <field name="kotlincflags" type="string[]" descr="list of module-specific flags that will be used for kotlinc compiles"/>
        <field name="libs" type="blueprint[]" descr="list of of java libraries that will be in the classpath"/>
        <field name="manifest" type="string" descr="manifest file to be included in resulting jar"/>
        <field name="min_sdk_version" type="string" descr="if not blank, set the minimum version of the sdk that the compiled artifacts will run against. Defaults to sdk_version if not set."/>
        <field name="no_framework_libs" type="bool" descr="don't build against the framework libraries (ext, and framework for device targets)"/>
        <field name="no_standard_libs" type="bool" descr="don't build against the default libraries (bootclasspath, ext, and framework for device targets)"/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <object-field name="openjdk9">
            <field name="srcs" type="string[]" descr="List of source files that should only be used when passing -source 1.9"/>
            <field name="javacflags" type="string[]" descr="List of javac flags that should only be used when passing -source 1.9"/>
        </object-field>
        <object-field name="optimize">
            <field name="enabled" type="bool" descr="If false, disable all optimization.  Defaults to true for android_app and android_test modules, false for java_library and java_test modules."/>
            <field name="enabledByDefault" type="bool" descr="True if the module containing this has it set by default."/>
            <field name="shrink" type="bool" descr="If true, optimize for size by removing unused code.  Defaults to true for apps, false for libraries and tests."/>
            <field name="optimize" type="bool" descr="If true, optimize bytecode.  Defaults to false."/>
            <field name="obfuscate" type="bool" descr="If true, obfuscate bytecode.  Defaults to false."/>
            <field name="no_aapt_flags" type="bool" descr="If true, do not use the flag files generated by aapt that automatically keep classes referenced by the app manifest.  Defaults to false."/>
            <field name="proguard_flags" type="string[]" descr="Flags to pass to proguard."/>
            <field name="proguard_flags_files" type="string[]" descr="Specifies the locations of files containing proguard flags."/>
        </object-field>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="patch_module" type="string" descr="When compiling language level 9+ .java code in packages that are part of a system module, patch_module names the module that your sources and dependencies should be patched into. The Android runtime currently doesn't implement the JEP 261 module system so this option is only supported at compile time. It should only be needed to compile tests in packages that exist in libcore and which are inconvenient to move elsewhere."/>
        <field name="permitted_packages" type="string[]" descr="If not empty, classes are restricted to the specified packages and their sub-packages. This restriction is checked after applying jarjar rules and including static libs."/>
        <field name="platform_apis" type="bool" descr="if true, compile against the platform APIs instead of an SDK."/>
        <field name="plugins" type="string[]" descr="List of modules to use as annotation processors"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <object-field name="proto">
            <field name="output_params" type="string[]" descr="List of extra options that will be passed to the proto generator."/>
            <field name="type" type="string" descr="Proto generator type.  C++: full or lite.  Java: micro, nano, stream, or lite."/>
            <field name="plugin" type="string" descr="Proto plugin to use as the generator.  Must be a cc_binary_host module."/>
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the protoc include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the bp file that will be added to the protoc include paths."/>
            <field name="canonical_path_from_root" type="bool" descr="whether to identify the proto files from the root of the source tree (the original method in Android, useful for android-specific protos), or relative from where they were specified (useful for external/third party protos). This defaults to true today, but is expected to default to false in the future."/>
        </object-field>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="sdk_version" type="string" descr="if not blank, set to the version of the sdk to compile against.  Defaults to compiling against the current sdk if platform_apis is not set."/>
        <field name="services" type="string[]" descr="List of files to include in the META-INF/services folder of the resulting jar."/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="static_libs" type="blueprint[]" descr="list of java libraries that will be compiled into the resulting jar"/>
        <field name="system_modules" type="string" descr="When targeting 1.9, override the modules to use with --system"/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
            <object-field name="hostdex">
                <field name="required" type="blueprint[]" descr="Additional required dependencies to add to -hostdex modules."/>
            </object-field>
        </object-field>
        <field name="target_sdk_version" type="string" descr="if not blank, set the targetSdkVersion in the AndroidManifest.xml. Defaults to sdk_version if not set."/>
        <field name="test_suites" type="string[]" descr="list of compatibility suites (for example &quot;cts&quot;, &quot;vts&quot;) that the module should be installed into."/>
        <field name="use_tools_jar" type="bool" descr="Add host jdk tools.jar to bootclasspath"/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="java_test_host">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="list of source files used to compile the Java module.  May be .java, .logtags, .proto, or .aidl files."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="data" type="string[]" descr="list of files or filegroup modules that provide data that should be installed alongside the test"/>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <object-field name="errorprone">
            <field name="javacflags" type="string[]" descr="List of javac flags that should only be used when running errorprone."/>
        </object-field>
        <field name="exclude_java_resource_dirs" type="string[]" descr="list of directories that should be excluded from java_resource_dirs"/>
        <field name="exclude_java_resources" type="string[]" descr="list of files that should be excluded from java_resources and java_resource_dirs"/>
        <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the Java module. This is most useful in the arch/multilib variants to remove non-common files"/>
        <field name="include_srcs" type="bool" descr="If set to true, include sources used to compile the module in to the final jar"/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="installable" type="bool" descr="If set to true, allow this module to be dexed and installed on devices.  Has no effect on host modules, which are always considered installable."/>
        <object-field name="jacoco">
            <field name="include_filter" type="string[]" descr="List of classes to include for instrumentation with jacoco to collect coverage information at runtime when building with coverage enabled.  If unset defaults to all classes. Supports '*' as the last character of an entry in the list as a wildcard match. If preceded by '.' it matches all classes in the package and subpackages, otherwise it matches classes in the package that have the class name as a prefix."/>
            <field name="exclude_filter" type="string[]" descr="List of classes to exclude from instrumentation with jacoco to collect coverage information at runtime when building with coverage enabled.  Overrides classes selected by the include_filter property. Supports '*' as the last character of an entry in the list as a wildcard match. If preceded by '.' it matches all classes in the package and subpackages, otherwise it matches classes in the package that have the class name as a prefix."/>
        </object-field>
        <field name="jarjar_rules" type="string" descr="if not blank, run jarjar using the specified rules file"/>
        <field name="java_resource_dirs" type="string[]" descr="list of directories containing Java resources"/>
        <field name="java_resources" type="string[]" descr="list of files to use as Java resources"/>
        <field name="java_version" type="string" descr="If not blank, set the java version passed to javac as -source and -target"/>
        <field name="javac_shard_size" type="number" descr="The number of Java source entries each Javac instance can process"/>
        <field name="javacflags" type="string[]" descr="list of module-specific flags that will be used for javac compiles"/>
        <field name="kotlincflags" type="string[]" descr="list of module-specific flags that will be used for kotlinc compiles"/>
        <field name="libs" type="blueprint[]" descr="list of of java libraries that will be in the classpath"/>
        <field name="manifest" type="string" descr="manifest file to be included in resulting jar"/>
        <field name="no_framework_libs" type="bool" descr="don't build against the framework libraries (ext, and framework for device targets)"/>
        <field name="no_standard_libs" type="bool" descr="don't build against the default libraries (bootclasspath, ext, and framework for device targets)"/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <object-field name="openjdk9">
            <field name="srcs" type="string[]" descr="List of source files that should only be used when passing -source 1.9"/>
            <field name="javacflags" type="string[]" descr="List of javac flags that should only be used when passing -source 1.9"/>
        </object-field>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="patch_module" type="string" descr="When compiling language level 9+ .java code in packages that are part of a system module, patch_module names the module that your sources and dependencies should be patched into. The Android runtime currently doesn't implement the JEP 261 module system so this option is only supported at compile time. It should only be needed to compile tests in packages that exist in libcore and which are inconvenient to move elsewhere."/>
        <field name="permitted_packages" type="string[]" descr="If not empty, classes are restricted to the specified packages and their sub-packages. This restriction is checked after applying jarjar rules and including static libs."/>
        <field name="plugins" type="string[]" descr="List of modules to use as annotation processors"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <object-field name="proto">
            <field name="type" type="string" descr="Proto generator type.  C++: full or lite.  Java: micro, nano, stream, or lite."/>
            <field name="plugin" type="string" descr="Proto plugin to use as the generator.  Must be a cc_binary_host module."/>
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the protoc include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the bp file that will be added to the protoc include paths."/>
            <field name="canonical_path_from_root" type="bool" descr="whether to identify the proto files from the root of the source tree (the original method in Android, useful for android-specific protos), or relative from where they were specified (useful for external/third party protos). This defaults to true today, but is expected to default to false in the future."/>
            <field name="output_params" type="string[]" descr="List of extra options that will be passed to the proto generator."/>
        </object-field>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="services" type="string[]" descr="List of files to include in the META-INF/services folder of the resulting jar."/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="static_libs" type="blueprint[]" descr="list of java libraries that will be compiled into the resulting jar"/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
        </object-field>
        <field name="test_config" type="string" descr="the name of the test configuration (for example &quot;AndroidTest.xml&quot;) that should be installed with the module."/>
        <field name="test_config_template" type="string" descr="the name of the test configuration template (for example &quot;AndroidTestTemplate.xml&quot;) that should be installed with the module."/>
        <field name="test_suites" type="string[]" descr="list of compatibility suites (for example &quot;cts&quot;, &quot;vts&quot;) that the module should be installed into."/>
        <field name="use_tools_jar" type="bool" descr="Add host jdk tools.jar to bootclasspath"/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="javadoc">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="list of source files used to compile the Java module.  May be .java, .logtags, .proto, or .aidl files."/>
        <field name="host_supported" type="bool" descr="If set to true, build a variant of the module for the host.  Defaults to false."/>
        <field name="device_supported" type="bool" descr="If set to true, build a variant of the module for the device.  Defaults to true."/>
        <object-field name="aidl">
            <field name="include_dirs" type="string[]" descr="Top level directories to pass to aidl tool"/>
            <field name="local_include_dirs" type="string[]" descr="Directories rooted at the Android.bp file to pass to aidl tool"/>
        </object-field>
        <field name="arg_files" type="string[]" descr="local files that are used within user customized droiddoc options."/>
        <field name="args" type="string" descr="user customized droiddoc args. Available variables for substitution:"/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the Java module. This is most useful in the arch/multilib variants to remove non-common files filegroup or genrule can be included within this property."/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="installable" type="bool" descr="If set to false, don't allow this module(-docs.zip) to be exported. Defaults to true."/>
        <field name="java_version" type="string" descr="If not blank, set the java version passed to javadoc as -source"/>
        <field name="libs" type="blueprint[]" descr="list of java libraries that will be in the classpath."/>
        <field name="local_sourcepaths" type="string[]" descr="list of directories rooted at the Android.bp file that will be added to the search paths for finding source files when passing package names."/>
        <field name="no_framework_libs" type="bool" descr="don't build against the framework libraries (ext, and framework for device targets)"/>
        <field name="no_standard_libs" type="bool" descr="don't build against the default libraries (bootclasspath, ext, and framework for device targets)"/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="out" type="string[]" descr="names of the output files used in args that will be generated"/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="sdk_version" type="string" descr="if not blank, set to the version of the sdk to compile against"/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="srcs_lib" type="string" descr="the java library (in classpath) for documentation that provides java srcs and srcjars."/>
        <field name="srcs_lib_whitelist_dirs" type="string[]" descr="the base dirs under srcs_lib will be scanned for java srcs."/>
        <field name="srcs_lib_whitelist_pkgs" type="string[]" descr="the sub dirs under srcs_lib_whitelist_dirs will be scanned for java srcs."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
        </object-field>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="javadoc_host">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="list of source files used to compile the Java module.  May be .java, .logtags, .proto, or .aidl files."/>
        <object-field name="aidl">
            <field name="include_dirs" type="string[]" descr="Top level directories to pass to aidl tool"/>
            <field name="local_include_dirs" type="string[]" descr="Directories rooted at the Android.bp file to pass to aidl tool"/>
        </object-field>
        <field name="arg_files" type="string[]" descr="local files that are used within user customized droiddoc options."/>
        <field name="args" type="string" descr="user customized droiddoc args. Available variables for substitution:"/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the Java module. This is most useful in the arch/multilib variants to remove non-common files filegroup or genrule can be included within this property."/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="installable" type="bool" descr="If set to false, don't allow this module(-docs.zip) to be exported. Defaults to true."/>
        <field name="java_version" type="string" descr="If not blank, set the java version passed to javadoc as -source"/>
        <field name="libs" type="blueprint[]" descr="list of java libraries that will be in the classpath."/>
        <field name="local_sourcepaths" type="string[]" descr="list of directories rooted at the Android.bp file that will be added to the search paths for finding source files when passing package names."/>
        <field name="no_framework_libs" type="bool" descr="don't build against the framework libraries (ext, and framework for device targets)"/>
        <field name="no_standard_libs" type="bool" descr="don't build against the default libraries (bootclasspath, ext, and framework for device targets)"/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="out" type="string[]" descr="names of the output files used in args that will be generated"/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="sdk_version" type="string" descr="if not blank, set to the version of the sdk to compile against"/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="srcs_lib" type="string" descr="the java library (in classpath) for documentation that provides java srcs and srcjars."/>
        <field name="srcs_lib_whitelist_dirs" type="string[]" descr="the base dirs under srcs_lib will be scanned for java srcs."/>
        <field name="srcs_lib_whitelist_pkgs" type="string[]" descr="the sub dirs under srcs_lib_whitelist_dirs will be scanned for java srcs."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
        </object-field>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="override_android_app">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="base" type="string" descr="Name of the base module to be overridden"/>
        <field name="certificate" type="string" descr="The name of a certificate in the default certificate directory, blank to use the default product certificate, or an android_app_certificate module name in the form &quot;:module&quot;."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="package_name" type="string" descr="the package name of this app. The package name in the manifest file is used if one was not given."/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
        </object-field>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="prebuilt_apis">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="api_dirs" type="string[]" descr="list of api version directories"/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
        </object-field>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="stubs_defaults">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="list of source files used to compile the Java module.  May be .java, .logtags, .proto, or .aidl files."/>
        <field name="host_supported" type="bool" descr="If set to true, build a variant of the module for the host.  Defaults to false."/>
        <field name="device_supported" type="bool" descr="If set to true, build a variant of the module for the device.  Defaults to true."/>
        <object-field name="aidl">
            <field name="include_dirs" type="string[]" descr="Top level directories to pass to aidl tool"/>
            <field name="local_include_dirs" type="string[]" descr="Directories rooted at the Android.bp file to pass to aidl tool"/>
        </object-field>
        <field name="annotations_enabled" type="bool" descr="is set to true, Metalava will allow framework SDK to contain annotations."/>
        <field name="api_filename" type="string" descr="the generated public API filename by Metalava."/>
        <field name="api_levels_annotations_dirs" type="string[]" descr="the dirs which Metalava extracts API levels annotations from."/>
        <field name="api_levels_annotations_enabled" type="bool" descr="is set to true, Metalava will allow framework SDK to contain API levels annotations."/>
        <field name="api_tag_name" type="string" descr="the tag name used to distinguish if the API files belong to public/system/test."/>
        <field name="arg_files" type="string[]" descr="local files that are used within user customized droiddoc options."/>
        <field name="args" type="string" descr="user customized droiddoc args. Available variables for substitution:"/>
        <object-field name="check_api">
            <field name="last_released" type="string"/>
            <field name="current" type="string"/>
            <field name="ignore_missing_latest_api" type="bool" descr="do not perform API check against Last_released, in the case that both two specified API files by Last_released are modules which don't exist."/>
        </object-field>
        <field name="check_nullability_warnings" type="string" descr="a file containing expected warnings produced by validation of nullability annotations."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="create_doc_stubs" type="bool" descr="if set to true, allow Metalava to generate doc_stubs source files. Defaults to false."/>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <field name="dex_api_filename" type="string" descr="the generated public Dex API filename by Metalava."/>
        <field name="dex_mapping_filename" type="string" descr="mapping of dex signatures to source file and line number. This is a temporary property and will be deleted; you probably shouldn't be using it."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="exact_api_filename" type="string" descr="the generated exact API filename by Metalava."/>
        <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the Java module. This is most useful in the arch/multilib variants to remove non-common files filegroup or genrule can be included within this property."/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="installable" type="bool" descr="If set to false, don't allow this module(-docs.zip) to be exported. Defaults to true."/>
        <field name="java_version" type="string" descr="If not blank, set the java version passed to javadoc as -source"/>
        <field name="jdiff_enabled" type="bool" descr="If set to true, .xml based public API file will be also generated, and JDiff tool will be invoked to genreate javadoc files. Defaults to false."/>
        <field name="libs" type="blueprint[]" descr="list of java libraries that will be in the classpath."/>
        <field name="local_sourcepaths" type="string[]" descr="list of directories rooted at the Android.bp file that will be added to the search paths for finding source files when passing package names."/>
        <field name="merge_annotations_dirs" type="string[]" descr="a list of top-level directories containing files to merge qualifier annotations (i.e. those intended to be included in the stubs written) from."/>
        <field name="merge_inclusion_annotations_dirs" type="string[]" descr="a list of top-level directories containing Java stub files to merge show/hide annotations from."/>
        <field name="no_framework_libs" type="bool" descr="don't build against the framework libraries (ext, and framework for device targets)"/>
        <field name="no_standard_libs" type="bool" descr="don't build against the default libraries (bootclasspath, ext, and framework for device targets)"/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="out" type="string[]" descr="names of the output files used in args that will be generated"/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="previous_api" type="string" descr="user can specify the version of previous released API file in order to do compatibility check."/>
        <field name="private_api_filename" type="string" descr="the generated private API filename by Metalava."/>
        <field name="private_dex_api_filename" type="string" descr="the generated private Dex API filename by Metalava."/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proguard_filename" type="string" descr="the generated proguard filename by Metalava."/>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="removed_api_filename" type="string" descr="the generated removed API filename by Metalava."/>
        <field name="removed_dex_api_filename" type="string" descr="the generated removed Dex API filename by Metalava."/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="sdk_version" type="string" descr="if not blank, set to the version of the sdk to compile against"/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="srcs_lib" type="string" descr="the java library (in classpath) for documentation that provides java srcs and srcjars."/>
        <field name="srcs_lib_whitelist_dirs" type="string[]" descr="the base dirs under srcs_lib will be scanned for java srcs."/>
        <field name="srcs_lib_whitelist_pkgs" type="string[]" descr="the sub dirs under srcs_lib_whitelist_dirs will be scanned for java srcs."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
        </object-field>
        <field name="validate_nullability_from_list" type="string" descr="a file containing a list of classes to do nullability validation for."/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
        <field name="write_sdk_values" type="bool" descr="if set to true, collect the values used by the Dev tools and write them in files packaged with the SDK. Defaults to false."/>
    </blueprint>
    <blueprint name="aidl_interface">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="List of .aidl files which compose this interface. These may be globbed."/>
        <field name="api_dir" type="string" descr="Directory where API dumps are. Default is &quot;api&quot;."/>
        <object-field name="backend">
            <object-field name="cpp">
                <field name="enabled" type="bool" descr="Whether to generate C++ code using C++ binder APIs Default: true"/>
                <field name="gen_log" type="bool" descr="Whether to generate additional code for gathering information about the transactions Default: false"/>
            </object-field>
            <object-field name="java">
                <field name="enabled" type="bool" descr="Whether to generate Java code using Java binder APIs Default: true"/>
                <field name="sdk_version" type="string" descr="Set to the version of the sdk to compile against Default: system_current"/>
            </object-field>
            <object-field name="ndk">
                <field name="enabled" type="bool" descr="Whether to generate C++ code using NDK binder APIs Default: true"/>
                <field name="gen_log" type="bool" descr="Whether to generate additional code for gathering information about the transactions Default: false"/>
            </object-field>
        </object-field>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="imports" type="string[]"/>
        <field name="include_dirs" type="string[]" descr="Top level directories for includes. TODO(b/128940869): remove it if aidl_interface can depend on framework.aidl"/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="local_include_dir" type="string" descr="Relative path for includes. By default assumes AIDL path is relative to current directory. TODO(b/111117220): automatically compute by letting AIDL parse multiple files simultaneously"/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
        </object-field>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vendor_available" type="bool" descr="Whether the library can be installed on the vendor image."/>
        <field name="versions" type="string[]" descr="Previous API versions that are now frozen. The version that is last in the list is considered as the most recent version."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="aidl_mapping">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="Source file of this prebuilt."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="output" type="string"/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
        </object-field>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="fluoride_defaults_qti">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="list of source files used to compile the C/C++ module.  May be .c, .cpp, or .S files. srcs may reference the outputs of other modules that produce source files like genrule or filegroup using the syntax &quot;:module&quot;."/>
        <field name="host_supported" type="bool" descr="If set to true, build a variant of the module for the host.  Defaults to false."/>
        <field name="device_supported" type="bool" descr="If set to true, build a variant of the module for the device.  Defaults to true."/>
        <object-field name="aidl">
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the aidl include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the aidl include paths."/>
            <field name="generate_traces" type="bool" descr="whether to generate traces (for systrace) for this interface"/>
            <field name="export_aidl_headers" type="bool" descr="export headers generated from .aidl sources"/>
        </object-field>
        <field name="allow_undefined_symbols" type="bool" descr="allow the module to contain undefined symbols.  By default, modules cannot contain undefined symbols that are not satisified by their immediate dependencies.  Set this flag to true to remove --no-undefined from the linker flags. This flag should only be necessary for compiling low-level libraries like libc."/>
        <field name="asflags" type="string[]" descr="list of module-specific flags that will be used for .S compiles"/>
        <field name="bootstrap" type="bool" descr="Allows this module to use non-APEX version of libraries. Useful for building binaries that are started before APEXes are activated."/>
        <field name="c_std" type="string" descr="C standard version to use. Can be a specific version (such as &quot;gnu11&quot;), &quot;experimental&quot; (which will use draft versions like C1x when available), or the empty string (which will use the default)."/>
        <field name="cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles."/>
        <field name="clang" type="bool" descr="Deprecated. true is the default, false is invalid."/>
        <field name="clang_asflags" type="string[]" descr="list of module-specific flags that will be used for .S compiles when compiling with clang"/>
        <field name="clang_cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles when compiling with clang"/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="conlyflags" type="string[]" descr="list of module-specific flags that will be used for C compiles"/>
        <field name="cpp_std" type="string" descr="C++ standard version to use. Can be a specific version (such as &quot;gnu++11&quot;), &quot;experimental&quot; (which will use draft versions like C++1z when available), or the empty string (which will use the default)."/>
        <field name="cppflags" type="string[]" descr="list of module-specific flags that will be used for C++ compiles"/>
        <field name="data" type="string[]" descr="list of files or filegroup modules that provide data that should be installed alongside the test"/>
        <object-field name="debug" descr="release">
            <field name="cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles in debug or release builds"/>
        </object-field>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="double_loadable" type="bool" descr="whether this module is capable of being loaded with other instance (possibly an older version) of the same module in the same process. Currently, a shared library that is a member of VNDK (vndk: {enabled: true}) can be double loaded in a vendor process if the library is also a (direct and indirect) dependency of an LLNDK library. Such libraries must be explicitly marked as `double_loadable: true` by the owner, or the dependency from the LLNDK lib should be cut if the lib is not designed to be double loaded."/>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the C/C++ module. This is most useful in the arch/multilib variants to remove non-common files"/>
        <field name="export_generated_headers" type="blueprint[]" descr="list of generated headers to re-export include directories from. Entries must be present in generated_headers."/>
        <field name="export_header_lib_headers" type="blueprint[]" descr="list of header libraries to re-export include directories from. Entries must be present in header_libs."/>
        <field name="export_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the include path (using -I) for this module and any module that links against this module.  Directories listed in export_include_dirs do not need to be listed in local_include_dirs."/>
        <field name="export_shared_lib_headers" type="blueprint[]" descr="list of shared libraries to re-export include directories from. Entries must be present in shared_libs."/>
        <field name="export_static_lib_headers" type="blueprint[]" descr="list of static libraries to re-export include directories from. Entries must be present in static_libs."/>
        <field name="force_symbols_not_weak_list" type="string" descr="local file name to pass to the linker as -force_symbols_not_weak_list"/>
        <field name="force_symbols_weak_list" type="string" descr="local file name to pass to the linker as -force_symbols_weak_list"/>
        <field name="generated_headers" type="blueprint[]" descr="list of generated headers to add to the include path. These are the names of genrule modules."/>
        <field name="generated_sources" type="blueprint[]" descr="list of generated sources to compile. These are the names of gensrcs or genrule modules."/>
        <field name="gnu_extensions" type="bool" descr="if set to false, use -std=c++* instead of -std=gnu++*"/>
        <field name="group_static_libs" type="bool" descr="group static libraries.  This can resolve missing symbols issues with interdependencies between static libraries, but it is generally better to order them correctly instead."/>
        <field name="gtest" type="bool" descr="if set, build against the gtest library. Defaults to true."/>
        <object-field name="header_abi_checker">
            <field name="symbol_file" type="string" descr="Path to a symbol file that specifies the symbols to be included in the generated ABI dump file"/>
            <field name="exclude_symbol_versions" type="string[]" descr="Symbol versions that should be ignored from the symbol file"/>
            <field name="exclude_symbol_tags" type="string[]" descr="Symbol tags that should be ignored from the symbol file"/>
        </object-field>
        <field name="header_libs" type="blueprint[]" descr="list of modules that should only provide headers for this module."/>
        <field name="host_ldlibs" type="string[]" descr="-l arguments to pass to linker for host-provided shared libraries"/>
        <field name="include_build_directory" type="bool" descr="Add the directory containing the Android.bp file to the list of include directories. Defaults to true."/>
        <field name="include_dirs" type="string[]" descr="list of directories relative to the root of the source tree that will be added to the include path using -I. If possible, don't use this.  If adding paths from the current directory use local_include_dirs, if adding paths from other modules use export_include_dirs in that module."/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="instruction_set" type="string" descr="the instruction set architecture to use to compile the C/C++ module."/>
        <field name="isolated" type="bool" descr="if set, use the isolated gtest runner. Defaults to false."/>
        <field name="ldflags" type="string[]" descr="list of module-specific flags that will be used for all link steps"/>
        <field name="local_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the include path using -I"/>
        <field name="logtags" type="string[]" descr="*.logtags files, to combine together in order to generate the /system/etc/event-log-tags file"/>
        <object-field name="lto">
            <field name="never" type="bool"/>
            <field name="full" type="bool"/>
            <field name="thin" type="bool"/>
        </object-field>
        <field name="native_coverage" type="bool"/>
        <field name="no_libcrt" type="bool" descr="don't link in libclang_rt.builtins-*.a"/>
        <field name="no_libgcc" type="bool" descr="don't link in libgcc.a"/>
        <field name="no_named_install_directory" type="bool" descr="Disables the creation of a test-specific directory when used with relative_install_path. Useful if several tests need to be in the same directory, but test_per_src doesn't work."/>
        <field name="nocrt" type="bool" descr="don't link in crt_begin and crt_end.  This flag should only be necessary for compiling crt or libc."/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="openmp" type="bool" descr="Build and link with OpenMP"/>
        <field name="overrides" type="blueprint[]" descr="Names of modules to be overridden. Listed modules can only be other shared libraries (in Make or Soong). This does not completely prevent installation of the overridden libraries, but if both binaries would be installed by default (in PRODUCT_PACKAGES) the other library will be removed from PRODUCT_PACKAGES."/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="pack_relocations" type="bool" descr="Generate compact dynamic relocation table, default true."/>
        <object-field name="pgo">
            <field name="instrumentation" type="bool"/>
            <field name="sampling" type="bool"/>
            <field name="profile_file" type="string"/>
            <field name="benchmarks" type="string[]"/>
            <field name="enable_profile_use" type="bool"/>
            <field name="cflags" type="string[]" descr="Additional compiler flags to use when building this module for profiling (either instrumentation or sampling)."/>
        </object-field>
        <field name="prefix_symbols" type="string" descr="if set, add an extra objcopy --prefix-symbols= step"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <object-field name="proto">
            <field name="export_proto_headers" type="bool" descr="export headers generated from .proto sources"/>
            <field name="static" type="bool" descr="Link statically against the protobuf runtime"/>
            <field name="type" type="string" descr="Proto generator type.  C++: full or lite.  Java: micro, nano, stream, or lite."/>
            <field name="plugin" type="string" descr="Proto plugin to use as the generator.  Must be a cc_binary_host module."/>
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the protoc include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the bp file that will be added to the protoc include paths."/>
            <field name="canonical_path_from_root" type="bool" descr="whether to identify the proto files from the root of the source tree (the original method in Android, useful for android-specific protos), or relative from where they were specified (useful for external/third party protos). This defaults to true today, but is expected to default to false in the future."/>
        </object-field>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="recovery_available" type="bool" descr="Make this module available when building for recovery"/>
        <field name="reexportedIncludeFlags" type="string[]"/>
        <field name="relative_install_path" type="string" descr="install to a subdirectory of the default install path for the module"/>
        <object-field name="renderscript">
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the llvm-rs-cc include paths"/>
            <field name="flags" type="string[]" descr="list of flags that will be passed to llvm-rs-cc"/>
            <field name="target_api" type="string" descr="Renderscript API level to target"/>
        </object-field>
        <field name="require_root" type="bool" descr="Add RootTargetPreparer to auto generated test config. This guarantees the test to run with root permission."/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="rtti" type="bool" descr="pass -frtti instead of -fno-rtti"/>
        <field name="runtime_libs" type="blueprint[]" descr="list of modules that should be installed with this module.  This is similar to 'required' but '.vendor' suffix will be appended to the module names if the shared libraries have vendor variants and this module uses VNDK."/>
        <object-field name="sanitize">
            <field name="never" type="bool"/>
            <field name="address" type="bool" descr="main sanitizers"/>
            <field name="thread" type="bool"/>
            <field name="hwaddress" type="bool"/>
            <field name="undefined" type="bool" descr="local sanitizers"/>
            <field name="all_undefined" type="bool"/>
            <field name="misc_undefined" type="string[]"/>
            <field name="coverage" type="bool"/>
            <field name="safestack" type="bool"/>
            <field name="cfi" type="bool"/>
            <field name="integer_overflow" type="bool"/>
            <field name="scudo" type="bool"/>
            <field name="scs" type="bool"/>
            <object-field name="diag">
                <field name="undefined" type="bool"/>
                <field name="cfi" type="bool"/>
                <field name="integer_overflow" type="bool"/>
                <field name="misc_undefined" type="string[]"/>
                <field name="no_recover" type="string[]"/>
            </object-field>
            <field name="recover" type="string[]" descr="value to pass to -fsanitize-recover="/>
            <field name="blacklist" type="string" descr="value to pass to -fsanitize-blacklist"/>
        </object-field>
        <field name="sdclang" type="bool" descr="compile module with SDLLVM instead of AOSP LLVM"/>
        <field name="sdk_version" type="string" descr="Minimum sdk version supported when compiling against the ndk"/>
        <field name="shared" type="string[]"/>
        <field name="shared_libs" type="blueprint[]" descr="list of modules that should be dynamically linked into this module."/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="static" type="string[]"/>
        <field name="static_executable" type="bool" descr="compile executable with -static"/>
        <field name="static_libs" type="blueprint[]" descr="list of modules that should be statically linked into this module."/>
        <field name="static_ndk_lib" type="bool"/>
        <field name="stem" type="string" descr="set the name of the output"/>
        <field name="stl" type="string" descr="Select the STL library to use.  Possible values are &quot;libc++&quot;, &quot;libc++_static&quot;, &quot;libstdc++&quot;, or &quot;none&quot;. Leave blank to select the default."/>
        <object-field name="strip">
            <field name="none" type="bool"/>
            <field name="all" type="bool"/>
            <field name="keep_symbols" type="bool"/>
            <field name="keep_symbols_list" type="string[]"/>
            <field name="use_gnu_strip" type="bool"/>
        </object-field>
        <object-field name="stubs">
            <field name="symbol_file" type="string" descr="Relative path to the symbol map. The symbol map provides the list of symbols that are exported for stubs variant of this library."/>
            <field name="versions" type="string[]" descr="List versions to generate stubs libs for."/>
        </object-field>
        <field name="suffix" type="string" descr="append to the name of the output"/>
        <field name="symbol_ordering_file" type="string" descr="Local file name to pass to the linker as --symbol-ordering-file"/>
        <field name="symlink_preferred_arch" type="bool" descr="if set, install a symlink to the preferred architecture"/>
        <field name="symlinks" type="string[]" descr="install symlinks to the binary.  Symlink names will have the suffix and the binary extension (if any) appended"/>
        <field name="system_shared_libs" type="blueprint[]" descr="list of system libraries that will be dynamically linked to shared library and executable modules.  If unset, generally defaults to libc, libm, and libdl.  Set to [] to prevent linking against the defaults."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
            <object-field name="recovery">
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="srcs" type="string[]" descr="list of source files that should only be used in the recovery variant of the C/C++ module."/>
                <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="cflags" type="string[]" descr="List of additional cflags that should be used to build the recovery variant of the C/C++ module."/>
            </object-field>
            <object-field name="vendor">
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_runtime_libs" type="blueprint[]" descr="list of runtime libs that should not be installed along with the vendor variant of the C/C++ module."/>
                <field name="version_script" type="string" descr="version script for this vendor variant"/>
                <field name="override_export_include_dirs" type="string[]" descr="list of exported include directories, like export_include_dirs, that will be applied to the vendor variant of this library. This will overwrite any other declarations."/>
                <field name="srcs" type="string[]" descr="list of source files that should only be used in the vendor variant of the C/C++ module."/>
                <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="cflags" type="string[]" descr="List of additional cflags that should be used to build the vendor variant of the C/C++ module."/>
            </object-field>
        </object-field>
        <field name="test_config" type="string" descr="the name of the test configuration (for example &quot;AndroidTest.xml&quot;) that should be installed with the module."/>
        <field name="test_config_template" type="string" descr="the name of the test configuration template (for example &quot;AndroidTestTemplate.xml&quot;) that should be installed with the module."/>
        <field name="test_options" type="string[]" descr="Test options."/>
        <field name="test_per_src" type="bool" descr="Create a separate binary for each source file.  Useful when there is global state that can not be torn down and reset between each test suite."/>
        <field name="test_suites" type="string[]" descr="list of compatibility suites (for example &quot;cts&quot;, &quot;vts&quot;) that the module should be installed into."/>
        <field name="tidy" type="bool" descr="whether to run clang-tidy over C-like sources."/>
        <field name="tidy_checks" type="string[]" descr="Extra checks to enable or disable in clang-tidy"/>
        <field name="tidy_checks_as_errors" type="string[]" descr="Checks that should be treated as errors."/>
        <field name="tidy_flags" type="string[]" descr="Extra flags to pass to clang-tidy"/>
        <field name="unexported_symbols_list" type="string" descr="local file name to pass to the linker as -unexported_symbols_list"/>
        <field name="unique_host_soname" type="bool" descr="rename host libraries to prevent overlap with system installed libraries"/>
        <field name="use_clang_lld" type="bool" descr="Use clang lld instead of gnu ld."/>
        <field name="use_version_lib" type="bool" descr="make android::build:GetBuildNumber() available containing the build ID."/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vendor_available" type="bool" descr="whether this module should be allowed to be directly depended by other modules with `vendor: true`, `proprietary: true`, or `vendor_available:true`. If set to true, two variants will be built separately, one like normal, and the other limited to the set of libraries and headers that are exposed to /vendor modules. The vendor variant may be used with a different (newer) /system, so it shouldn't have any unversioned runtime dependencies, or make assumptions about the system that may not be true in the future. If set to false, this module becomes inaccessible from /vendor modules. Default value is true when vndk: {enabled: true} or vendor: true. Nothing happens if BOARD_VNDK_VERSION isn't set in the BoardConfig.mk"/>
        <field name="version_script" type="string" descr="local file name to pass to the linker as --version_script"/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
        <object-field name="vndk">
            <field name="enabled" type="bool" descr="declared as a VNDK or VNDK-SP module. The vendor variant will be installed in /system instead of /vendor partition. `vendor_vailable` must be explicitly set to either true or false together with `vndk: {enabled: true}`."/>
            <field name="support_system_process" type="bool" descr="declared as a VNDK-SP module, which is a subset of VNDK. `vndk: { enabled: true }` must set together. All these modules are allowed to link to VNDK-SP or LL-NDK modules only. Other dependency will cause link-type errors. If `support_system_process` is not set or set to false, the module is VNDK-core and can link to other VNDK-core, VNDK-SP or LL-NDK modules only."/>
            <field name="extends" type="string" descr="Extending another module"/>
        </object-field>
        <field name="whole_static_libs" type="blueprint[]" descr="list of modules whose object files should be linked into this module in their entirety.  For static library modules, all of the .o files from the intermediate directory of the dependency will be linked into this modules .a file.  For a shared library, the dependency's .a file will be linked into this module using -Wl,--whole-archive."/>
        <field name="xom" type="bool"/>
        <field name="yaccflags" type="string[]" descr="list of module-specific flags that will be used for .y and .yy compiles"/>
    </blueprint>
    <blueprint name="generate_mojom_headers">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="list of input files"/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="flags" type="string" descr="Additional flags to pass to the bindings generation script"/>
        <field name="includes" type="string[]" descr="list of include paths"/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="pickles" type="string[]" descr="list of pickles modules that will be imported"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="srcjar" type="string" descr="name of the output .srcjar"/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
        </object-field>
        <field name="templates" type="string" descr="name of the templates module"/>
        <field name="typemaps" type="string[]" descr="list of typemaps modules that will be imported"/>
        <field name="use_once_callback" type="bool" descr="If true, set --use_once_callback flag to the generator. This works only on C++ generation."/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="generate_mojom_pickles">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="list of input files"/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
        </object-field>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="generate_mojom_srcjar">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="list of input files"/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="flags" type="string" descr="Additional flags to pass to the bindings generation script"/>
        <field name="includes" type="string[]" descr="list of include paths"/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="pickles" type="string[]" descr="list of pickles modules that will be imported"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="srcjar" type="string" descr="name of the output .srcjar"/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
        </object-field>
        <field name="templates" type="string" descr="name of the templates module"/>
        <field name="typemaps" type="string[]" descr="list of typemaps modules that will be imported"/>
        <field name="use_once_callback" type="bool" descr="If true, set --use_once_callback flag to the generator. This works only on C++ generation."/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="generate_mojom_srcs">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="list of input files"/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="flags" type="string" descr="Additional flags to pass to the bindings generation script"/>
        <field name="includes" type="string[]" descr="list of include paths"/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="pickles" type="string[]" descr="list of pickles modules that will be imported"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="srcjar" type="string" descr="name of the output .srcjar"/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
        </object-field>
        <field name="templates" type="string" descr="name of the templates module"/>
        <field name="typemaps" type="string[]" descr="list of typemaps modules that will be imported"/>
        <field name="use_once_callback" type="bool" descr="If true, set --use_once_callback flag to the generator. This works only on C++ generation."/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="wayland_protocol_codegen">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="The list of protocol files to process."/>
        <field name="cmd" type="string" descr="This string gives the command line template to run on each protocol file to wayland_protocol_codegen. The string can contain one or more &quot;$&quot; prefixed variable names for values that can vary. At a minimum you need to use ${location}, ${out} and ${in}"/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="prefix" type="string" descr="The string to prepend to every protcol filename to generate the corresponding output filename. The empty string by default."/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="suffix" type="string" descr="The suffix to append to every protocol filename to generate the corresponding output filename. The empty string by default."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
        </object-field>
        <field name="tool_files" type="string[]" descr="Local files that are used for code generation. Can be scripts to run, but should also include any other files that the code generation step should depend on that might be used by the code gen tool."/>
        <field name="tools" type="string[]" descr="The names of any built host executables to use for code generation. Can be left empty if a local script is used instead (specified in tool_files)."/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="blueprint_go_binary">
    </blueprint>
    <blueprint name="bootstrap_go_binary">
    </blueprint>
    <blueprint name="bootstrap_go_package">
    </blueprint>
    <blueprint name="prebuilt_etc_xml">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="src" type="string" descr="Source file of this prebuilt."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="filename" type="string" descr="optional name for the installed file. If unspecified, name of the module is used as the file name"/>
        <field name="filename_from_src" type="bool" descr="when set to true, and filename property is not set, the name for the installed file is the same as the file name of the source file."/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="installable" type="bool" descr="Whether this module is directly installable to one of the partitions. Default: true."/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="recovery_available" type="bool" descr="Make this module available when building for recovery."/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="schema" type="string" descr="Optional DTD that will be used to validate the xml file."/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="sub_dir" type="string" descr="optional subdirectory under which this file is installed into"/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
        </object-field>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="clang_binary_host">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="list of source files used to compile the C/C++ module.  May be .c, .cpp, or .S files. srcs may reference the outputs of other modules that produce source files like genrule or filegroup using the syntax &quot;:module&quot;."/>
        <object-field name="aidl">
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the aidl include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the aidl include paths."/>
            <field name="generate_traces" type="bool" descr="whether to generate traces (for systrace) for this interface"/>
        </object-field>
        <field name="allow_undefined_symbols" type="bool" descr="allow the module to contain undefined symbols.  By default, modules cannot contain undefined symbols that are not satisified by their immediate dependencies.  Set this flag to true to remove --no-undefined from the linker flags. This flag should only be necessary for compiling low-level libraries like libc."/>
        <field name="asflags" type="string[]" descr="list of module-specific flags that will be used for .S compiles"/>
        <field name="bootstrap" type="bool" descr="Allows this module to use non-APEX version of libraries. Useful for building binaries that are started before APEXes are activated."/>
        <field name="c_std" type="string" descr="C standard version to use. Can be a specific version (such as &quot;gnu11&quot;), &quot;experimental&quot; (which will use draft versions like C1x when available), or the empty string (which will use the default)."/>
        <field name="cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles."/>
        <field name="clang" type="bool" descr="Deprecated. true is the default, false is invalid."/>
        <field name="clang_asflags" type="string[]" descr="list of module-specific flags that will be used for .S compiles when compiling with clang"/>
        <field name="clang_cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles when compiling with clang"/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="conlyflags" type="string[]" descr="list of module-specific flags that will be used for C compiles"/>
        <field name="cpp_std" type="string" descr="C++ standard version to use. Can be a specific version (such as &quot;gnu++11&quot;), &quot;experimental&quot; (which will use draft versions like C++1z when available), or the empty string (which will use the default)."/>
        <field name="cppflags" type="string[]" descr="list of module-specific flags that will be used for C++ compiles"/>
        <object-field name="debug" descr="release">
            <field name="cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles in debug or release builds"/>
        </object-field>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="double_loadable" type="bool" descr="whether this module is capable of being loaded with other instance (possibly an older version) of the same module in the same process. Currently, a shared library that is a member of VNDK (vndk: {enabled: true}) can be double loaded in a vendor process if the library is also a (direct and indirect) dependency of an LLNDK library. Such libraries must be explicitly marked as `double_loadable: true` by the owner, or the dependency from the LLNDK lib should be cut if the lib is not designed to be double loaded."/>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the C/C++ module. This is most useful in the arch/multilib variants to remove non-common files"/>
        <field name="export_generated_headers" type="blueprint[]" descr="list of generated headers to re-export include directories from. Entries must be present in generated_headers."/>
        <field name="export_header_lib_headers" type="blueprint[]" descr="list of header libraries to re-export include directories from. Entries must be present in header_libs."/>
        <field name="export_shared_lib_headers" type="blueprint[]" descr="list of shared libraries to re-export include directories from. Entries must be present in shared_libs."/>
        <field name="export_static_lib_headers" type="blueprint[]" descr="list of static libraries to re-export include directories from. Entries must be present in static_libs."/>
        <field name="generated_headers" type="blueprint[]" descr="list of generated headers to add to the include path. These are the names of genrule modules."/>
        <field name="generated_sources" type="blueprint[]" descr="list of generated sources to compile. These are the names of gensrcs or genrule modules."/>
        <field name="gnu_extensions" type="bool" descr="if set to false, use -std=c++* instead of -std=gnu++*"/>
        <field name="group_static_libs" type="bool" descr="group static libraries.  This can resolve missing symbols issues with interdependencies between static libraries, but it is generally better to order them correctly instead."/>
        <field name="header_libs" type="blueprint[]" descr="list of modules that should only provide headers for this module."/>
        <field name="host_ldlibs" type="string[]" descr="-l arguments to pass to linker for host-provided shared libraries"/>
        <field name="include_build_directory" type="bool" descr="Add the directory containing the Android.bp file to the list of include directories. Defaults to true."/>
        <field name="include_dirs" type="string[]" descr="list of directories relative to the root of the source tree that will be added to the include path using -I. If possible, don't use this.  If adding paths from the current directory use local_include_dirs, if adding paths from other modules use export_include_dirs in that module."/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="instruction_set" type="string" descr="the instruction set architecture to use to compile the C/C++ module."/>
        <field name="ldflags" type="string[]" descr="list of module-specific flags that will be used for all link steps"/>
        <field name="local_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the include path using -I"/>
        <field name="logtags" type="string[]" descr="*.logtags files, to combine together in order to generate the /system/etc/event-log-tags file"/>
        <object-field name="lto">
            <field name="never" type="bool"/>
            <field name="full" type="bool"/>
            <field name="thin" type="bool"/>
        </object-field>
        <field name="native_coverage" type="bool"/>
        <field name="no_libcrt" type="bool" descr="don't link in libclang_rt.builtins-*.a"/>
        <field name="no_libgcc" type="bool" descr="don't link in libgcc.a"/>
        <field name="nocrt" type="bool" descr="don't link in crt_begin and crt_end.  This flag should only be necessary for compiling crt or libc."/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="openmp" type="bool" descr="Build and link with OpenMP"/>
        <field name="overrides" type="blueprint[]" descr="Names of modules to be overridden. Listed modules can only be other binaries (in Make or Soong). This does not completely prevent installation of the overridden binaries, but if both binaries would be installed by default (in PRODUCT_PACKAGES) the other binary will be removed from PRODUCT_PACKAGES."/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="pack_relocations" type="bool" descr="Generate compact dynamic relocation table, default true."/>
        <object-field name="pgo">
            <field name="instrumentation" type="bool"/>
            <field name="sampling" type="bool"/>
            <field name="profile_file" type="string"/>
            <field name="benchmarks" type="string[]"/>
            <field name="enable_profile_use" type="bool"/>
            <field name="cflags" type="string[]" descr="Additional compiler flags to use when building this module for profiling (either instrumentation or sampling)."/>
        </object-field>
        <field name="prefix_symbols" type="string" descr="if set, add an extra objcopy --prefix-symbols= step"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <object-field name="proto">
            <field name="static" type="bool" descr="Link statically against the protobuf runtime"/>
            <field name="type" type="string" descr="Proto generator type.  C++: full or lite.  Java: micro, nano, stream, or lite."/>
            <field name="plugin" type="string" descr="Proto plugin to use as the generator.  Must be a cc_binary_host module."/>
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the protoc include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the bp file that will be added to the protoc include paths."/>
            <field name="canonical_path_from_root" type="bool" descr="whether to identify the proto files from the root of the source tree (the original method in Android, useful for android-specific protos), or relative from where they were specified (useful for external/third party protos). This defaults to true today, but is expected to default to false in the future."/>
        </object-field>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="recovery_available" type="bool" descr="Make this module available when building for recovery"/>
        <field name="reexportedIncludeFlags" type="string[]"/>
        <field name="relative_install_path" type="string" descr="install to a subdirectory of the default install path for the module"/>
        <object-field name="renderscript">
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the llvm-rs-cc include paths"/>
            <field name="flags" type="string[]" descr="list of flags that will be passed to llvm-rs-cc"/>
            <field name="target_api" type="string" descr="Renderscript API level to target"/>
        </object-field>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="rtti" type="bool" descr="pass -frtti instead of -fno-rtti"/>
        <field name="runtime_libs" type="blueprint[]" descr="list of modules that should be installed with this module.  This is similar to 'required' but '.vendor' suffix will be appended to the module names if the shared libraries have vendor variants and this module uses VNDK."/>
        <object-field name="sanitize">
            <field name="never" type="bool"/>
            <field name="address" type="bool" descr="main sanitizers"/>
            <field name="thread" type="bool"/>
            <field name="hwaddress" type="bool"/>
            <field name="undefined" type="bool" descr="local sanitizers"/>
            <field name="all_undefined" type="bool"/>
            <field name="misc_undefined" type="string[]"/>
            <field name="coverage" type="bool"/>
            <field name="safestack" type="bool"/>
            <field name="cfi" type="bool"/>
            <field name="integer_overflow" type="bool"/>
            <field name="scudo" type="bool"/>
            <field name="scs" type="bool"/>
            <object-field name="diag">
                <field name="undefined" type="bool"/>
                <field name="cfi" type="bool"/>
                <field name="integer_overflow" type="bool"/>
                <field name="misc_undefined" type="string[]"/>
                <field name="no_recover" type="string[]"/>
            </object-field>
            <field name="recover" type="string[]" descr="value to pass to -fsanitize-recover="/>
            <field name="blacklist" type="string" descr="value to pass to -fsanitize-blacklist"/>
        </object-field>
        <field name="sdclang" type="bool" descr="compile module with SDLLVM instead of AOSP LLVM"/>
        <field name="sdk_version" type="string" descr="Minimum sdk version supported when compiling against the ndk"/>
        <field name="shared_libs" type="blueprint[]" descr="list of modules that should be dynamically linked into this module."/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="static_executable" type="bool" descr="compile executable with -static"/>
        <field name="static_libs" type="blueprint[]" descr="list of modules that should be statically linked into this module."/>
        <field name="stem" type="string" descr="set the name of the output"/>
        <field name="stl" type="string" descr="Select the STL library to use.  Possible values are &quot;libc++&quot;, &quot;libc++_static&quot;, &quot;libstdc++&quot;, or &quot;none&quot;. Leave blank to select the default."/>
        <object-field name="strip">
            <field name="none" type="bool"/>
            <field name="all" type="bool"/>
            <field name="keep_symbols" type="bool"/>
            <field name="keep_symbols_list" type="string[]"/>
            <field name="use_gnu_strip" type="bool"/>
        </object-field>
        <field name="suffix" type="string" descr="append to the name of the output"/>
        <field name="symbol_ordering_file" type="string" descr="Local file name to pass to the linker as --symbol-ordering-file"/>
        <field name="symlink_preferred_arch" type="bool" descr="if set, install a symlink to the preferred architecture"/>
        <field name="symlinks" type="string[]" descr="install symlinks to the binary.  Symlink names will have the suffix and the binary extension (if any) appended"/>
        <field name="system_shared_libs" type="blueprint[]" descr="list of system libraries that will be dynamically linked to shared library and executable modules.  If unset, generally defaults to libc, libm, and libdl.  Set to [] to prevent linking against the defaults."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
            <object-field name="recovery">
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="srcs" type="string[]" descr="list of source files that should only be used in the recovery variant of the C/C++ module."/>
                <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="cflags" type="string[]" descr="List of additional cflags that should be used to build the recovery variant of the C/C++ module."/>
            </object-field>
            <object-field name="vendor">
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_runtime_libs" type="blueprint[]" descr="list of runtime libs that should not be installed along with the vendor variant of the C/C++ module."/>
                <field name="version_script" type="string" descr="version script for this vendor variant"/>
                <field name="srcs" type="string[]" descr="list of source files that should only be used in the vendor variant of the C/C++ module."/>
                <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="cflags" type="string[]" descr="List of additional cflags that should be used to build the vendor variant of the C/C++ module."/>
            </object-field>
        </object-field>
        <field name="tidy" type="bool" descr="whether to run clang-tidy over C-like sources."/>
        <field name="tidy_checks" type="string[]" descr="Extra checks to enable or disable in clang-tidy"/>
        <field name="tidy_checks_as_errors" type="string[]" descr="Checks that should be treated as errors."/>
        <field name="tidy_flags" type="string[]" descr="Extra flags to pass to clang-tidy"/>
        <field name="use_clang_lld" type="bool" descr="Use clang lld instead of gnu ld."/>
        <field name="use_version_lib" type="bool" descr="make android::build:GetBuildNumber() available containing the build ID."/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vendor_available" type="bool" descr="whether this module should be allowed to be directly depended by other modules with `vendor: true`, `proprietary: true`, or `vendor_available:true`. If set to true, two variants will be built separately, one like normal, and the other limited to the set of libraries and headers that are exposed to /vendor modules. The vendor variant may be used with a different (newer) /system, so it shouldn't have any unversioned runtime dependencies, or make assumptions about the system that may not be true in the future. If set to false, this module becomes inaccessible from /vendor modules. Default value is true when vndk: {enabled: true} or vendor: true. Nothing happens if BOARD_VNDK_VERSION isn't set in the BoardConfig.mk"/>
        <field name="version_script" type="string" descr="local file name to pass to the linker as --version_script"/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
        <object-field name="vndk">
            <field name="enabled" type="bool" descr="declared as a VNDK or VNDK-SP module. The vendor variant will be installed in /system instead of /vendor partition. `vendor_vailable` must be explicitly set to either true or false together with `vndk: {enabled: true}`."/>
            <field name="support_system_process" type="bool" descr="declared as a VNDK-SP module, which is a subset of VNDK. `vndk: { enabled: true }` must set together. All these modules are allowed to link to VNDK-SP or LL-NDK modules only. Other dependency will cause link-type errors. If `support_system_process` is not set or set to false, the module is VNDK-core and can link to other VNDK-core, VNDK-SP or LL-NDK modules only."/>
            <field name="extends" type="string" descr="Extending another module"/>
        </object-field>
        <field name="whole_static_libs" type="blueprint[]" descr="list of modules whose object files should be linked into this module in their entirety.  For static library modules, all of the .o files from the intermediate directory of the dependency will be linked into this modules .a file.  For a shared library, the dependency's .a file will be linked into this module using -Wl,--whole-archive."/>
        <field name="xom" type="bool"/>
        <field name="yaccflags" type="string[]" descr="list of module-specific flags that will be used for .y and .yy compiles"/>
    </blueprint>
    <blueprint name="clang_tblgen">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="in" type="string"/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="outs" type="string[]"/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
        </object-field>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="sysprop_library">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]"/>
        <object-field name="aidl">
            <field name="include_dirs" type="string[]" descr="Top level directories to pass to aidl tool"/>
            <field name="local_include_dirs" type="string[]" descr="Directories rooted at the Android.bp file to pass to aidl tool"/>
            <field name="export_include_dirs" type="string[]" descr="directories that should be added as include directories for any aidl sources of modules that depend on this module, as well as to aidl for this module."/>
            <field name="generate_traces" type="bool" descr="whether to generate traces (for systrace) for this interface"/>
            <field name="generate_get_transaction_name" type="bool" descr="whether to generate Binder#GetTransaction name method."/>
        </object-field>
        <field name="api_packages" type="string[]" descr="list of package names that will be documented and publicized as API"/>
        <field name="api_srcs" type="string[]" descr="list of optional source files that are part of API but not part of runtime library."/>
        <field name="compile_dex" type="bool" descr="If set to true, compile dex regardless of installable.  Defaults to false."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="core_lib" type="bool" descr="If set to true, the path of dist files is apistubs/core. Defaults to false."/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dex_preopt">
            <field name="enabled" type="bool" descr="If false, prevent dexpreopting and stripping the dex file from the final jar.  Defaults to true."/>
            <field name="no_stripping" type="bool" descr="If true, never strip the dex files from the final jar when dexpreopting.  Defaults to false."/>
            <field name="app_image" type="bool" descr="If true, generate an app image (.art file) for this module."/>
            <field name="profile_guided" type="bool" descr="If true, use a checked-in profile to guide optimization.  Defaults to false unless a matching profile is set or a profile is found in PRODUCT_DEX_PREOPT_PROFILE_DIR that matches the name of this module, in which case it is defaulted to true."/>
            <field name="profile" type="string" descr="If set, provides the path to profile relative to the Android.bp file.  If not set, defaults to searching for a file that matches the name of this module in the default profile location set by PRODUCT_DEX_PREOPT_PROFILE_DIR, or empty if not found."/>
        </object-field>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="droiddoc_option_files" type="string[]" descr="local files that are used within user customized droiddoc options."/>
        <field name="droiddoc_options" type="string[]" descr="additional droiddoc options Available variables for substitution:"/>
        <field name="dxflags" type="string[]" descr="list of module-specific flags that will be used for dex compiles"/>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <object-field name="errorprone">
            <field name="javacflags" type="string[]" descr="List of javac flags that should only be used when running errorprone."/>
        </object-field>
        <field name="exclude_java_resource_dirs" type="string[]" descr="list of directories that should be excluded from java_resource_dirs"/>
        <field name="exclude_java_resources" type="string[]" descr="list of files that should be excluded from java_resources and java_resource_dirs"/>
        <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the Java module. This is most useful in the arch/multilib variants to remove non-common files"/>
        <field name="hidden_api_packages" type="string[]" descr="list of package names that must be hidden from the API"/>
        <field name="hostdex" type="bool" descr="If true, export a copy of the module as a -hostdex module for host testing."/>
        <field name="include_srcs" type="bool" descr="If set to true, include sources used to compile the module in to the final jar"/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="installable" type="bool" descr="If set to true, allow this module to be dexed and installed on devices.  Has no effect on host modules, which are always considered installable."/>
        <object-field name="jacoco">
            <field name="include_filter" type="string[]" descr="List of classes to include for instrumentation with jacoco to collect coverage information at runtime when building with coverage enabled.  If unset defaults to all classes. Supports '*' as the last character of an entry in the list as a wildcard match. If preceded by '.' it matches all classes in the package and subpackages, otherwise it matches classes in the package that have the class name as a prefix."/>
            <field name="exclude_filter" type="string[]" descr="List of classes to exclude from instrumentation with jacoco to collect coverage information at runtime when building with coverage enabled.  Overrides classes selected by the include_filter property. Supports '*' as the last character of an entry in the list as a wildcard match. If preceded by '.' it matches all classes in the package and subpackages, otherwise it matches classes in the package that have the class name as a prefix."/>
        </object-field>
        <field name="jarjar_rules" type="string" descr="if not blank, run jarjar using the specified rules file"/>
        <field name="java_resource_dirs" type="string[]" descr="list of directories containing Java resources"/>
        <field name="java_resources" type="string[]" descr="list of files to use as Java resources"/>
        <field name="java_version" type="string" descr="If not blank, set the java version passed to javac as -source and -target"/>
        <field name="javac_shard_size" type="number" descr="The number of Java source entries each Javac instance can process"/>
        <field name="javacflags" type="string[]" descr="list of module-specific flags that will be used for javac compiles"/>
        <field name="kotlincflags" type="string[]" descr="list of module-specific flags that will be used for kotlinc compiles"/>
        <field name="libs" type="blueprint[]" descr="list of of java libraries that will be in the classpath"/>
        <field name="manifest" type="string" descr="manifest file to be included in resulting jar"/>
        <field name="merge_annotations_dirs" type="string[]" descr="a list of top-level directories containing files to merge qualifier annotations (i.e. those intended to be included in the stubs written) from."/>
        <field name="merge_inclusion_annotations_dirs" type="string[]" descr="a list of top-level directories containing Java stub files to merge show/hide annotations from."/>
        <field name="min_sdk_version" type="string" descr="if not blank, set the minimum version of the sdk that the compiled artifacts will run against. Defaults to sdk_version if not set."/>
        <field name="no_framework_libs" type="bool" descr="don't build against the framework libraries (ext, and framework for device targets)"/>
        <field name="no_standard_libs" type="bool" descr="don't build against the default libraries (bootclasspath, ext, and framework for device targets)"/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <object-field name="openjdk9">
            <field name="srcs" type="string[]" descr="List of source files that should only be used when passing -source 1.9"/>
            <field name="javacflags" type="string[]" descr="List of javac flags that should only be used when passing -source 1.9"/>
        </object-field>
        <object-field name="optimize">
            <field name="enabled" type="bool" descr="If false, disable all optimization.  Defaults to true for android_app and android_test modules, false for java_library and java_test modules."/>
            <field name="enabledByDefault" type="bool" descr="True if the module containing this has it set by default."/>
            <field name="shrink" type="bool" descr="If true, optimize for size by removing unused code.  Defaults to true for apps, false for libraries and tests."/>
            <field name="optimize" type="bool" descr="If true, optimize bytecode.  Defaults to false."/>
            <field name="obfuscate" type="bool" descr="If true, obfuscate bytecode.  Defaults to false."/>
            <field name="no_aapt_flags" type="bool" descr="If true, do not use the flag files generated by aapt that automatically keep classes referenced by the app manifest.  Defaults to false."/>
            <field name="proguard_flags" type="string[]" descr="Flags to pass to proguard."/>
            <field name="proguard_flags_files" type="string[]" descr="Specifies the locations of files containing proguard flags."/>
        </object-field>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="patch_module" type="string" descr="When compiling language level 9+ .java code in packages that are part of a system module, patch_module names the module that your sources and dependencies should be patched into. The Android runtime currently doesn't implement the JEP 261 module system so this option is only supported at compile time. It should only be needed to compile tests in packages that exist in libcore and which are inconvenient to move elsewhere."/>
        <field name="permitted_packages" type="string[]" descr="If not empty, classes are restricted to the specified packages and their sub-packages. This restriction is checked after applying jarjar rules and including static libs."/>
        <field name="platform_apis" type="bool" descr="if true, compile against the platform APIs instead of an SDK."/>
        <field name="plugins" type="string[]" descr="List of modules to use as annotation processors"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="property_owner" type="string" descr="Determine who owns this sysprop library. Possible values are &quot;Platform&quot;, &quot;Vendor&quot;, or &quot;Odm&quot;"/>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <object-field name="proto">
            <field name="type" type="string" descr="Proto generator type.  C++: full or lite.  Java: micro, nano, stream, or lite."/>
            <field name="plugin" type="string" descr="Proto plugin to use as the generator.  Must be a cc_binary_host module."/>
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the protoc include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the bp file that will be added to the protoc include paths."/>
            <field name="canonical_path_from_root" type="bool" descr="whether to identify the proto files from the root of the source tree (the original method in Android, useful for android-specific protos), or relative from where they were specified (useful for external/third party protos). This defaults to true today, but is expected to default to false in the future."/>
            <field name="output_params" type="string[]" descr="List of extra options that will be passed to the proto generator."/>
        </object-field>
        <field name="recovery" type="bool"/>
        <field name="recovery_available" type="bool"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="sdk_version" type="string" descr="if not blank, set to the version of the sdk to compile against.  Defaults to compiling against the current sdk if platform_apis is not set."/>
        <field name="services" type="string[]" descr="List of files to include in the META-INF/services folder of the resulting jar."/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="srcs_lib" type="string" descr="the java library (in classpath) for documentation that provides java srcs and srcjars."/>
        <field name="srcs_lib_whitelist_dirs" type="string[]" descr="the base dirs under srcs_lib will be scanned for java srcs."/>
        <field name="srcs_lib_whitelist_pkgs" type="string[]" descr="the sub dirs under srcs_lib_whitelist_dirs will be scanned for java srcs. Defaults to &quot;android.annotation&quot;."/>
        <field name="static_libs" type="blueprint[]" descr="list of java libraries that will be compiled into the resulting jar"/>
        <field name="stub_only_libs" type="blueprint[]" descr="List of Java libraries that will be in the classpath when building stubs"/>
        <field name="system_modules" type="string" descr="When targeting 1.9, override the modules to use with --system"/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
            <object-field name="hostdex">
                <field name="required" type="blueprint[]" descr="Additional required dependencies to add to -hostdex modules."/>
            </object-field>
        </object-field>
        <field name="target_sdk_version" type="string" descr="if not blank, set the targetSdkVersion in the AndroidManifest.xml. Defaults to sdk_version if not set."/>
        <field name="use_tools_jar" type="bool" descr="Add host jdk tools.jar to bootclasspath"/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vendor_available" type="bool"/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="ca_certificates">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="host_supported" type="bool" descr="If set to true, build a variant of the module for the host.  Defaults to false."/>
        <field name="device_supported" type="bool" descr="If set to true, build a variant of the module for the device.  Defaults to true."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="dest_dir" type="string"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="module_name_prefix" type="string"/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="src_dir" type="string"/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
        </object-field>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="ca_certificates_host">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="host_supported" type="bool" descr="If set to true, build a variant of the module for the host.  Defaults to false."/>
        <field name="device_supported" type="bool" descr="If set to true, build a variant of the module for the device.  Defaults to true."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="dest_dir" type="string"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="module_name_prefix" type="string"/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="src_dir" type="string"/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
        </object-field>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="hidl_interface">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="List of .hal files which compose this interface."/>
        <field name="compile_multilib" type="string"/>
        <field name="device_specific" type="bool"/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="enabled" type="bool"/>
        <field name="gen_java" type="bool" descr="Whether to generate the Java library stubs. Default: true"/>
        <field name="gen_java_constants" type="bool" descr="Whether to generate a Java library containing constants expressed by @export annotations in the hal files."/>
        <field name="gen_vts" type="bool" descr="Whether to generate VTS-related testing libraries."/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="interfaces" type="string[]" descr="List of hal interface packages that this library depends on."/>
        <field name="notice" type="string"/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="product_services_specific" type="bool"/>
        <field name="product_specific" type="bool"/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <field name="recovery" type="bool"/>
        <field name="required" type="blueprint[]"/>
        <field name="root" type="string" descr="Package root for this package, must be a prefix of name"/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
        </object-field>
        <field name="types" type="string[]" descr="Unused/deprecated: List of non-TypeDef types declared in types.hal."/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]"/>
    </blueprint>
    <blueprint name="hidl_package_root">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
        </object-field>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="python_binary_host">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="list of source (.py) files compatible both with Python2 and Python3 used to compile the Python module. srcs may reference the outputs of other modules that produce source files like genrule or filegroup using the syntax &quot;:module&quot;. Srcs has to be non-empty."/>
        <field name="autorun" type="bool" descr="whether to use `main` when starting the executable. The default is true, when set to false it will act much like the normal `python` executable, but with the sources and libraries automatically included in the PYTHONPATH."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="data" type="string[]" descr="list of files or filegroup modules that provide data that should be installed alongside the test. the file extension can be arbitrary except for (.py)."/>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the C/C++ module. This is most useful in the arch/multilib variants to remove non-common files"/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="is_internal" type="bool" descr="true, if the Python module is used internally, eg, Python std libs."/>
        <field name="libs" type="blueprint[]" descr="list of the Python libraries compatible both with Python2 and Python3."/>
        <field name="main" type="string" descr="the name of the source file that is the main entry point of the program. this file must also be listed in srcs. If left unspecified, module name is used instead. If name doesn’t match any filename in srcs, main must be specified."/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="pkg_path" type="string" descr="the package path prefix within the output artifact at which to place the source/data files of the current module. eg. Pkg_path = &quot;a/b/c&quot;; Other packages can reference this module by using (from a.b.c import ...) statement. if left unspecified, all the source/data files path is unchanged within zip file."/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <object-field name="proto">
            <field name="type" type="string" descr="Proto generator type.  C++: full or lite.  Java: micro, nano, stream, or lite."/>
            <field name="plugin" type="string" descr="Proto plugin to use as the generator.  Must be a cc_binary_host module."/>
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the protoc include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the bp file that will be added to the protoc include paths."/>
            <field name="canonical_path_from_root" type="bool" descr="whether to identify the proto files from the root of the source tree (the original method in Android, useful for android-specific protos), or relative from where they were specified (useful for external/third party protos). This defaults to true today, but is expected to default to false in the future."/>
        </object-field>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="stem" type="string" descr="set the name of the output binary."/>
        <field name="suffix" type="string" descr="append to the name of the output binary."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
        </object-field>
        <field name="test_suites" type="string[]" descr="list of compatibility suites (for example &quot;cts&quot;, &quot;vts&quot;) that the module should be installed into."/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <object-field name="version">
            <field name="py2" type="string[]" descr="all the &quot;srcs&quot; or Python dependencies that are to be used only for Python2."/>
            <field name="py3" type="string[]" descr="all the &quot;srcs&quot; or Python dependencies that are to be used only for Python3."/>
        </object-field>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="python_defaults">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="list of source (.py) files compatible both with Python2 and Python3 used to compile the Python module. srcs may reference the outputs of other modules that produce source files like genrule or filegroup using the syntax &quot;:module&quot;. Srcs has to be non-empty."/>
        <field name="host_supported" type="bool" descr="If set to true, build a variant of the module for the host.  Defaults to false."/>
        <field name="device_supported" type="bool" descr="If set to true, build a variant of the module for the device.  Defaults to true."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="data" type="string[]" descr="list of files or filegroup modules that provide data that should be installed alongside the test. the file extension can be arbitrary except for (.py)."/>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the C/C++ module. This is most useful in the arch/multilib variants to remove non-common files"/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="is_internal" type="bool" descr="true, if the Python module is used internally, eg, Python std libs."/>
        <field name="libs" type="blueprint[]" descr="list of the Python libraries compatible both with Python2 and Python3."/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="pkg_path" type="string" descr="the package path prefix within the output artifact at which to place the source/data files of the current module. eg. Pkg_path = &quot;a/b/c&quot;; Other packages can reference this module by using (from a.b.c import ...) statement. if left unspecified, all the source/data files path is unchanged within zip file."/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
        </object-field>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <object-field name="version">
            <field name="py2" type="string[]" descr="all the &quot;srcs&quot; or Python dependencies that are to be used only for Python2."/>
            <field name="py3" type="string[]" descr="all the &quot;srcs&quot; or Python dependencies that are to be used only for Python3."/>
        </object-field>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="python_library">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="list of source (.py) files compatible both with Python2 and Python3 used to compile the Python module. srcs may reference the outputs of other modules that produce source files like genrule or filegroup using the syntax &quot;:module&quot;. Srcs has to be non-empty."/>
        <field name="host_supported" type="bool" descr="If set to true, build a variant of the module for the host.  Defaults to false."/>
        <field name="device_supported" type="bool" descr="If set to true, build a variant of the module for the device.  Defaults to true."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="data" type="string[]" descr="list of files or filegroup modules that provide data that should be installed alongside the test. the file extension can be arbitrary except for (.py)."/>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the C/C++ module. This is most useful in the arch/multilib variants to remove non-common files"/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="is_internal" type="bool" descr="true, if the Python module is used internally, eg, Python std libs."/>
        <field name="libs" type="blueprint[]" descr="list of the Python libraries compatible both with Python2 and Python3."/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="pkg_path" type="string" descr="the package path prefix within the output artifact at which to place the source/data files of the current module. eg. Pkg_path = &quot;a/b/c&quot;; Other packages can reference this module by using (from a.b.c import ...) statement. if left unspecified, all the source/data files path is unchanged within zip file."/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <object-field name="proto">
            <field name="type" type="string" descr="Proto generator type.  C++: full or lite.  Java: micro, nano, stream, or lite."/>
            <field name="plugin" type="string" descr="Proto plugin to use as the generator.  Must be a cc_binary_host module."/>
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the protoc include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the bp file that will be added to the protoc include paths."/>
            <field name="canonical_path_from_root" type="bool" descr="whether to identify the proto files from the root of the source tree (the original method in Android, useful for android-specific protos), or relative from where they were specified (useful for external/third party protos). This defaults to true today, but is expected to default to false in the future."/>
        </object-field>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
        </object-field>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <object-field name="version">
            <field name="py2" type="string[]" descr="all the &quot;srcs&quot; or Python dependencies that are to be used only for Python2."/>
            <field name="py3" type="string[]" descr="all the &quot;srcs&quot; or Python dependencies that are to be used only for Python3."/>
        </object-field>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="python_library_host">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="list of source (.py) files compatible both with Python2 and Python3 used to compile the Python module. srcs may reference the outputs of other modules that produce source files like genrule or filegroup using the syntax &quot;:module&quot;. Srcs has to be non-empty."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="data" type="string[]" descr="list of files or filegroup modules that provide data that should be installed alongside the test. the file extension can be arbitrary except for (.py)."/>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the C/C++ module. This is most useful in the arch/multilib variants to remove non-common files"/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="is_internal" type="bool" descr="true, if the Python module is used internally, eg, Python std libs."/>
        <field name="libs" type="blueprint[]" descr="list of the Python libraries compatible both with Python2 and Python3."/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="pkg_path" type="string" descr="the package path prefix within the output artifact at which to place the source/data files of the current module. eg. Pkg_path = &quot;a/b/c&quot;; Other packages can reference this module by using (from a.b.c import ...) statement. if left unspecified, all the source/data files path is unchanged within zip file."/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <object-field name="proto">
            <field name="type" type="string" descr="Proto generator type.  C++: full or lite.  Java: micro, nano, stream, or lite."/>
            <field name="plugin" type="string" descr="Proto plugin to use as the generator.  Must be a cc_binary_host module."/>
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the protoc include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the bp file that will be added to the protoc include paths."/>
            <field name="canonical_path_from_root" type="bool" descr="whether to identify the proto files from the root of the source tree (the original method in Android, useful for android-specific protos), or relative from where they were specified (useful for external/third party protos). This defaults to true today, but is expected to default to false in the future."/>
        </object-field>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
        </object-field>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <object-field name="version">
            <field name="py2" type="string[]" descr="all the &quot;srcs&quot; or Python dependencies that are to be used only for Python2."/>
            <field name="py3" type="string[]" descr="all the &quot;srcs&quot; or Python dependencies that are to be used only for Python3."/>
        </object-field>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="python_test">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="list of source (.py) files compatible both with Python2 and Python3 used to compile the Python module. srcs may reference the outputs of other modules that produce source files like genrule or filegroup using the syntax &quot;:module&quot;. Srcs has to be non-empty."/>
        <field name="host_supported" type="bool" descr="If set to true, build a variant of the module for the host.  Defaults to false."/>
        <field name="device_supported" type="bool" descr="If set to true, build a variant of the module for the device.  Defaults to true."/>
        <field name="autorun" type="bool" descr="whether to use `main` when starting the executable. The default is true, when set to false it will act much like the normal `python` executable, but with the sources and libraries automatically included in the PYTHONPATH."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="data" type="string[]" descr="list of files or filegroup modules that provide data that should be installed alongside the test. the file extension can be arbitrary except for (.py)."/>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the C/C++ module. This is most useful in the arch/multilib variants to remove non-common files"/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="is_internal" type="bool" descr="true, if the Python module is used internally, eg, Python std libs."/>
        <field name="libs" type="blueprint[]" descr="list of the Python libraries compatible both with Python2 and Python3."/>
        <field name="main" type="string" descr="the name of the source file that is the main entry point of the program. this file must also be listed in srcs. If left unspecified, module name is used instead. If name doesn’t match any filename in srcs, main must be specified."/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="pkg_path" type="string" descr="the package path prefix within the output artifact at which to place the source/data files of the current module. eg. Pkg_path = &quot;a/b/c&quot;; Other packages can reference this module by using (from a.b.c import ...) statement. if left unspecified, all the source/data files path is unchanged within zip file."/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <object-field name="proto">
            <field name="type" type="string" descr="Proto generator type.  C++: full or lite.  Java: micro, nano, stream, or lite."/>
            <field name="plugin" type="string" descr="Proto plugin to use as the generator.  Must be a cc_binary_host module."/>
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the protoc include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the bp file that will be added to the protoc include paths."/>
            <field name="canonical_path_from_root" type="bool" descr="whether to identify the proto files from the root of the source tree (the original method in Android, useful for android-specific protos), or relative from where they were specified (useful for external/third party protos). This defaults to true today, but is expected to default to false in the future."/>
        </object-field>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="stem" type="string" descr="set the name of the output binary."/>
        <field name="suffix" type="string" descr="append to the name of the output binary."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
        </object-field>
        <field name="test_config" type="string" descr="the name of the test configuration (for example &quot;AndroidTest.xml&quot;) that should be installed with the module."/>
        <field name="test_config_template" type="string" descr="the name of the test configuration template (for example &quot;AndroidTestTemplate.xml&quot;) that should be installed with the module."/>
        <field name="test_suites" type="string[]" descr="list of compatibility suites (for example &quot;cts&quot;, &quot;vts&quot;) that the module should be installed into."/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <object-field name="version">
            <field name="py2" type="string[]" descr="all the &quot;srcs&quot; or Python dependencies that are to be used only for Python2."/>
            <field name="py3" type="string[]" descr="all the &quot;srcs&quot; or Python dependencies that are to be used only for Python3."/>
        </object-field>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="python_test_host">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="list of source (.py) files compatible both with Python2 and Python3 used to compile the Python module. srcs may reference the outputs of other modules that produce source files like genrule or filegroup using the syntax &quot;:module&quot;. Srcs has to be non-empty."/>
        <field name="autorun" type="bool" descr="whether to use `main` when starting the executable. The default is true, when set to false it will act much like the normal `python` executable, but with the sources and libraries automatically included in the PYTHONPATH."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="data" type="string[]" descr="list of files or filegroup modules that provide data that should be installed alongside the test. the file extension can be arbitrary except for (.py)."/>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the C/C++ module. This is most useful in the arch/multilib variants to remove non-common files"/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="is_internal" type="bool" descr="true, if the Python module is used internally, eg, Python std libs."/>
        <field name="libs" type="blueprint[]" descr="list of the Python libraries compatible both with Python2 and Python3."/>
        <field name="main" type="string" descr="the name of the source file that is the main entry point of the program. this file must also be listed in srcs. If left unspecified, module name is used instead. If name doesn’t match any filename in srcs, main must be specified."/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="pkg_path" type="string" descr="the package path prefix within the output artifact at which to place the source/data files of the current module. eg. Pkg_path = &quot;a/b/c&quot;; Other packages can reference this module by using (from a.b.c import ...) statement. if left unspecified, all the source/data files path is unchanged within zip file."/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <object-field name="proto">
            <field name="type" type="string" descr="Proto generator type.  C++: full or lite.  Java: micro, nano, stream, or lite."/>
            <field name="plugin" type="string" descr="Proto plugin to use as the generator.  Must be a cc_binary_host module."/>
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the protoc include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the bp file that will be added to the protoc include paths."/>
            <field name="canonical_path_from_root" type="bool" descr="whether to identify the proto files from the root of the source tree (the original method in Android, useful for android-specific protos), or relative from where they were specified (useful for external/third party protos). This defaults to true today, but is expected to default to false in the future."/>
        </object-field>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="stem" type="string" descr="set the name of the output binary."/>
        <field name="suffix" type="string" descr="append to the name of the output binary."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
        </object-field>
        <field name="test_config" type="string" descr="the name of the test configuration (for example &quot;AndroidTest.xml&quot;) that should be installed with the module."/>
        <field name="test_config_template" type="string" descr="the name of the test configuration template (for example &quot;AndroidTestTemplate.xml&quot;) that should be installed with the module."/>
        <field name="test_suites" type="string[]" descr="list of compatibility suites (for example &quot;cts&quot;, &quot;vts&quot;) that the module should be installed into."/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <object-field name="version">
            <field name="py2" type="string[]" descr="all the &quot;srcs&quot; or Python dependencies that are to be used only for Python2."/>
            <field name="py3" type="string[]" descr="all the &quot;srcs&quot; or Python dependencies that are to be used only for Python3."/>
        </object-field>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="sanitizer_status_library_shared">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="list of source files used to compile the C/C++ module.  May be .c, .cpp, or .S files. srcs may reference the outputs of other modules that produce source files like genrule or filegroup using the syntax &quot;:module&quot;."/>
        <field name="host_supported" type="bool" descr="If set to true, build a variant of the module for the host.  Defaults to false."/>
        <field name="device_supported" type="bool" descr="If set to true, build a variant of the module for the device.  Defaults to true."/>
        <object-field name="aidl">
            <field name="export_aidl_headers" type="bool" descr="export headers generated from .aidl sources"/>
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the aidl include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the aidl include paths."/>
            <field name="generate_traces" type="bool" descr="whether to generate traces (for systrace) for this interface"/>
        </object-field>
        <field name="allow_undefined_symbols" type="bool" descr="allow the module to contain undefined symbols.  By default, modules cannot contain undefined symbols that are not satisified by their immediate dependencies.  Set this flag to true to remove --no-undefined from the linker flags. This flag should only be necessary for compiling low-level libraries like libc."/>
        <field name="asflags" type="string[]" descr="list of module-specific flags that will be used for .S compiles"/>
        <field name="bootstrap" type="bool" descr="Allows this module to use non-APEX version of libraries. Useful for building binaries that are started before APEXes are activated."/>
        <field name="c_std" type="string" descr="C standard version to use. Can be a specific version (such as &quot;gnu11&quot;), &quot;experimental&quot; (which will use draft versions like C1x when available), or the empty string (which will use the default)."/>
        <field name="cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles."/>
        <field name="clang" type="bool" descr="Deprecated. true is the default, false is invalid."/>
        <field name="clang_asflags" type="string[]" descr="list of module-specific flags that will be used for .S compiles when compiling with clang"/>
        <field name="clang_cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles when compiling with clang"/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="conlyflags" type="string[]" descr="list of module-specific flags that will be used for C compiles"/>
        <field name="cpp_std" type="string" descr="C++ standard version to use. Can be a specific version (such as &quot;gnu++11&quot;), &quot;experimental&quot; (which will use draft versions like C++1z when available), or the empty string (which will use the default)."/>
        <field name="cppflags" type="string[]" descr="list of module-specific flags that will be used for C++ compiles"/>
        <object-field name="debug" descr="release">
            <field name="cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles in debug or release builds"/>
        </object-field>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="double_loadable" type="bool" descr="whether this module is capable of being loaded with other instance (possibly an older version) of the same module in the same process. Currently, a shared library that is a member of VNDK (vndk: {enabled: true}) can be double loaded in a vendor process if the library is also a (direct and indirect) dependency of an LLNDK library. Such libraries must be explicitly marked as `double_loadable: true` by the owner, or the dependency from the LLNDK lib should be cut if the lib is not designed to be double loaded."/>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the C/C++ module. This is most useful in the arch/multilib variants to remove non-common files"/>
        <field name="export_generated_headers" type="blueprint[]" descr="list of generated headers to re-export include directories from. Entries must be present in generated_headers."/>
        <field name="export_header_lib_headers" type="blueprint[]" descr="list of header libraries to re-export include directories from. Entries must be present in header_libs."/>
        <field name="export_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the include path (using -I) for this module and any module that links against this module.  Directories listed in export_include_dirs do not need to be listed in local_include_dirs."/>
        <field name="export_shared_lib_headers" type="blueprint[]" descr="list of shared libraries to re-export include directories from. Entries must be present in shared_libs."/>
        <field name="export_static_lib_headers" type="blueprint[]" descr="list of static libraries to re-export include directories from. Entries must be present in static_libs."/>
        <field name="force_symbols_not_weak_list" type="string" descr="local file name to pass to the linker as -force_symbols_not_weak_list"/>
        <field name="force_symbols_weak_list" type="string" descr="local file name to pass to the linker as -force_symbols_weak_list"/>
        <field name="generated_headers" type="blueprint[]" descr="list of generated headers to add to the include path. These are the names of genrule modules."/>
        <field name="generated_sources" type="blueprint[]" descr="list of generated sources to compile. These are the names of gensrcs or genrule modules."/>
        <field name="gnu_extensions" type="bool" descr="if set to false, use -std=c++* instead of -std=gnu++*"/>
        <field name="group_static_libs" type="bool" descr="group static libraries.  This can resolve missing symbols issues with interdependencies between static libraries, but it is generally better to order them correctly instead."/>
        <object-field name="header_abi_checker">
            <field name="symbol_file" type="string" descr="Path to a symbol file that specifies the symbols to be included in the generated ABI dump file"/>
            <field name="exclude_symbol_versions" type="string[]" descr="Symbol versions that should be ignored from the symbol file"/>
            <field name="exclude_symbol_tags" type="string[]" descr="Symbol tags that should be ignored from the symbol file"/>
        </object-field>
        <field name="header_libs" type="blueprint[]" descr="list of modules that should only provide headers for this module."/>
        <field name="host_ldlibs" type="string[]" descr="-l arguments to pass to linker for host-provided shared libraries"/>
        <field name="include_build_directory" type="bool" descr="Add the directory containing the Android.bp file to the list of include directories. Defaults to true."/>
        <field name="include_dirs" type="string[]" descr="list of directories relative to the root of the source tree that will be added to the include path using -I. If possible, don't use this.  If adding paths from the current directory use local_include_dirs, if adding paths from other modules use export_include_dirs in that module."/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="instruction_set" type="string" descr="the instruction set architecture to use to compile the C/C++ module."/>
        <field name="ldflags" type="string[]" descr="list of module-specific flags that will be used for all link steps"/>
        <field name="local_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the include path using -I"/>
        <field name="logtags" type="string[]" descr="*.logtags files, to combine together in order to generate the /system/etc/event-log-tags file"/>
        <object-field name="lto">
            <field name="never" type="bool"/>
            <field name="full" type="bool"/>
            <field name="thin" type="bool"/>
        </object-field>
        <field name="native_coverage" type="bool"/>
        <field name="no_libcrt" type="bool" descr="don't link in libclang_rt.builtins-*.a"/>
        <field name="no_libgcc" type="bool" descr="don't link in libgcc.a"/>
        <field name="nocrt" type="bool" descr="don't link in crt_begin and crt_end.  This flag should only be necessary for compiling crt or libc."/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="openmp" type="bool" descr="Build and link with OpenMP"/>
        <field name="overrides" type="blueprint[]" descr="Names of modules to be overridden. Listed modules can only be other shared libraries (in Make or Soong). This does not completely prevent installation of the overridden libraries, but if both binaries would be installed by default (in PRODUCT_PACKAGES) the other library will be removed from PRODUCT_PACKAGES."/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="pack_relocations" type="bool" descr="Generate compact dynamic relocation table, default true."/>
        <object-field name="pgo">
            <field name="instrumentation" type="bool"/>
            <field name="sampling" type="bool"/>
            <field name="profile_file" type="string"/>
            <field name="benchmarks" type="string[]"/>
            <field name="enable_profile_use" type="bool"/>
            <field name="cflags" type="string[]" descr="Additional compiler flags to use when building this module for profiling (either instrumentation or sampling)."/>
        </object-field>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <object-field name="proto">
            <field name="export_proto_headers" type="bool" descr="export headers generated from .proto sources"/>
            <field name="static" type="bool" descr="Link statically against the protobuf runtime"/>
            <field name="type" type="string" descr="Proto generator type.  C++: full or lite.  Java: micro, nano, stream, or lite."/>
            <field name="plugin" type="string" descr="Proto plugin to use as the generator.  Must be a cc_binary_host module."/>
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the protoc include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the bp file that will be added to the protoc include paths."/>
            <field name="canonical_path_from_root" type="bool" descr="whether to identify the proto files from the root of the source tree (the original method in Android, useful for android-specific protos), or relative from where they were specified (useful for external/third party protos). This defaults to true today, but is expected to default to false in the future."/>
        </object-field>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="recovery_available" type="bool" descr="Make this module available when building for recovery"/>
        <field name="reexportedIncludeFlags" type="string[]"/>
        <field name="relative_install_path" type="string" descr="install to a subdirectory of the default install path for the module"/>
        <object-field name="renderscript">
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the llvm-rs-cc include paths"/>
            <field name="flags" type="string[]" descr="list of flags that will be passed to llvm-rs-cc"/>
            <field name="target_api" type="string" descr="Renderscript API level to target"/>
        </object-field>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="rtti" type="bool" descr="pass -frtti instead of -fno-rtti"/>
        <field name="runtime_libs" type="blueprint[]" descr="list of modules that should be installed with this module.  This is similar to 'required' but '.vendor' suffix will be appended to the module names if the shared libraries have vendor variants and this module uses VNDK."/>
        <object-field name="sanitize">
            <field name="never" type="bool"/>
            <field name="address" type="bool" descr="main sanitizers"/>
            <field name="thread" type="bool"/>
            <field name="hwaddress" type="bool"/>
            <field name="undefined" type="bool" descr="local sanitizers"/>
            <field name="all_undefined" type="bool"/>
            <field name="misc_undefined" type="string[]"/>
            <field name="coverage" type="bool"/>
            <field name="safestack" type="bool"/>
            <field name="cfi" type="bool"/>
            <field name="integer_overflow" type="bool"/>
            <field name="scudo" type="bool"/>
            <field name="scs" type="bool"/>
            <object-field name="diag">
                <field name="undefined" type="bool"/>
                <field name="cfi" type="bool"/>
                <field name="integer_overflow" type="bool"/>
                <field name="misc_undefined" type="string[]"/>
                <field name="no_recover" type="string[]"/>
            </object-field>
            <field name="recover" type="string[]" descr="value to pass to -fsanitize-recover="/>
            <field name="blacklist" type="string" descr="value to pass to -fsanitize-blacklist"/>
        </object-field>
        <field name="sdclang" type="bool" descr="compile module with SDLLVM instead of AOSP LLVM"/>
        <field name="sdk_version" type="string" descr="Minimum sdk version supported when compiling against the ndk"/>
        <field name="shared" type="string[]"/>
        <field name="shared_libs" type="blueprint[]" descr="list of modules that should be dynamically linked into this module."/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="static" type="string[]"/>
        <field name="static_libs" type="blueprint[]" descr="list of modules that should be statically linked into this module."/>
        <field name="static_ndk_lib" type="bool"/>
        <field name="stem" type="string" descr="set the name of the output"/>
        <field name="stl" type="string" descr="Select the STL library to use.  Possible values are &quot;libc++&quot;, &quot;libc++_static&quot;, &quot;libstdc++&quot;, or &quot;none&quot;. Leave blank to select the default."/>
        <object-field name="strip">
            <field name="none" type="bool"/>
            <field name="all" type="bool"/>
            <field name="keep_symbols" type="bool"/>
            <field name="keep_symbols_list" type="string[]"/>
            <field name="use_gnu_strip" type="bool"/>
        </object-field>
        <object-field name="stubs">
            <field name="symbol_file" type="string" descr="Relative path to the symbol map. The symbol map provides the list of symbols that are exported for stubs variant of this library."/>
            <field name="versions" type="string[]" descr="List versions to generate stubs libs for."/>
        </object-field>
        <field name="symbol_ordering_file" type="string" descr="Local file name to pass to the linker as --symbol-ordering-file"/>
        <field name="system_shared_libs" type="blueprint[]" descr="list of system libraries that will be dynamically linked to shared library and executable modules.  If unset, generally defaults to libc, libm, and libdl.  Set to [] to prevent linking against the defaults."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
            <object-field name="recovery">
                <field name="srcs" type="string[]" descr="list of source files that should only be used in the recovery variant of the C/C++ module."/>
                <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="cflags" type="string[]" descr="List of additional cflags that should be used to build the recovery variant of the C/C++ module."/>
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the recovery variant of the C/C++ module."/>
            </object-field>
            <object-field name="vendor">
                <field name="override_export_include_dirs" type="string[]" descr="list of exported include directories, like export_include_dirs, that will be applied to the vendor variant of this library. This will overwrite any other declarations."/>
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_runtime_libs" type="blueprint[]" descr="list of runtime libs that should not be installed along with the vendor variant of the C/C++ module."/>
                <field name="version_script" type="string" descr="version script for this vendor variant"/>
                <field name="srcs" type="string[]" descr="list of source files that should only be used in the vendor variant of the C/C++ module."/>
                <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="cflags" type="string[]" descr="List of additional cflags that should be used to build the vendor variant of the C/C++ module."/>
            </object-field>
        </object-field>
        <field name="tidy" type="bool" descr="whether to run clang-tidy over C-like sources."/>
        <field name="tidy_checks" type="string[]" descr="Extra checks to enable or disable in clang-tidy"/>
        <field name="tidy_checks_as_errors" type="string[]" descr="Checks that should be treated as errors."/>
        <field name="tidy_flags" type="string[]" descr="Extra flags to pass to clang-tidy"/>
        <field name="unexported_symbols_list" type="string" descr="local file name to pass to the linker as -unexported_symbols_list"/>
        <field name="unique_host_soname" type="bool" descr="rename host libraries to prevent overlap with system installed libraries"/>
        <field name="use_clang_lld" type="bool" descr="Use clang lld instead of gnu ld."/>
        <field name="use_version_lib" type="bool" descr="make android::build:GetBuildNumber() available containing the build ID."/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vendor_available" type="bool" descr="whether this module should be allowed to be directly depended by other modules with `vendor: true`, `proprietary: true`, or `vendor_available:true`. If set to true, two variants will be built separately, one like normal, and the other limited to the set of libraries and headers that are exposed to /vendor modules. The vendor variant may be used with a different (newer) /system, so it shouldn't have any unversioned runtime dependencies, or make assumptions about the system that may not be true in the future. If set to false, this module becomes inaccessible from /vendor modules. Default value is true when vndk: {enabled: true} or vendor: true. Nothing happens if BOARD_VNDK_VERSION isn't set in the BoardConfig.mk"/>
        <field name="version_script" type="string" descr="local file name to pass to the linker as --version_script"/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
        <object-field name="vndk">
            <field name="enabled" type="bool" descr="declared as a VNDK or VNDK-SP module. The vendor variant will be installed in /system instead of /vendor partition. `vendor_vailable` must be explicitly set to either true or false together with `vndk: {enabled: true}`."/>
            <field name="support_system_process" type="bool" descr="declared as a VNDK-SP module, which is a subset of VNDK. `vndk: { enabled: true }` must set together. All these modules are allowed to link to VNDK-SP or LL-NDK modules only. Other dependency will cause link-type errors. If `support_system_process` is not set or set to false, the module is VNDK-core and can link to other VNDK-core, VNDK-SP or LL-NDK modules only."/>
            <field name="extends" type="string" descr="Extending another module"/>
        </object-field>
        <field name="whole_static_libs" type="blueprint[]" descr="list of modules whose object files should be linked into this module in their entirety.  For static library modules, all of the .o files from the intermediate directory of the dependency will be linked into this modules .a file.  For a shared library, the dependency's .a file will be linked into this module using -Wl,--whole-archive."/>
        <field name="xom" type="bool"/>
        <field name="yaccflags" type="string[]" descr="list of module-specific flags that will be used for .y and .yy compiles"/>
    </blueprint>
    <blueprint name="xsd_config">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]"/>
        <field name="api_dir" type="string"/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="package_name" type="string"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
        </object-field>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="cc_benchmark">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="list of source files used to compile the C/C++ module.  May be .c, .cpp, or .S files. srcs may reference the outputs of other modules that produce source files like genrule or filegroup using the syntax &quot;:module&quot;."/>
        <field name="host_supported" type="bool" descr="If set to true, build a variant of the module for the host.  Defaults to false."/>
        <field name="device_supported" type="bool" descr="If set to true, build a variant of the module for the device.  Defaults to true."/>
        <object-field name="aidl">
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the aidl include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the aidl include paths."/>
            <field name="generate_traces" type="bool" descr="whether to generate traces (for systrace) for this interface"/>
        </object-field>
        <field name="allow_undefined_symbols" type="bool" descr="allow the module to contain undefined symbols.  By default, modules cannot contain undefined symbols that are not satisified by their immediate dependencies.  Set this flag to true to remove --no-undefined from the linker flags. This flag should only be necessary for compiling low-level libraries like libc."/>
        <field name="asflags" type="string[]" descr="list of module-specific flags that will be used for .S compiles"/>
        <field name="bootstrap" type="bool" descr="Allows this module to use non-APEX version of libraries. Useful for building binaries that are started before APEXes are activated."/>
        <field name="c_std" type="string" descr="C standard version to use. Can be a specific version (such as &quot;gnu11&quot;), &quot;experimental&quot; (which will use draft versions like C1x when available), or the empty string (which will use the default)."/>
        <field name="cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles."/>
        <field name="clang" type="bool" descr="Deprecated. true is the default, false is invalid."/>
        <field name="clang_asflags" type="string[]" descr="list of module-specific flags that will be used for .S compiles when compiling with clang"/>
        <field name="clang_cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles when compiling with clang"/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="conlyflags" type="string[]" descr="list of module-specific flags that will be used for C compiles"/>
        <field name="cpp_std" type="string" descr="C++ standard version to use. Can be a specific version (such as &quot;gnu++11&quot;), &quot;experimental&quot; (which will use draft versions like C++1z when available), or the empty string (which will use the default)."/>
        <field name="cppflags" type="string[]" descr="list of module-specific flags that will be used for C++ compiles"/>
        <field name="data" type="string[]" descr="list of files or filegroup modules that provide data that should be installed alongside the test"/>
        <object-field name="debug" descr="release">
            <field name="cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles in debug or release builds"/>
        </object-field>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="double_loadable" type="bool" descr="whether this module is capable of being loaded with other instance (possibly an older version) of the same module in the same process. Currently, a shared library that is a member of VNDK (vndk: {enabled: true}) can be double loaded in a vendor process if the library is also a (direct and indirect) dependency of an LLNDK library. Such libraries must be explicitly marked as `double_loadable: true` by the owner, or the dependency from the LLNDK lib should be cut if the lib is not designed to be double loaded."/>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the C/C++ module. This is most useful in the arch/multilib variants to remove non-common files"/>
        <field name="export_generated_headers" type="blueprint[]" descr="list of generated headers to re-export include directories from. Entries must be present in generated_headers."/>
        <field name="export_header_lib_headers" type="blueprint[]" descr="list of header libraries to re-export include directories from. Entries must be present in header_libs."/>
        <field name="export_shared_lib_headers" type="blueprint[]" descr="list of shared libraries to re-export include directories from. Entries must be present in shared_libs."/>
        <field name="export_static_lib_headers" type="blueprint[]" descr="list of static libraries to re-export include directories from. Entries must be present in static_libs."/>
        <field name="generated_headers" type="blueprint[]" descr="list of generated headers to add to the include path. These are the names of genrule modules."/>
        <field name="generated_sources" type="blueprint[]" descr="list of generated sources to compile. These are the names of gensrcs or genrule modules."/>
        <field name="gnu_extensions" type="bool" descr="if set to false, use -std=c++* instead of -std=gnu++*"/>
        <field name="group_static_libs" type="bool" descr="group static libraries.  This can resolve missing symbols issues with interdependencies between static libraries, but it is generally better to order them correctly instead."/>
        <field name="header_libs" type="blueprint[]" descr="list of modules that should only provide headers for this module."/>
        <field name="host_ldlibs" type="string[]" descr="-l arguments to pass to linker for host-provided shared libraries"/>
        <field name="include_build_directory" type="bool" descr="Add the directory containing the Android.bp file to the list of include directories. Defaults to true."/>
        <field name="include_dirs" type="string[]" descr="list of directories relative to the root of the source tree that will be added to the include path using -I. If possible, don't use this.  If adding paths from the current directory use local_include_dirs, if adding paths from other modules use export_include_dirs in that module."/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="instruction_set" type="string" descr="the instruction set architecture to use to compile the C/C++ module."/>
        <field name="ldflags" type="string[]" descr="list of module-specific flags that will be used for all link steps"/>
        <field name="local_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the include path using -I"/>
        <field name="logtags" type="string[]" descr="*.logtags files, to combine together in order to generate the /system/etc/event-log-tags file"/>
        <object-field name="lto">
            <field name="never" type="bool"/>
            <field name="full" type="bool"/>
            <field name="thin" type="bool"/>
        </object-field>
        <field name="native_coverage" type="bool"/>
        <field name="no_libcrt" type="bool" descr="don't link in libclang_rt.builtins-*.a"/>
        <field name="no_libgcc" type="bool" descr="don't link in libgcc.a"/>
        <field name="nocrt" type="bool" descr="don't link in crt_begin and crt_end.  This flag should only be necessary for compiling crt or libc."/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="openmp" type="bool" descr="Build and link with OpenMP"/>
        <field name="overrides" type="blueprint[]" descr="Names of modules to be overridden. Listed modules can only be other binaries (in Make or Soong). This does not completely prevent installation of the overridden binaries, but if both binaries would be installed by default (in PRODUCT_PACKAGES) the other binary will be removed from PRODUCT_PACKAGES."/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="pack_relocations" type="bool" descr="Generate compact dynamic relocation table, default true."/>
        <object-field name="pgo">
            <field name="instrumentation" type="bool"/>
            <field name="sampling" type="bool"/>
            <field name="profile_file" type="string"/>
            <field name="benchmarks" type="string[]"/>
            <field name="enable_profile_use" type="bool"/>
            <field name="cflags" type="string[]" descr="Additional compiler flags to use when building this module for profiling (either instrumentation or sampling)."/>
        </object-field>
        <field name="prefix_symbols" type="string" descr="if set, add an extra objcopy --prefix-symbols= step"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <object-field name="proto">
            <field name="type" type="string" descr="Proto generator type.  C++: full or lite.  Java: micro, nano, stream, or lite."/>
            <field name="plugin" type="string" descr="Proto plugin to use as the generator.  Must be a cc_binary_host module."/>
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the protoc include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the bp file that will be added to the protoc include paths."/>
            <field name="canonical_path_from_root" type="bool" descr="whether to identify the proto files from the root of the source tree (the original method in Android, useful for android-specific protos), or relative from where they were specified (useful for external/third party protos). This defaults to true today, but is expected to default to false in the future."/>
            <field name="static" type="bool" descr="Link statically against the protobuf runtime"/>
        </object-field>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="recovery_available" type="bool" descr="Make this module available when building for recovery"/>
        <field name="reexportedIncludeFlags" type="string[]"/>
        <field name="relative_install_path" type="string" descr="install to a subdirectory of the default install path for the module"/>
        <object-field name="renderscript">
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the llvm-rs-cc include paths"/>
            <field name="flags" type="string[]" descr="list of flags that will be passed to llvm-rs-cc"/>
            <field name="target_api" type="string" descr="Renderscript API level to target"/>
        </object-field>
        <field name="require_root" type="bool" descr="Add RootTargetPreparer to auto generated test config. This guarantees the test to run with root permission."/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="rtti" type="bool" descr="pass -frtti instead of -fno-rtti"/>
        <field name="runtime_libs" type="blueprint[]" descr="list of modules that should be installed with this module.  This is similar to 'required' but '.vendor' suffix will be appended to the module names if the shared libraries have vendor variants and this module uses VNDK."/>
        <object-field name="sanitize">
            <field name="never" type="bool"/>
            <field name="address" type="bool" descr="main sanitizers"/>
            <field name="thread" type="bool"/>
            <field name="hwaddress" type="bool"/>
            <field name="undefined" type="bool" descr="local sanitizers"/>
            <field name="all_undefined" type="bool"/>
            <field name="misc_undefined" type="string[]"/>
            <field name="coverage" type="bool"/>
            <field name="safestack" type="bool"/>
            <field name="cfi" type="bool"/>
            <field name="integer_overflow" type="bool"/>
            <field name="scudo" type="bool"/>
            <field name="scs" type="bool"/>
            <object-field name="diag">
                <field name="undefined" type="bool"/>
                <field name="cfi" type="bool"/>
                <field name="integer_overflow" type="bool"/>
                <field name="misc_undefined" type="string[]"/>
                <field name="no_recover" type="string[]"/>
            </object-field>
            <field name="recover" type="string[]" descr="value to pass to -fsanitize-recover="/>
            <field name="blacklist" type="string" descr="value to pass to -fsanitize-blacklist"/>
        </object-field>
        <field name="sdclang" type="bool" descr="compile module with SDLLVM instead of AOSP LLVM"/>
        <field name="sdk_version" type="string" descr="Minimum sdk version supported when compiling against the ndk"/>
        <field name="shared_libs" type="blueprint[]" descr="list of modules that should be dynamically linked into this module."/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="static_executable" type="bool" descr="compile executable with -static"/>
        <field name="static_libs" type="blueprint[]" descr="list of modules that should be statically linked into this module."/>
        <field name="stem" type="string" descr="set the name of the output"/>
        <field name="stl" type="string" descr="Select the STL library to use.  Possible values are &quot;libc++&quot;, &quot;libc++_static&quot;, &quot;libstdc++&quot;, or &quot;none&quot;. Leave blank to select the default."/>
        <object-field name="strip">
            <field name="none" type="bool"/>
            <field name="all" type="bool"/>
            <field name="keep_symbols" type="bool"/>
            <field name="keep_symbols_list" type="string[]"/>
            <field name="use_gnu_strip" type="bool"/>
        </object-field>
        <field name="suffix" type="string" descr="append to the name of the output"/>
        <field name="symbol_ordering_file" type="string" descr="Local file name to pass to the linker as --symbol-ordering-file"/>
        <field name="symlink_preferred_arch" type="bool" descr="if set, install a symlink to the preferred architecture"/>
        <field name="symlinks" type="string[]" descr="install symlinks to the binary.  Symlink names will have the suffix and the binary extension (if any) appended"/>
        <field name="system_shared_libs" type="blueprint[]" descr="list of system libraries that will be dynamically linked to shared library and executable modules.  If unset, generally defaults to libc, libm, and libdl.  Set to [] to prevent linking against the defaults."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
            <object-field name="recovery">
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="srcs" type="string[]" descr="list of source files that should only be used in the recovery variant of the C/C++ module."/>
                <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="cflags" type="string[]" descr="List of additional cflags that should be used to build the recovery variant of the C/C++ module."/>
            </object-field>
            <object-field name="vendor">
                <field name="srcs" type="string[]" descr="list of source files that should only be used in the vendor variant of the C/C++ module."/>
                <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="cflags" type="string[]" descr="List of additional cflags that should be used to build the vendor variant of the C/C++ module."/>
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_runtime_libs" type="blueprint[]" descr="list of runtime libs that should not be installed along with the vendor variant of the C/C++ module."/>
                <field name="version_script" type="string" descr="version script for this vendor variant"/>
            </object-field>
        </object-field>
        <field name="test_config" type="string" descr="the name of the test configuration (for example &quot;AndroidTest.xml&quot;) that should be installed with the module."/>
        <field name="test_config_template" type="string" descr="the name of the test configuration template (for example &quot;AndroidTestTemplate.xml&quot;) that should be installed with the module."/>
        <field name="test_suites" type="string[]" descr="list of compatibility suites (for example &quot;cts&quot;, &quot;vts&quot;) that the module should be installed into."/>
        <field name="tidy" type="bool" descr="whether to run clang-tidy over C-like sources."/>
        <field name="tidy_checks" type="string[]" descr="Extra checks to enable or disable in clang-tidy"/>
        <field name="tidy_checks_as_errors" type="string[]" descr="Checks that should be treated as errors."/>
        <field name="tidy_flags" type="string[]" descr="Extra flags to pass to clang-tidy"/>
        <field name="use_clang_lld" type="bool" descr="Use clang lld instead of gnu ld."/>
        <field name="use_version_lib" type="bool" descr="make android::build:GetBuildNumber() available containing the build ID."/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vendor_available" type="bool" descr="whether this module should be allowed to be directly depended by other modules with `vendor: true`, `proprietary: true`, or `vendor_available:true`. If set to true, two variants will be built separately, one like normal, and the other limited to the set of libraries and headers that are exposed to /vendor modules. The vendor variant may be used with a different (newer) /system, so it shouldn't have any unversioned runtime dependencies, or make assumptions about the system that may not be true in the future. If set to false, this module becomes inaccessible from /vendor modules. Default value is true when vndk: {enabled: true} or vendor: true. Nothing happens if BOARD_VNDK_VERSION isn't set in the BoardConfig.mk"/>
        <field name="version_script" type="string" descr="local file name to pass to the linker as --version_script"/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
        <object-field name="vndk">
            <field name="enabled" type="bool" descr="declared as a VNDK or VNDK-SP module. The vendor variant will be installed in /system instead of /vendor partition. `vendor_vailable` must be explicitly set to either true or false together with `vndk: {enabled: true}`."/>
            <field name="support_system_process" type="bool" descr="declared as a VNDK-SP module, which is a subset of VNDK. `vndk: { enabled: true }` must set together. All these modules are allowed to link to VNDK-SP or LL-NDK modules only. Other dependency will cause link-type errors. If `support_system_process` is not set or set to false, the module is VNDK-core and can link to other VNDK-core, VNDK-SP or LL-NDK modules only."/>
            <field name="extends" type="string" descr="Extending another module"/>
        </object-field>
        <field name="whole_static_libs" type="blueprint[]" descr="list of modules whose object files should be linked into this module in their entirety.  For static library modules, all of the .o files from the intermediate directory of the dependency will be linked into this modules .a file.  For a shared library, the dependency's .a file will be linked into this module using -Wl,--whole-archive."/>
        <field name="xom" type="bool"/>
        <field name="yaccflags" type="string[]" descr="list of module-specific flags that will be used for .y and .yy compiles"/>
    </blueprint>
    <blueprint name="cc_benchmark_host">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="list of source files used to compile the C/C++ module.  May be .c, .cpp, or .S files. srcs may reference the outputs of other modules that produce source files like genrule or filegroup using the syntax &quot;:module&quot;."/>
        <object-field name="aidl">
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the aidl include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the aidl include paths."/>
            <field name="generate_traces" type="bool" descr="whether to generate traces (for systrace) for this interface"/>
        </object-field>
        <field name="allow_undefined_symbols" type="bool" descr="allow the module to contain undefined symbols.  By default, modules cannot contain undefined symbols that are not satisified by their immediate dependencies.  Set this flag to true to remove --no-undefined from the linker flags. This flag should only be necessary for compiling low-level libraries like libc."/>
        <field name="asflags" type="string[]" descr="list of module-specific flags that will be used for .S compiles"/>
        <field name="bootstrap" type="bool" descr="Allows this module to use non-APEX version of libraries. Useful for building binaries that are started before APEXes are activated."/>
        <field name="c_std" type="string" descr="C standard version to use. Can be a specific version (such as &quot;gnu11&quot;), &quot;experimental&quot; (which will use draft versions like C1x when available), or the empty string (which will use the default)."/>
        <field name="cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles."/>
        <field name="clang" type="bool" descr="Deprecated. true is the default, false is invalid."/>
        <field name="clang_asflags" type="string[]" descr="list of module-specific flags that will be used for .S compiles when compiling with clang"/>
        <field name="clang_cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles when compiling with clang"/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="conlyflags" type="string[]" descr="list of module-specific flags that will be used for C compiles"/>
        <field name="cpp_std" type="string" descr="C++ standard version to use. Can be a specific version (such as &quot;gnu++11&quot;), &quot;experimental&quot; (which will use draft versions like C++1z when available), or the empty string (which will use the default)."/>
        <field name="cppflags" type="string[]" descr="list of module-specific flags that will be used for C++ compiles"/>
        <field name="data" type="string[]" descr="list of files or filegroup modules that provide data that should be installed alongside the test"/>
        <object-field name="debug" descr="release">
            <field name="cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles in debug or release builds"/>
        </object-field>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="double_loadable" type="bool" descr="whether this module is capable of being loaded with other instance (possibly an older version) of the same module in the same process. Currently, a shared library that is a member of VNDK (vndk: {enabled: true}) can be double loaded in a vendor process if the library is also a (direct and indirect) dependency of an LLNDK library. Such libraries must be explicitly marked as `double_loadable: true` by the owner, or the dependency from the LLNDK lib should be cut if the lib is not designed to be double loaded."/>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the C/C++ module. This is most useful in the arch/multilib variants to remove non-common files"/>
        <field name="export_generated_headers" type="blueprint[]" descr="list of generated headers to re-export include directories from. Entries must be present in generated_headers."/>
        <field name="export_header_lib_headers" type="blueprint[]" descr="list of header libraries to re-export include directories from. Entries must be present in header_libs."/>
        <field name="export_shared_lib_headers" type="blueprint[]" descr="list of shared libraries to re-export include directories from. Entries must be present in shared_libs."/>
        <field name="export_static_lib_headers" type="blueprint[]" descr="list of static libraries to re-export include directories from. Entries must be present in static_libs."/>
        <field name="generated_headers" type="blueprint[]" descr="list of generated headers to add to the include path. These are the names of genrule modules."/>
        <field name="generated_sources" type="blueprint[]" descr="list of generated sources to compile. These are the names of gensrcs or genrule modules."/>
        <field name="gnu_extensions" type="bool" descr="if set to false, use -std=c++* instead of -std=gnu++*"/>
        <field name="group_static_libs" type="bool" descr="group static libraries.  This can resolve missing symbols issues with interdependencies between static libraries, but it is generally better to order them correctly instead."/>
        <field name="header_libs" type="blueprint[]" descr="list of modules that should only provide headers for this module."/>
        <field name="host_ldlibs" type="string[]" descr="-l arguments to pass to linker for host-provided shared libraries"/>
        <field name="include_build_directory" type="bool" descr="Add the directory containing the Android.bp file to the list of include directories. Defaults to true."/>
        <field name="include_dirs" type="string[]" descr="list of directories relative to the root of the source tree that will be added to the include path using -I. If possible, don't use this.  If adding paths from the current directory use local_include_dirs, if adding paths from other modules use export_include_dirs in that module."/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="instruction_set" type="string" descr="the instruction set architecture to use to compile the C/C++ module."/>
        <field name="ldflags" type="string[]" descr="list of module-specific flags that will be used for all link steps"/>
        <field name="local_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the include path using -I"/>
        <field name="logtags" type="string[]" descr="*.logtags files, to combine together in order to generate the /system/etc/event-log-tags file"/>
        <object-field name="lto">
            <field name="never" type="bool"/>
            <field name="full" type="bool"/>
            <field name="thin" type="bool"/>
        </object-field>
        <field name="native_coverage" type="bool"/>
        <field name="no_libcrt" type="bool" descr="don't link in libclang_rt.builtins-*.a"/>
        <field name="no_libgcc" type="bool" descr="don't link in libgcc.a"/>
        <field name="nocrt" type="bool" descr="don't link in crt_begin and crt_end.  This flag should only be necessary for compiling crt or libc."/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="openmp" type="bool" descr="Build and link with OpenMP"/>
        <field name="overrides" type="blueprint[]" descr="Names of modules to be overridden. Listed modules can only be other binaries (in Make or Soong). This does not completely prevent installation of the overridden binaries, but if both binaries would be installed by default (in PRODUCT_PACKAGES) the other binary will be removed from PRODUCT_PACKAGES."/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="pack_relocations" type="bool" descr="Generate compact dynamic relocation table, default true."/>
        <object-field name="pgo">
            <field name="instrumentation" type="bool"/>
            <field name="sampling" type="bool"/>
            <field name="profile_file" type="string"/>
            <field name="benchmarks" type="string[]"/>
            <field name="enable_profile_use" type="bool"/>
            <field name="cflags" type="string[]" descr="Additional compiler flags to use when building this module for profiling (either instrumentation or sampling)."/>
        </object-field>
        <field name="prefix_symbols" type="string" descr="if set, add an extra objcopy --prefix-symbols= step"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <object-field name="proto">
            <field name="static" type="bool" descr="Link statically against the protobuf runtime"/>
            <field name="type" type="string" descr="Proto generator type.  C++: full or lite.  Java: micro, nano, stream, or lite."/>
            <field name="plugin" type="string" descr="Proto plugin to use as the generator.  Must be a cc_binary_host module."/>
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the protoc include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the bp file that will be added to the protoc include paths."/>
            <field name="canonical_path_from_root" type="bool" descr="whether to identify the proto files from the root of the source tree (the original method in Android, useful for android-specific protos), or relative from where they were specified (useful for external/third party protos). This defaults to true today, but is expected to default to false in the future."/>
        </object-field>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="recovery_available" type="bool" descr="Make this module available when building for recovery"/>
        <field name="reexportedIncludeFlags" type="string[]"/>
        <field name="relative_install_path" type="string" descr="install to a subdirectory of the default install path for the module"/>
        <object-field name="renderscript">
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the llvm-rs-cc include paths"/>
            <field name="flags" type="string[]" descr="list of flags that will be passed to llvm-rs-cc"/>
            <field name="target_api" type="string" descr="Renderscript API level to target"/>
        </object-field>
        <field name="require_root" type="bool" descr="Add RootTargetPreparer to auto generated test config. This guarantees the test to run with root permission."/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="rtti" type="bool" descr="pass -frtti instead of -fno-rtti"/>
        <field name="runtime_libs" type="blueprint[]" descr="list of modules that should be installed with this module.  This is similar to 'required' but '.vendor' suffix will be appended to the module names if the shared libraries have vendor variants and this module uses VNDK."/>
        <object-field name="sanitize">
            <field name="never" type="bool"/>
            <field name="address" type="bool" descr="main sanitizers"/>
            <field name="thread" type="bool"/>
            <field name="hwaddress" type="bool"/>
            <field name="undefined" type="bool" descr="local sanitizers"/>
            <field name="all_undefined" type="bool"/>
            <field name="misc_undefined" type="string[]"/>
            <field name="coverage" type="bool"/>
            <field name="safestack" type="bool"/>
            <field name="cfi" type="bool"/>
            <field name="integer_overflow" type="bool"/>
            <field name="scudo" type="bool"/>
            <field name="scs" type="bool"/>
            <object-field name="diag">
                <field name="undefined" type="bool"/>
                <field name="cfi" type="bool"/>
                <field name="integer_overflow" type="bool"/>
                <field name="misc_undefined" type="string[]"/>
                <field name="no_recover" type="string[]"/>
            </object-field>
            <field name="recover" type="string[]" descr="value to pass to -fsanitize-recover="/>
            <field name="blacklist" type="string" descr="value to pass to -fsanitize-blacklist"/>
        </object-field>
        <field name="sdclang" type="bool" descr="compile module with SDLLVM instead of AOSP LLVM"/>
        <field name="sdk_version" type="string" descr="Minimum sdk version supported when compiling against the ndk"/>
        <field name="shared_libs" type="blueprint[]" descr="list of modules that should be dynamically linked into this module."/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="static_executable" type="bool" descr="compile executable with -static"/>
        <field name="static_libs" type="blueprint[]" descr="list of modules that should be statically linked into this module."/>
        <field name="stem" type="string" descr="set the name of the output"/>
        <field name="stl" type="string" descr="Select the STL library to use.  Possible values are &quot;libc++&quot;, &quot;libc++_static&quot;, &quot;libstdc++&quot;, or &quot;none&quot;. Leave blank to select the default."/>
        <object-field name="strip">
            <field name="none" type="bool"/>
            <field name="all" type="bool"/>
            <field name="keep_symbols" type="bool"/>
            <field name="keep_symbols_list" type="string[]"/>
            <field name="use_gnu_strip" type="bool"/>
        </object-field>
        <field name="suffix" type="string" descr="append to the name of the output"/>
        <field name="symbol_ordering_file" type="string" descr="Local file name to pass to the linker as --symbol-ordering-file"/>
        <field name="symlink_preferred_arch" type="bool" descr="if set, install a symlink to the preferred architecture"/>
        <field name="symlinks" type="string[]" descr="install symlinks to the binary.  Symlink names will have the suffix and the binary extension (if any) appended"/>
        <field name="system_shared_libs" type="blueprint[]" descr="list of system libraries that will be dynamically linked to shared library and executable modules.  If unset, generally defaults to libc, libm, and libdl.  Set to [] to prevent linking against the defaults."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
            <object-field name="recovery">
                <field name="srcs" type="string[]" descr="list of source files that should only be used in the recovery variant of the C/C++ module."/>
                <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="cflags" type="string[]" descr="List of additional cflags that should be used to build the recovery variant of the C/C++ module."/>
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the recovery variant of the C/C++ module."/>
            </object-field>
            <object-field name="vendor">
                <field name="srcs" type="string[]" descr="list of source files that should only be used in the vendor variant of the C/C++ module."/>
                <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="cflags" type="string[]" descr="List of additional cflags that should be used to build the vendor variant of the C/C++ module."/>
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_runtime_libs" type="blueprint[]" descr="list of runtime libs that should not be installed along with the vendor variant of the C/C++ module."/>
                <field name="version_script" type="string" descr="version script for this vendor variant"/>
            </object-field>
        </object-field>
        <field name="test_config" type="string" descr="the name of the test configuration (for example &quot;AndroidTest.xml&quot;) that should be installed with the module."/>
        <field name="test_config_template" type="string" descr="the name of the test configuration template (for example &quot;AndroidTestTemplate.xml&quot;) that should be installed with the module."/>
        <field name="test_suites" type="string[]" descr="list of compatibility suites (for example &quot;cts&quot;, &quot;vts&quot;) that the module should be installed into."/>
        <field name="tidy" type="bool" descr="whether to run clang-tidy over C-like sources."/>
        <field name="tidy_checks" type="string[]" descr="Extra checks to enable or disable in clang-tidy"/>
        <field name="tidy_checks_as_errors" type="string[]" descr="Checks that should be treated as errors."/>
        <field name="tidy_flags" type="string[]" descr="Extra flags to pass to clang-tidy"/>
        <field name="use_clang_lld" type="bool" descr="Use clang lld instead of gnu ld."/>
        <field name="use_version_lib" type="bool" descr="make android::build:GetBuildNumber() available containing the build ID."/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vendor_available" type="bool" descr="whether this module should be allowed to be directly depended by other modules with `vendor: true`, `proprietary: true`, or `vendor_available:true`. If set to true, two variants will be built separately, one like normal, and the other limited to the set of libraries and headers that are exposed to /vendor modules. The vendor variant may be used with a different (newer) /system, so it shouldn't have any unversioned runtime dependencies, or make assumptions about the system that may not be true in the future. If set to false, this module becomes inaccessible from /vendor modules. Default value is true when vndk: {enabled: true} or vendor: true. Nothing happens if BOARD_VNDK_VERSION isn't set in the BoardConfig.mk"/>
        <field name="version_script" type="string" descr="local file name to pass to the linker as --version_script"/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
        <object-field name="vndk">
            <field name="enabled" type="bool" descr="declared as a VNDK or VNDK-SP module. The vendor variant will be installed in /system instead of /vendor partition. `vendor_vailable` must be explicitly set to either true or false together with `vndk: {enabled: true}`."/>
            <field name="support_system_process" type="bool" descr="declared as a VNDK-SP module, which is a subset of VNDK. `vndk: { enabled: true }` must set together. All these modules are allowed to link to VNDK-SP or LL-NDK modules only. Other dependency will cause link-type errors. If `support_system_process` is not set or set to false, the module is VNDK-core and can link to other VNDK-core, VNDK-SP or LL-NDK modules only."/>
            <field name="extends" type="string" descr="Extending another module"/>
        </object-field>
        <field name="whole_static_libs" type="blueprint[]" descr="list of modules whose object files should be linked into this module in their entirety.  For static library modules, all of the .o files from the intermediate directory of the dependency will be linked into this modules .a file.  For a shared library, the dependency's .a file will be linked into this module using -Wl,--whole-archive."/>
        <field name="xom" type="bool"/>
        <field name="yaccflags" type="string[]" descr="list of module-specific flags that will be used for .y and .yy compiles"/>
    </blueprint>
    <blueprint name="cc_binary">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="list of source files used to compile the C/C++ module.  May be .c, .cpp, or .S files. srcs may reference the outputs of other modules that produce source files like genrule or filegroup using the syntax &quot;:module&quot;."/>
        <field name="host_supported" type="bool" descr="If set to true, build a variant of the module for the host.  Defaults to false."/>
        <field name="device_supported" type="bool" descr="If set to true, build a variant of the module for the device.  Defaults to true."/>
        <object-field name="aidl">
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the aidl include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the aidl include paths."/>
            <field name="generate_traces" type="bool" descr="whether to generate traces (for systrace) for this interface"/>
        </object-field>
        <field name="allow_undefined_symbols" type="bool" descr="allow the module to contain undefined symbols.  By default, modules cannot contain undefined symbols that are not satisified by their immediate dependencies.  Set this flag to true to remove --no-undefined from the linker flags. This flag should only be necessary for compiling low-level libraries like libc."/>
        <field name="asflags" type="string[]" descr="list of module-specific flags that will be used for .S compiles"/>
        <field name="bootstrap" type="bool" descr="Allows this module to use non-APEX version of libraries. Useful for building binaries that are started before APEXes are activated."/>
        <field name="c_std" type="string" descr="C standard version to use. Can be a specific version (such as &quot;gnu11&quot;), &quot;experimental&quot; (which will use draft versions like C1x when available), or the empty string (which will use the default)."/>
        <field name="cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles."/>
        <field name="clang" type="bool" descr="Deprecated. true is the default, false is invalid."/>
        <field name="clang_asflags" type="string[]" descr="list of module-specific flags that will be used for .S compiles when compiling with clang"/>
        <field name="clang_cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles when compiling with clang"/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="conlyflags" type="string[]" descr="list of module-specific flags that will be used for C compiles"/>
        <field name="cpp_std" type="string" descr="C++ standard version to use. Can be a specific version (such as &quot;gnu++11&quot;), &quot;experimental&quot; (which will use draft versions like C++1z when available), or the empty string (which will use the default)."/>
        <field name="cppflags" type="string[]" descr="list of module-specific flags that will be used for C++ compiles"/>
        <object-field name="debug" descr="release">
            <field name="cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles in debug or release builds"/>
        </object-field>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="double_loadable" type="bool" descr="whether this module is capable of being loaded with other instance (possibly an older version) of the same module in the same process. Currently, a shared library that is a member of VNDK (vndk: {enabled: true}) can be double loaded in a vendor process if the library is also a (direct and indirect) dependency of an LLNDK library. Such libraries must be explicitly marked as `double_loadable: true` by the owner, or the dependency from the LLNDK lib should be cut if the lib is not designed to be double loaded."/>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the C/C++ module. This is most useful in the arch/multilib variants to remove non-common files"/>
        <field name="export_generated_headers" type="blueprint[]" descr="list of generated headers to re-export include directories from. Entries must be present in generated_headers."/>
        <field name="export_header_lib_headers" type="blueprint[]" descr="list of header libraries to re-export include directories from. Entries must be present in header_libs."/>
        <field name="export_shared_lib_headers" type="blueprint[]" descr="list of shared libraries to re-export include directories from. Entries must be present in shared_libs."/>
        <field name="export_static_lib_headers" type="blueprint[]" descr="list of static libraries to re-export include directories from. Entries must be present in static_libs."/>
        <field name="generated_headers" type="blueprint[]" descr="list of generated headers to add to the include path. These are the names of genrule modules."/>
        <field name="generated_sources" type="blueprint[]" descr="list of generated sources to compile. These are the names of gensrcs or genrule modules."/>
        <field name="gnu_extensions" type="bool" descr="if set to false, use -std=c++* instead of -std=gnu++*"/>
        <field name="group_static_libs" type="bool" descr="group static libraries.  This can resolve missing symbols issues with interdependencies between static libraries, but it is generally better to order them correctly instead."/>
        <field name="header_libs" type="blueprint[]" descr="list of modules that should only provide headers for this module."/>
        <field name="host_ldlibs" type="string[]" descr="-l arguments to pass to linker for host-provided shared libraries"/>
        <field name="include_build_directory" type="bool" descr="Add the directory containing the Android.bp file to the list of include directories. Defaults to true."/>
        <field name="include_dirs" type="string[]" descr="list of directories relative to the root of the source tree that will be added to the include path using -I. If possible, don't use this.  If adding paths from the current directory use local_include_dirs, if adding paths from other modules use export_include_dirs in that module."/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="instruction_set" type="string" descr="the instruction set architecture to use to compile the C/C++ module."/>
        <field name="ldflags" type="string[]" descr="list of module-specific flags that will be used for all link steps"/>
        <field name="local_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the include path using -I"/>
        <field name="logtags" type="string[]" descr="*.logtags files, to combine together in order to generate the /system/etc/event-log-tags file"/>
        <object-field name="lto">
            <field name="never" type="bool"/>
            <field name="full" type="bool"/>
            <field name="thin" type="bool"/>
        </object-field>
        <field name="native_coverage" type="bool"/>
        <field name="no_libcrt" type="bool" descr="don't link in libclang_rt.builtins-*.a"/>
        <field name="no_libgcc" type="bool" descr="don't link in libgcc.a"/>
        <field name="nocrt" type="bool" descr="don't link in crt_begin and crt_end.  This flag should only be necessary for compiling crt or libc."/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="openmp" type="bool" descr="Build and link with OpenMP"/>
        <field name="overrides" type="blueprint[]" descr="Names of modules to be overridden. Listed modules can only be other binaries (in Make or Soong). This does not completely prevent installation of the overridden binaries, but if both binaries would be installed by default (in PRODUCT_PACKAGES) the other binary will be removed from PRODUCT_PACKAGES."/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="pack_relocations" type="bool" descr="Generate compact dynamic relocation table, default true."/>
        <object-field name="pgo">
            <field name="instrumentation" type="bool"/>
            <field name="sampling" type="bool"/>
            <field name="profile_file" type="string"/>
            <field name="benchmarks" type="string[]"/>
            <field name="enable_profile_use" type="bool"/>
            <field name="cflags" type="string[]" descr="Additional compiler flags to use when building this module for profiling (either instrumentation or sampling)."/>
        </object-field>
        <field name="prefix_symbols" type="string" descr="if set, add an extra objcopy --prefix-symbols= step"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <object-field name="proto">
            <field name="type" type="string" descr="Proto generator type.  C++: full or lite.  Java: micro, nano, stream, or lite."/>
            <field name="plugin" type="string" descr="Proto plugin to use as the generator.  Must be a cc_binary_host module."/>
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the protoc include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the bp file that will be added to the protoc include paths."/>
            <field name="canonical_path_from_root" type="bool" descr="whether to identify the proto files from the root of the source tree (the original method in Android, useful for android-specific protos), or relative from where they were specified (useful for external/third party protos). This defaults to true today, but is expected to default to false in the future."/>
            <field name="static" type="bool" descr="Link statically against the protobuf runtime"/>
        </object-field>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="recovery_available" type="bool" descr="Make this module available when building for recovery"/>
        <field name="reexportedIncludeFlags" type="string[]"/>
        <field name="relative_install_path" type="string" descr="install to a subdirectory of the default install path for the module"/>
        <object-field name="renderscript">
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the llvm-rs-cc include paths"/>
            <field name="flags" type="string[]" descr="list of flags that will be passed to llvm-rs-cc"/>
            <field name="target_api" type="string" descr="Renderscript API level to target"/>
        </object-field>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="rtti" type="bool" descr="pass -frtti instead of -fno-rtti"/>
        <field name="runtime_libs" type="blueprint[]" descr="list of modules that should be installed with this module.  This is similar to 'required' but '.vendor' suffix will be appended to the module names if the shared libraries have vendor variants and this module uses VNDK."/>
        <object-field name="sanitize">
            <field name="never" type="bool"/>
            <field name="address" type="bool" descr="main sanitizers"/>
            <field name="thread" type="bool"/>
            <field name="hwaddress" type="bool"/>
            <field name="undefined" type="bool" descr="local sanitizers"/>
            <field name="all_undefined" type="bool"/>
            <field name="misc_undefined" type="string[]"/>
            <field name="coverage" type="bool"/>
            <field name="safestack" type="bool"/>
            <field name="cfi" type="bool"/>
            <field name="integer_overflow" type="bool"/>
            <field name="scudo" type="bool"/>
            <field name="scs" type="bool"/>
            <object-field name="diag">
                <field name="undefined" type="bool"/>
                <field name="cfi" type="bool"/>
                <field name="integer_overflow" type="bool"/>
                <field name="misc_undefined" type="string[]"/>
                <field name="no_recover" type="string[]"/>
            </object-field>
            <field name="recover" type="string[]" descr="value to pass to -fsanitize-recover="/>
            <field name="blacklist" type="string" descr="value to pass to -fsanitize-blacklist"/>
        </object-field>
        <field name="sdclang" type="bool" descr="compile module with SDLLVM instead of AOSP LLVM"/>
        <field name="sdk_version" type="string" descr="Minimum sdk version supported when compiling against the ndk"/>
        <field name="shared_libs" type="blueprint[]" descr="list of modules that should be dynamically linked into this module."/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="static_executable" type="bool" descr="compile executable with -static"/>
        <field name="static_libs" type="blueprint[]" descr="list of modules that should be statically linked into this module."/>
        <field name="stem" type="string" descr="set the name of the output"/>
        <field name="stl" type="string" descr="Select the STL library to use.  Possible values are &quot;libc++&quot;, &quot;libc++_static&quot;, &quot;libstdc++&quot;, or &quot;none&quot;. Leave blank to select the default."/>
        <object-field name="strip">
            <field name="none" type="bool"/>
            <field name="all" type="bool"/>
            <field name="keep_symbols" type="bool"/>
            <field name="keep_symbols_list" type="string[]"/>
            <field name="use_gnu_strip" type="bool"/>
        </object-field>
        <field name="suffix" type="string" descr="append to the name of the output"/>
        <field name="symbol_ordering_file" type="string" descr="Local file name to pass to the linker as --symbol-ordering-file"/>
        <field name="symlink_preferred_arch" type="bool" descr="if set, install a symlink to the preferred architecture"/>
        <field name="symlinks" type="string[]" descr="install symlinks to the binary.  Symlink names will have the suffix and the binary extension (if any) appended"/>
        <field name="system_shared_libs" type="blueprint[]" descr="list of system libraries that will be dynamically linked to shared library and executable modules.  If unset, generally defaults to libc, libm, and libdl.  Set to [] to prevent linking against the defaults."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
            <object-field name="recovery">
                <field name="srcs" type="string[]" descr="list of source files that should only be used in the recovery variant of the C/C++ module."/>
                <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="cflags" type="string[]" descr="List of additional cflags that should be used to build the recovery variant of the C/C++ module."/>
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the recovery variant of the C/C++ module."/>
            </object-field>
            <object-field name="vendor">
                <field name="srcs" type="string[]" descr="list of source files that should only be used in the vendor variant of the C/C++ module."/>
                <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="cflags" type="string[]" descr="List of additional cflags that should be used to build the vendor variant of the C/C++ module."/>
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_runtime_libs" type="blueprint[]" descr="list of runtime libs that should not be installed along with the vendor variant of the C/C++ module."/>
                <field name="version_script" type="string" descr="version script for this vendor variant"/>
            </object-field>
        </object-field>
        <field name="tidy" type="bool" descr="whether to run clang-tidy over C-like sources."/>
        <field name="tidy_checks" type="string[]" descr="Extra checks to enable or disable in clang-tidy"/>
        <field name="tidy_checks_as_errors" type="string[]" descr="Checks that should be treated as errors."/>
        <field name="tidy_flags" type="string[]" descr="Extra flags to pass to clang-tidy"/>
        <field name="use_clang_lld" type="bool" descr="Use clang lld instead of gnu ld."/>
        <field name="use_version_lib" type="bool" descr="make android::build:GetBuildNumber() available containing the build ID."/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vendor_available" type="bool" descr="whether this module should be allowed to be directly depended by other modules with `vendor: true`, `proprietary: true`, or `vendor_available:true`. If set to true, two variants will be built separately, one like normal, and the other limited to the set of libraries and headers that are exposed to /vendor modules. The vendor variant may be used with a different (newer) /system, so it shouldn't have any unversioned runtime dependencies, or make assumptions about the system that may not be true in the future. If set to false, this module becomes inaccessible from /vendor modules. Default value is true when vndk: {enabled: true} or vendor: true. Nothing happens if BOARD_VNDK_VERSION isn't set in the BoardConfig.mk"/>
        <field name="version_script" type="string" descr="local file name to pass to the linker as --version_script"/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
        <object-field name="vndk">
            <field name="enabled" type="bool" descr="declared as a VNDK or VNDK-SP module. The vendor variant will be installed in /system instead of /vendor partition. `vendor_vailable` must be explicitly set to either true or false together with `vndk: {enabled: true}`."/>
            <field name="support_system_process" type="bool" descr="declared as a VNDK-SP module, which is a subset of VNDK. `vndk: { enabled: true }` must set together. All these modules are allowed to link to VNDK-SP or LL-NDK modules only. Other dependency will cause link-type errors. If `support_system_process` is not set or set to false, the module is VNDK-core and can link to other VNDK-core, VNDK-SP or LL-NDK modules only."/>
            <field name="extends" type="string" descr="Extending another module"/>
        </object-field>
        <field name="whole_static_libs" type="blueprint[]" descr="list of modules whose object files should be linked into this module in their entirety.  For static library modules, all of the .o files from the intermediate directory of the dependency will be linked into this modules .a file.  For a shared library, the dependency's .a file will be linked into this module using -Wl,--whole-archive."/>
        <field name="xom" type="bool"/>
        <field name="yaccflags" type="string[]" descr="list of module-specific flags that will be used for .y and .yy compiles"/>
    </blueprint>
    <blueprint name="cc_binary_host">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="list of source files used to compile the C/C++ module.  May be .c, .cpp, or .S files. srcs may reference the outputs of other modules that produce source files like genrule or filegroup using the syntax &quot;:module&quot;."/>
        <object-field name="aidl">
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the aidl include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the aidl include paths."/>
            <field name="generate_traces" type="bool" descr="whether to generate traces (for systrace) for this interface"/>
        </object-field>
        <field name="allow_undefined_symbols" type="bool" descr="allow the module to contain undefined symbols.  By default, modules cannot contain undefined symbols that are not satisified by their immediate dependencies.  Set this flag to true to remove --no-undefined from the linker flags. This flag should only be necessary for compiling low-level libraries like libc."/>
        <field name="asflags" type="string[]" descr="list of module-specific flags that will be used for .S compiles"/>
        <field name="bootstrap" type="bool" descr="Allows this module to use non-APEX version of libraries. Useful for building binaries that are started before APEXes are activated."/>
        <field name="c_std" type="string" descr="C standard version to use. Can be a specific version (such as &quot;gnu11&quot;), &quot;experimental&quot; (which will use draft versions like C1x when available), or the empty string (which will use the default)."/>
        <field name="cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles."/>
        <field name="clang" type="bool" descr="Deprecated. true is the default, false is invalid."/>
        <field name="clang_asflags" type="string[]" descr="list of module-specific flags that will be used for .S compiles when compiling with clang"/>
        <field name="clang_cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles when compiling with clang"/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="conlyflags" type="string[]" descr="list of module-specific flags that will be used for C compiles"/>
        <field name="cpp_std" type="string" descr="C++ standard version to use. Can be a specific version (such as &quot;gnu++11&quot;), &quot;experimental&quot; (which will use draft versions like C++1z when available), or the empty string (which will use the default)."/>
        <field name="cppflags" type="string[]" descr="list of module-specific flags that will be used for C++ compiles"/>
        <object-field name="debug" descr="release">
            <field name="cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles in debug or release builds"/>
        </object-field>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="double_loadable" type="bool" descr="whether this module is capable of being loaded with other instance (possibly an older version) of the same module in the same process. Currently, a shared library that is a member of VNDK (vndk: {enabled: true}) can be double loaded in a vendor process if the library is also a (direct and indirect) dependency of an LLNDK library. Such libraries must be explicitly marked as `double_loadable: true` by the owner, or the dependency from the LLNDK lib should be cut if the lib is not designed to be double loaded."/>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the C/C++ module. This is most useful in the arch/multilib variants to remove non-common files"/>
        <field name="export_generated_headers" type="blueprint[]" descr="list of generated headers to re-export include directories from. Entries must be present in generated_headers."/>
        <field name="export_header_lib_headers" type="blueprint[]" descr="list of header libraries to re-export include directories from. Entries must be present in header_libs."/>
        <field name="export_shared_lib_headers" type="blueprint[]" descr="list of shared libraries to re-export include directories from. Entries must be present in shared_libs."/>
        <field name="export_static_lib_headers" type="blueprint[]" descr="list of static libraries to re-export include directories from. Entries must be present in static_libs."/>
        <field name="generated_headers" type="blueprint[]" descr="list of generated headers to add to the include path. These are the names of genrule modules."/>
        <field name="generated_sources" type="blueprint[]" descr="list of generated sources to compile. These are the names of gensrcs or genrule modules."/>
        <field name="gnu_extensions" type="bool" descr="if set to false, use -std=c++* instead of -std=gnu++*"/>
        <field name="group_static_libs" type="bool" descr="group static libraries.  This can resolve missing symbols issues with interdependencies between static libraries, but it is generally better to order them correctly instead."/>
        <field name="header_libs" type="blueprint[]" descr="list of modules that should only provide headers for this module."/>
        <field name="host_ldlibs" type="string[]" descr="-l arguments to pass to linker for host-provided shared libraries"/>
        <field name="include_build_directory" type="bool" descr="Add the directory containing the Android.bp file to the list of include directories. Defaults to true."/>
        <field name="include_dirs" type="string[]" descr="list of directories relative to the root of the source tree that will be added to the include path using -I. If possible, don't use this.  If adding paths from the current directory use local_include_dirs, if adding paths from other modules use export_include_dirs in that module."/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="instruction_set" type="string" descr="the instruction set architecture to use to compile the C/C++ module."/>
        <field name="ldflags" type="string[]" descr="list of module-specific flags that will be used for all link steps"/>
        <field name="local_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the include path using -I"/>
        <field name="logtags" type="string[]" descr="*.logtags files, to combine together in order to generate the /system/etc/event-log-tags file"/>
        <object-field name="lto">
            <field name="never" type="bool"/>
            <field name="full" type="bool"/>
            <field name="thin" type="bool"/>
        </object-field>
        <field name="native_coverage" type="bool"/>
        <field name="no_libcrt" type="bool" descr="don't link in libclang_rt.builtins-*.a"/>
        <field name="no_libgcc" type="bool" descr="don't link in libgcc.a"/>
        <field name="nocrt" type="bool" descr="don't link in crt_begin and crt_end.  This flag should only be necessary for compiling crt or libc."/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="openmp" type="bool" descr="Build and link with OpenMP"/>
        <field name="overrides" type="blueprint[]" descr="Names of modules to be overridden. Listed modules can only be other binaries (in Make or Soong). This does not completely prevent installation of the overridden binaries, but if both binaries would be installed by default (in PRODUCT_PACKAGES) the other binary will be removed from PRODUCT_PACKAGES."/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="pack_relocations" type="bool" descr="Generate compact dynamic relocation table, default true."/>
        <object-field name="pgo">
            <field name="instrumentation" type="bool"/>
            <field name="sampling" type="bool"/>
            <field name="profile_file" type="string"/>
            <field name="benchmarks" type="string[]"/>
            <field name="enable_profile_use" type="bool"/>
            <field name="cflags" type="string[]" descr="Additional compiler flags to use when building this module for profiling (either instrumentation or sampling)."/>
        </object-field>
        <field name="prefix_symbols" type="string" descr="if set, add an extra objcopy --prefix-symbols= step"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <object-field name="proto">
            <field name="static" type="bool" descr="Link statically against the protobuf runtime"/>
            <field name="type" type="string" descr="Proto generator type.  C++: full or lite.  Java: micro, nano, stream, or lite."/>
            <field name="plugin" type="string" descr="Proto plugin to use as the generator.  Must be a cc_binary_host module."/>
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the protoc include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the bp file that will be added to the protoc include paths."/>
            <field name="canonical_path_from_root" type="bool" descr="whether to identify the proto files from the root of the source tree (the original method in Android, useful for android-specific protos), or relative from where they were specified (useful for external/third party protos). This defaults to true today, but is expected to default to false in the future."/>
        </object-field>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="recovery_available" type="bool" descr="Make this module available when building for recovery"/>
        <field name="reexportedIncludeFlags" type="string[]"/>
        <field name="relative_install_path" type="string" descr="install to a subdirectory of the default install path for the module"/>
        <object-field name="renderscript">
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the llvm-rs-cc include paths"/>
            <field name="flags" type="string[]" descr="list of flags that will be passed to llvm-rs-cc"/>
            <field name="target_api" type="string" descr="Renderscript API level to target"/>
        </object-field>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="rtti" type="bool" descr="pass -frtti instead of -fno-rtti"/>
        <field name="runtime_libs" type="blueprint[]" descr="list of modules that should be installed with this module.  This is similar to 'required' but '.vendor' suffix will be appended to the module names if the shared libraries have vendor variants and this module uses VNDK."/>
        <object-field name="sanitize">
            <field name="never" type="bool"/>
            <field name="address" type="bool" descr="main sanitizers"/>
            <field name="thread" type="bool"/>
            <field name="hwaddress" type="bool"/>
            <field name="undefined" type="bool" descr="local sanitizers"/>
            <field name="all_undefined" type="bool"/>
            <field name="misc_undefined" type="string[]"/>
            <field name="coverage" type="bool"/>
            <field name="safestack" type="bool"/>
            <field name="cfi" type="bool"/>
            <field name="integer_overflow" type="bool"/>
            <field name="scudo" type="bool"/>
            <field name="scs" type="bool"/>
            <object-field name="diag">
                <field name="undefined" type="bool"/>
                <field name="cfi" type="bool"/>
                <field name="integer_overflow" type="bool"/>
                <field name="misc_undefined" type="string[]"/>
                <field name="no_recover" type="string[]"/>
            </object-field>
            <field name="recover" type="string[]" descr="value to pass to -fsanitize-recover="/>
            <field name="blacklist" type="string" descr="value to pass to -fsanitize-blacklist"/>
        </object-field>
        <field name="sdclang" type="bool" descr="compile module with SDLLVM instead of AOSP LLVM"/>
        <field name="sdk_version" type="string" descr="Minimum sdk version supported when compiling against the ndk"/>
        <field name="shared_libs" type="blueprint[]" descr="list of modules that should be dynamically linked into this module."/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="static_executable" type="bool" descr="compile executable with -static"/>
        <field name="static_libs" type="blueprint[]" descr="list of modules that should be statically linked into this module."/>
        <field name="stem" type="string" descr="set the name of the output"/>
        <field name="stl" type="string" descr="Select the STL library to use.  Possible values are &quot;libc++&quot;, &quot;libc++_static&quot;, &quot;libstdc++&quot;, or &quot;none&quot;. Leave blank to select the default."/>
        <object-field name="strip">
            <field name="none" type="bool"/>
            <field name="all" type="bool"/>
            <field name="keep_symbols" type="bool"/>
            <field name="keep_symbols_list" type="string[]"/>
            <field name="use_gnu_strip" type="bool"/>
        </object-field>
        <field name="suffix" type="string" descr="append to the name of the output"/>
        <field name="symbol_ordering_file" type="string" descr="Local file name to pass to the linker as --symbol-ordering-file"/>
        <field name="symlink_preferred_arch" type="bool" descr="if set, install a symlink to the preferred architecture"/>
        <field name="symlinks" type="string[]" descr="install symlinks to the binary.  Symlink names will have the suffix and the binary extension (if any) appended"/>
        <field name="system_shared_libs" type="blueprint[]" descr="list of system libraries that will be dynamically linked to shared library and executable modules.  If unset, generally defaults to libc, libm, and libdl.  Set to [] to prevent linking against the defaults."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
            <object-field name="recovery">
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="srcs" type="string[]" descr="list of source files that should only be used in the recovery variant of the C/C++ module."/>
                <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="cflags" type="string[]" descr="List of additional cflags that should be used to build the recovery variant of the C/C++ module."/>
            </object-field>
            <object-field name="vendor">
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_runtime_libs" type="blueprint[]" descr="list of runtime libs that should not be installed along with the vendor variant of the C/C++ module."/>
                <field name="version_script" type="string" descr="version script for this vendor variant"/>
                <field name="srcs" type="string[]" descr="list of source files that should only be used in the vendor variant of the C/C++ module."/>
                <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="cflags" type="string[]" descr="List of additional cflags that should be used to build the vendor variant of the C/C++ module."/>
            </object-field>
        </object-field>
        <field name="tidy" type="bool" descr="whether to run clang-tidy over C-like sources."/>
        <field name="tidy_checks" type="string[]" descr="Extra checks to enable or disable in clang-tidy"/>
        <field name="tidy_checks_as_errors" type="string[]" descr="Checks that should be treated as errors."/>
        <field name="tidy_flags" type="string[]" descr="Extra flags to pass to clang-tidy"/>
        <field name="use_clang_lld" type="bool" descr="Use clang lld instead of gnu ld."/>
        <field name="use_version_lib" type="bool" descr="make android::build:GetBuildNumber() available containing the build ID."/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vendor_available" type="bool" descr="whether this module should be allowed to be directly depended by other modules with `vendor: true`, `proprietary: true`, or `vendor_available:true`. If set to true, two variants will be built separately, one like normal, and the other limited to the set of libraries and headers that are exposed to /vendor modules. The vendor variant may be used with a different (newer) /system, so it shouldn't have any unversioned runtime dependencies, or make assumptions about the system that may not be true in the future. If set to false, this module becomes inaccessible from /vendor modules. Default value is true when vndk: {enabled: true} or vendor: true. Nothing happens if BOARD_VNDK_VERSION isn't set in the BoardConfig.mk"/>
        <field name="version_script" type="string" descr="local file name to pass to the linker as --version_script"/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
        <object-field name="vndk">
            <field name="enabled" type="bool" descr="declared as a VNDK or VNDK-SP module. The vendor variant will be installed in /system instead of /vendor partition. `vendor_vailable` must be explicitly set to either true or false together with `vndk: {enabled: true}`."/>
            <field name="support_system_process" type="bool" descr="declared as a VNDK-SP module, which is a subset of VNDK. `vndk: { enabled: true }` must set together. All these modules are allowed to link to VNDK-SP or LL-NDK modules only. Other dependency will cause link-type errors. If `support_system_process` is not set or set to false, the module is VNDK-core and can link to other VNDK-core, VNDK-SP or LL-NDK modules only."/>
            <field name="extends" type="string" descr="Extending another module"/>
        </object-field>
        <field name="whole_static_libs" type="blueprint[]" descr="list of modules whose object files should be linked into this module in their entirety.  For static library modules, all of the .o files from the intermediate directory of the dependency will be linked into this modules .a file.  For a shared library, the dependency's .a file will be linked into this module using -Wl,--whole-archive."/>
        <field name="xom" type="bool"/>
        <field name="yaccflags" type="string[]" descr="list of module-specific flags that will be used for .y and .yy compiles"/>
    </blueprint>
    <blueprint name="cc_defaults">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="list of source files used to compile the C/C++ module.  May be .c, .cpp, or .S files. srcs may reference the outputs of other modules that produce source files like genrule or filegroup using the syntax &quot;:module&quot;."/>
        <field name="host_supported" type="bool" descr="If set to true, build a variant of the module for the host.  Defaults to false."/>
        <field name="device_supported" type="bool" descr="If set to true, build a variant of the module for the device.  Defaults to true."/>
        <object-field name="aidl">
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the aidl include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the aidl include paths."/>
            <field name="generate_traces" type="bool" descr="whether to generate traces (for systrace) for this interface"/>
            <field name="export_aidl_headers" type="bool" descr="export headers generated from .aidl sources"/>
        </object-field>
        <field name="allow_undefined_symbols" type="bool" descr="allow the module to contain undefined symbols.  By default, modules cannot contain undefined symbols that are not satisified by their immediate dependencies.  Set this flag to true to remove --no-undefined from the linker flags. This flag should only be necessary for compiling low-level libraries like libc."/>
        <field name="asflags" type="string[]" descr="list of module-specific flags that will be used for .S compiles"/>
        <field name="bootstrap" type="bool" descr="Allows this module to use non-APEX version of libraries. Useful for building binaries that are started before APEXes are activated."/>
        <field name="c_std" type="string" descr="C standard version to use. Can be a specific version (such as &quot;gnu11&quot;), &quot;experimental&quot; (which will use draft versions like C1x when available), or the empty string (which will use the default)."/>
        <field name="cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles."/>
        <field name="clang" type="bool" descr="Deprecated. true is the default, false is invalid."/>
        <field name="clang_asflags" type="string[]" descr="list of module-specific flags that will be used for .S compiles when compiling with clang"/>
        <field name="clang_cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles when compiling with clang"/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="conlyflags" type="string[]" descr="list of module-specific flags that will be used for C compiles"/>
        <field name="cpp_std" type="string" descr="C++ standard version to use. Can be a specific version (such as &quot;gnu++11&quot;), &quot;experimental&quot; (which will use draft versions like C++1z when available), or the empty string (which will use the default)."/>
        <field name="cppflags" type="string[]" descr="list of module-specific flags that will be used for C++ compiles"/>
        <field name="data" type="string[]" descr="list of files or filegroup modules that provide data that should be installed alongside the test"/>
        <object-field name="debug" descr="release">
            <field name="cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles in debug or release builds"/>
        </object-field>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="double_loadable" type="bool" descr="whether this module is capable of being loaded with other instance (possibly an older version) of the same module in the same process. Currently, a shared library that is a member of VNDK (vndk: {enabled: true}) can be double loaded in a vendor process if the library is also a (direct and indirect) dependency of an LLNDK library. Such libraries must be explicitly marked as `double_loadable: true` by the owner, or the dependency from the LLNDK lib should be cut if the lib is not designed to be double loaded."/>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the C/C++ module. This is most useful in the arch/multilib variants to remove non-common files"/>
        <field name="export_generated_headers" type="blueprint[]" descr="list of generated headers to re-export include directories from. Entries must be present in generated_headers."/>
        <field name="export_header_lib_headers" type="blueprint[]" descr="list of header libraries to re-export include directories from. Entries must be present in header_libs."/>
        <field name="export_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the include path (using -I) for this module and any module that links against this module.  Directories listed in export_include_dirs do not need to be listed in local_include_dirs."/>
        <field name="export_shared_lib_headers" type="blueprint[]" descr="list of shared libraries to re-export include directories from. Entries must be present in shared_libs."/>
        <field name="export_static_lib_headers" type="blueprint[]" descr="list of static libraries to re-export include directories from. Entries must be present in static_libs."/>
        <field name="force_symbols_not_weak_list" type="string" descr="local file name to pass to the linker as -force_symbols_not_weak_list"/>
        <field name="force_symbols_weak_list" type="string" descr="local file name to pass to the linker as -force_symbols_weak_list"/>
        <field name="generated_headers" type="blueprint[]" descr="list of generated headers to add to the include path. These are the names of genrule modules."/>
        <field name="generated_sources" type="blueprint[]" descr="list of generated sources to compile. These are the names of gensrcs or genrule modules."/>
        <field name="gnu_extensions" type="bool" descr="if set to false, use -std=c++* instead of -std=gnu++*"/>
        <field name="group_static_libs" type="bool" descr="group static libraries.  This can resolve missing symbols issues with interdependencies between static libraries, but it is generally better to order them correctly instead."/>
        <field name="gtest" type="bool" descr="if set, build against the gtest library. Defaults to true."/>
        <object-field name="header_abi_checker">
            <field name="symbol_file" type="string" descr="Path to a symbol file that specifies the symbols to be included in the generated ABI dump file"/>
            <field name="exclude_symbol_versions" type="string[]" descr="Symbol versions that should be ignored from the symbol file"/>
            <field name="exclude_symbol_tags" type="string[]" descr="Symbol tags that should be ignored from the symbol file"/>
        </object-field>
        <field name="header_libs" type="blueprint[]" descr="list of modules that should only provide headers for this module."/>
        <field name="host_ldlibs" type="string[]" descr="-l arguments to pass to linker for host-provided shared libraries"/>
        <field name="include_build_directory" type="bool" descr="Add the directory containing the Android.bp file to the list of include directories. Defaults to true."/>
        <field name="include_dirs" type="string[]" descr="list of directories relative to the root of the source tree that will be added to the include path using -I. If possible, don't use this.  If adding paths from the current directory use local_include_dirs, if adding paths from other modules use export_include_dirs in that module."/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="instruction_set" type="string" descr="the instruction set architecture to use to compile the C/C++ module."/>
        <field name="isolated" type="bool" descr="if set, use the isolated gtest runner. Defaults to false."/>
        <field name="ldflags" type="string[]" descr="list of module-specific flags that will be used for all link steps"/>
        <field name="local_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the include path using -I"/>
        <field name="logtags" type="string[]" descr="*.logtags files, to combine together in order to generate the /system/etc/event-log-tags file"/>
        <object-field name="lto">
            <field name="never" type="bool"/>
            <field name="full" type="bool"/>
            <field name="thin" type="bool"/>
        </object-field>
        <field name="native_coverage" type="bool"/>
        <field name="no_libcrt" type="bool" descr="don't link in libclang_rt.builtins-*.a"/>
        <field name="no_libgcc" type="bool" descr="don't link in libgcc.a"/>
        <field name="no_named_install_directory" type="bool" descr="Disables the creation of a test-specific directory when used with relative_install_path. Useful if several tests need to be in the same directory, but test_per_src doesn't work."/>
        <field name="nocrt" type="bool" descr="don't link in crt_begin and crt_end.  This flag should only be necessary for compiling crt or libc."/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="openmp" type="bool" descr="Build and link with OpenMP"/>
        <field name="overrides" type="blueprint[]" descr="Names of modules to be overridden. Listed modules can only be other shared libraries (in Make or Soong). This does not completely prevent installation of the overridden libraries, but if both binaries would be installed by default (in PRODUCT_PACKAGES) the other library will be removed from PRODUCT_PACKAGES."/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="pack_relocations" type="bool" descr="Generate compact dynamic relocation table, default true."/>
        <object-field name="pgo">
            <field name="instrumentation" type="bool"/>
            <field name="sampling" type="bool"/>
            <field name="profile_file" type="string"/>
            <field name="benchmarks" type="string[]"/>
            <field name="enable_profile_use" type="bool"/>
            <field name="cflags" type="string[]" descr="Additional compiler flags to use when building this module for profiling (either instrumentation or sampling)."/>
        </object-field>
        <field name="prefix_symbols" type="string" descr="if set, add an extra objcopy --prefix-symbols= step"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <object-field name="proto">
            <field name="export_proto_headers" type="bool" descr="export headers generated from .proto sources"/>
            <field name="static" type="bool" descr="Link statically against the protobuf runtime"/>
            <field name="type" type="string" descr="Proto generator type.  C++: full or lite.  Java: micro, nano, stream, or lite."/>
            <field name="plugin" type="string" descr="Proto plugin to use as the generator.  Must be a cc_binary_host module."/>
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the protoc include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the bp file that will be added to the protoc include paths."/>
            <field name="canonical_path_from_root" type="bool" descr="whether to identify the proto files from the root of the source tree (the original method in Android, useful for android-specific protos), or relative from where they were specified (useful for external/third party protos). This defaults to true today, but is expected to default to false in the future."/>
        </object-field>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="recovery_available" type="bool" descr="Make this module available when building for recovery"/>
        <field name="reexportedIncludeFlags" type="string[]"/>
        <field name="relative_install_path" type="string" descr="install to a subdirectory of the default install path for the module"/>
        <object-field name="renderscript">
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the llvm-rs-cc include paths"/>
            <field name="flags" type="string[]" descr="list of flags that will be passed to llvm-rs-cc"/>
            <field name="target_api" type="string" descr="Renderscript API level to target"/>
        </object-field>
        <field name="require_root" type="bool" descr="Add RootTargetPreparer to auto generated test config. This guarantees the test to run with root permission."/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="rtti" type="bool" descr="pass -frtti instead of -fno-rtti"/>
        <field name="runtime_libs" type="blueprint[]" descr="list of modules that should be installed with this module.  This is similar to 'required' but '.vendor' suffix will be appended to the module names if the shared libraries have vendor variants and this module uses VNDK."/>
        <object-field name="sanitize">
            <field name="never" type="bool"/>
            <field name="address" type="bool" descr="main sanitizers"/>
            <field name="thread" type="bool"/>
            <field name="hwaddress" type="bool"/>
            <field name="undefined" type="bool" descr="local sanitizers"/>
            <field name="all_undefined" type="bool"/>
            <field name="misc_undefined" type="string[]"/>
            <field name="coverage" type="bool"/>
            <field name="safestack" type="bool"/>
            <field name="cfi" type="bool"/>
            <field name="integer_overflow" type="bool"/>
            <field name="scudo" type="bool"/>
            <field name="scs" type="bool"/>
            <object-field name="diag">
                <field name="undefined" type="bool"/>
                <field name="cfi" type="bool"/>
                <field name="integer_overflow" type="bool"/>
                <field name="misc_undefined" type="string[]"/>
                <field name="no_recover" type="string[]"/>
            </object-field>
            <field name="recover" type="string[]" descr="value to pass to -fsanitize-recover="/>
            <field name="blacklist" type="string" descr="value to pass to -fsanitize-blacklist"/>
        </object-field>
        <field name="sdclang" type="bool" descr="compile module with SDLLVM instead of AOSP LLVM"/>
        <field name="sdk_version" type="string" descr="Minimum sdk version supported when compiling against the ndk"/>
        <field name="shared" type="string[]"/>
        <field name="shared_libs" type="blueprint[]" descr="list of modules that should be dynamically linked into this module."/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="static" type="string[]"/>
        <field name="static_executable" type="bool" descr="compile executable with -static"/>
        <field name="static_libs" type="blueprint[]" descr="list of modules that should be statically linked into this module."/>
        <field name="static_ndk_lib" type="bool"/>
        <field name="stem" type="string" descr="set the name of the output"/>
        <field name="stl" type="string" descr="Select the STL library to use.  Possible values are &quot;libc++&quot;, &quot;libc++_static&quot;, &quot;libstdc++&quot;, or &quot;none&quot;. Leave blank to select the default."/>
        <object-field name="strip">
            <field name="none" type="bool"/>
            <field name="all" type="bool"/>
            <field name="keep_symbols" type="bool"/>
            <field name="keep_symbols_list" type="string[]"/>
            <field name="use_gnu_strip" type="bool"/>
        </object-field>
        <object-field name="stubs">
            <field name="symbol_file" type="string" descr="Relative path to the symbol map. The symbol map provides the list of symbols that are exported for stubs variant of this library."/>
            <field name="versions" type="string[]" descr="List versions to generate stubs libs for."/>
        </object-field>
        <field name="suffix" type="string" descr="append to the name of the output"/>
        <field name="symbol_ordering_file" type="string" descr="Local file name to pass to the linker as --symbol-ordering-file"/>
        <field name="symlink_preferred_arch" type="bool" descr="if set, install a symlink to the preferred architecture"/>
        <field name="symlinks" type="string[]" descr="install symlinks to the binary.  Symlink names will have the suffix and the binary extension (if any) appended"/>
        <field name="system_shared_libs" type="blueprint[]" descr="list of system libraries that will be dynamically linked to shared library and executable modules.  If unset, generally defaults to libc, libm, and libdl.  Set to [] to prevent linking against the defaults."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
            <object-field name="recovery">
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="srcs" type="string[]" descr="list of source files that should only be used in the recovery variant of the C/C++ module."/>
                <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="cflags" type="string[]" descr="List of additional cflags that should be used to build the recovery variant of the C/C++ module."/>
            </object-field>
            <object-field name="vendor">
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_runtime_libs" type="blueprint[]" descr="list of runtime libs that should not be installed along with the vendor variant of the C/C++ module."/>
                <field name="version_script" type="string" descr="version script for this vendor variant"/>
                <field name="override_export_include_dirs" type="string[]" descr="list of exported include directories, like export_include_dirs, that will be applied to the vendor variant of this library. This will overwrite any other declarations."/>
                <field name="srcs" type="string[]" descr="list of source files that should only be used in the vendor variant of the C/C++ module."/>
                <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="cflags" type="string[]" descr="List of additional cflags that should be used to build the vendor variant of the C/C++ module."/>
            </object-field>
        </object-field>
        <field name="test_config" type="string" descr="the name of the test configuration (for example &quot;AndroidTest.xml&quot;) that should be installed with the module."/>
        <field name="test_config_template" type="string" descr="the name of the test configuration template (for example &quot;AndroidTestTemplate.xml&quot;) that should be installed with the module."/>
        <field name="test_options" type="string[]" descr="Test options."/>
        <field name="test_per_src" type="bool" descr="Create a separate binary for each source file.  Useful when there is global state that can not be torn down and reset between each test suite."/>
        <field name="test_suites" type="string[]" descr="list of compatibility suites (for example &quot;cts&quot;, &quot;vts&quot;) that the module should be installed into."/>
        <field name="tidy" type="bool" descr="whether to run clang-tidy over C-like sources."/>
        <field name="tidy_checks" type="string[]" descr="Extra checks to enable or disable in clang-tidy"/>
        <field name="tidy_checks_as_errors" type="string[]" descr="Checks that should be treated as errors."/>
        <field name="tidy_flags" type="string[]" descr="Extra flags to pass to clang-tidy"/>
        <field name="unexported_symbols_list" type="string" descr="local file name to pass to the linker as -unexported_symbols_list"/>
        <field name="unique_host_soname" type="bool" descr="rename host libraries to prevent overlap with system installed libraries"/>
        <field name="use_clang_lld" type="bool" descr="Use clang lld instead of gnu ld."/>
        <field name="use_version_lib" type="bool" descr="make android::build:GetBuildNumber() available containing the build ID."/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vendor_available" type="bool" descr="whether this module should be allowed to be directly depended by other modules with `vendor: true`, `proprietary: true`, or `vendor_available:true`. If set to true, two variants will be built separately, one like normal, and the other limited to the set of libraries and headers that are exposed to /vendor modules. The vendor variant may be used with a different (newer) /system, so it shouldn't have any unversioned runtime dependencies, or make assumptions about the system that may not be true in the future. If set to false, this module becomes inaccessible from /vendor modules. Default value is true when vndk: {enabled: true} or vendor: true. Nothing happens if BOARD_VNDK_VERSION isn't set in the BoardConfig.mk"/>
        <field name="version_script" type="string" descr="local file name to pass to the linker as --version_script"/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
        <object-field name="vndk">
            <field name="enabled" type="bool" descr="declared as a VNDK or VNDK-SP module. The vendor variant will be installed in /system instead of /vendor partition. `vendor_vailable` must be explicitly set to either true or false together with `vndk: {enabled: true}`."/>
            <field name="support_system_process" type="bool" descr="declared as a VNDK-SP module, which is a subset of VNDK. `vndk: { enabled: true }` must set together. All these modules are allowed to link to VNDK-SP or LL-NDK modules only. Other dependency will cause link-type errors. If `support_system_process` is not set or set to false, the module is VNDK-core and can link to other VNDK-core, VNDK-SP or LL-NDK modules only."/>
            <field name="extends" type="string" descr="Extending another module"/>
        </object-field>
        <field name="whole_static_libs" type="blueprint[]" descr="list of modules whose object files should be linked into this module in their entirety.  For static library modules, all of the .o files from the intermediate directory of the dependency will be linked into this modules .a file.  For a shared library, the dependency's .a file will be linked into this module using -Wl,--whole-archive."/>
        <field name="xom" type="bool"/>
        <field name="yaccflags" type="string[]" descr="list of module-specific flags that will be used for .y and .yy compiles"/>
    </blueprint>
    <blueprint name="cc_genrule">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="list of input files"/>
        <field name="host_supported" type="bool" descr="If set to true, build a variant of the module for the host.  Defaults to false."/>
        <field name="device_supported" type="bool" descr="If set to true, build a variant of the module for the device.  Defaults to true."/>
        <field name="cmd" type="string" descr="The command to run on one or more input files. Cmd supports substitution of a few variables (the actual substitution is implemented in GenerateAndroidBuildActions below) Available variables for substitution: All files used must be declared as inputs (to ensure proper up-to-date checks). Use &quot;$(in)&quot; directly in Cmd to ensure that all inputs used are declared."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="depfile" type="bool" descr="Enable reading a file containing dependencies in gcc format after the command completes"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="exclude_srcs" type="string[]" descr="input files to exclude"/>
        <field name="export_include_dirs" type="string[]" descr="List of directories to export generated headers from"/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="out" type="string[]" descr="names of the output files that will be generated"/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="recovery_available" type="bool"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
        </object-field>
        <field name="tool_files" type="string[]" descr="Local file that is used as the tool"/>
        <field name="tools" type="string[]" descr="name of the modules (if any) that produces the host executable.   Leave empty for prebuilts or scripts that do not need a module to build them."/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vendor_available" type="bool"/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="cc_library">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="list of source files used to compile the C/C++ module.  May be .c, .cpp, or .S files. srcs may reference the outputs of other modules that produce source files like genrule or filegroup using the syntax &quot;:module&quot;."/>
        <field name="host_supported" type="bool" descr="If set to true, build a variant of the module for the host.  Defaults to false."/>
        <field name="device_supported" type="bool" descr="If set to true, build a variant of the module for the device.  Defaults to true."/>
        <object-field name="aidl">
            <field name="export_aidl_headers" type="bool" descr="export headers generated from .aidl sources"/>
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the aidl include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the aidl include paths."/>
            <field name="generate_traces" type="bool" descr="whether to generate traces (for systrace) for this interface"/>
        </object-field>
        <field name="allow_undefined_symbols" type="bool" descr="allow the module to contain undefined symbols.  By default, modules cannot contain undefined symbols that are not satisified by their immediate dependencies.  Set this flag to true to remove --no-undefined from the linker flags. This flag should only be necessary for compiling low-level libraries like libc."/>
        <field name="asflags" type="string[]" descr="list of module-specific flags that will be used for .S compiles"/>
        <field name="bootstrap" type="bool" descr="Allows this module to use non-APEX version of libraries. Useful for building binaries that are started before APEXes are activated."/>
        <field name="c_std" type="string" descr="C standard version to use. Can be a specific version (such as &quot;gnu11&quot;), &quot;experimental&quot; (which will use draft versions like C1x when available), or the empty string (which will use the default)."/>
        <field name="cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles."/>
        <field name="clang" type="bool" descr="Deprecated. true is the default, false is invalid."/>
        <field name="clang_asflags" type="string[]" descr="list of module-specific flags that will be used for .S compiles when compiling with clang"/>
        <field name="clang_cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles when compiling with clang"/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="conlyflags" type="string[]" descr="list of module-specific flags that will be used for C compiles"/>
        <field name="cpp_std" type="string" descr="C++ standard version to use. Can be a specific version (such as &quot;gnu++11&quot;), &quot;experimental&quot; (which will use draft versions like C++1z when available), or the empty string (which will use the default)."/>
        <field name="cppflags" type="string[]" descr="list of module-specific flags that will be used for C++ compiles"/>
        <object-field name="debug" descr="release">
            <field name="cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles in debug or release builds"/>
        </object-field>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="double_loadable" type="bool" descr="whether this module is capable of being loaded with other instance (possibly an older version) of the same module in the same process. Currently, a shared library that is a member of VNDK (vndk: {enabled: true}) can be double loaded in a vendor process if the library is also a (direct and indirect) dependency of an LLNDK library. Such libraries must be explicitly marked as `double_loadable: true` by the owner, or the dependency from the LLNDK lib should be cut if the lib is not designed to be double loaded."/>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the C/C++ module. This is most useful in the arch/multilib variants to remove non-common files"/>
        <field name="export_generated_headers" type="blueprint[]" descr="list of generated headers to re-export include directories from. Entries must be present in generated_headers."/>
        <field name="export_header_lib_headers" type="blueprint[]" descr="list of header libraries to re-export include directories from. Entries must be present in header_libs."/>
        <field name="export_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the include path (using -I) for this module and any module that links against this module.  Directories listed in export_include_dirs do not need to be listed in local_include_dirs."/>
        <field name="export_shared_lib_headers" type="blueprint[]" descr="list of shared libraries to re-export include directories from. Entries must be present in shared_libs."/>
        <field name="export_static_lib_headers" type="blueprint[]" descr="list of static libraries to re-export include directories from. Entries must be present in static_libs."/>
        <field name="force_symbols_not_weak_list" type="string" descr="local file name to pass to the linker as -force_symbols_not_weak_list"/>
        <field name="force_symbols_weak_list" type="string" descr="local file name to pass to the linker as -force_symbols_weak_list"/>
        <field name="generated_headers" type="blueprint[]" descr="list of generated headers to add to the include path. These are the names of genrule modules."/>
        <field name="generated_sources" type="blueprint[]" descr="list of generated sources to compile. These are the names of gensrcs or genrule modules."/>
        <field name="gnu_extensions" type="bool" descr="if set to false, use -std=c++* instead of -std=gnu++*"/>
        <field name="group_static_libs" type="bool" descr="group static libraries.  This can resolve missing symbols issues with interdependencies between static libraries, but it is generally better to order them correctly instead."/>
        <object-field name="header_abi_checker">
            <field name="symbol_file" type="string" descr="Path to a symbol file that specifies the symbols to be included in the generated ABI dump file"/>
            <field name="exclude_symbol_versions" type="string[]" descr="Symbol versions that should be ignored from the symbol file"/>
            <field name="exclude_symbol_tags" type="string[]" descr="Symbol tags that should be ignored from the symbol file"/>
        </object-field>
        <field name="header_libs" type="blueprint[]" descr="list of modules that should only provide headers for this module."/>
        <field name="host_ldlibs" type="string[]" descr="-l arguments to pass to linker for host-provided shared libraries"/>
        <field name="include_build_directory" type="bool" descr="Add the directory containing the Android.bp file to the list of include directories. Defaults to true."/>
        <field name="include_dirs" type="string[]" descr="list of directories relative to the root of the source tree that will be added to the include path using -I. If possible, don't use this.  If adding paths from the current directory use local_include_dirs, if adding paths from other modules use export_include_dirs in that module."/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="instruction_set" type="string" descr="the instruction set architecture to use to compile the C/C++ module."/>
        <field name="ldflags" type="string[]" descr="list of module-specific flags that will be used for all link steps"/>
        <field name="local_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the include path using -I"/>
        <field name="logtags" type="string[]" descr="*.logtags files, to combine together in order to generate the /system/etc/event-log-tags file"/>
        <object-field name="lto">
            <field name="never" type="bool"/>
            <field name="full" type="bool"/>
            <field name="thin" type="bool"/>
        </object-field>
        <field name="native_coverage" type="bool"/>
        <field name="no_libcrt" type="bool" descr="don't link in libclang_rt.builtins-*.a"/>
        <field name="no_libgcc" type="bool" descr="don't link in libgcc.a"/>
        <field name="nocrt" type="bool" descr="don't link in crt_begin and crt_end.  This flag should only be necessary for compiling crt or libc."/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="openmp" type="bool" descr="Build and link with OpenMP"/>
        <field name="overrides" type="blueprint[]" descr="Names of modules to be overridden. Listed modules can only be other shared libraries (in Make or Soong). This does not completely prevent installation of the overridden libraries, but if both binaries would be installed by default (in PRODUCT_PACKAGES) the other library will be removed from PRODUCT_PACKAGES."/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="pack_relocations" type="bool" descr="Generate compact dynamic relocation table, default true."/>
        <object-field name="pgo">
            <field name="instrumentation" type="bool"/>
            <field name="sampling" type="bool"/>
            <field name="profile_file" type="string"/>
            <field name="benchmarks" type="string[]"/>
            <field name="enable_profile_use" type="bool"/>
            <field name="cflags" type="string[]" descr="Additional compiler flags to use when building this module for profiling (either instrumentation or sampling)."/>
        </object-field>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <object-field name="proto">
            <field name="export_proto_headers" type="bool" descr="export headers generated from .proto sources"/>
            <field name="static" type="bool" descr="Link statically against the protobuf runtime"/>
            <field name="type" type="string" descr="Proto generator type.  C++: full or lite.  Java: micro, nano, stream, or lite."/>
            <field name="plugin" type="string" descr="Proto plugin to use as the generator.  Must be a cc_binary_host module."/>
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the protoc include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the bp file that will be added to the protoc include paths."/>
            <field name="canonical_path_from_root" type="bool" descr="whether to identify the proto files from the root of the source tree (the original method in Android, useful for android-specific protos), or relative from where they were specified (useful for external/third party protos). This defaults to true today, but is expected to default to false in the future."/>
        </object-field>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="recovery_available" type="bool" descr="Make this module available when building for recovery"/>
        <field name="reexportedIncludeFlags" type="string[]"/>
        <field name="relative_install_path" type="string" descr="install to a subdirectory of the default install path for the module"/>
        <object-field name="renderscript">
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the llvm-rs-cc include paths"/>
            <field name="flags" type="string[]" descr="list of flags that will be passed to llvm-rs-cc"/>
            <field name="target_api" type="string" descr="Renderscript API level to target"/>
        </object-field>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="rtti" type="bool" descr="pass -frtti instead of -fno-rtti"/>
        <field name="runtime_libs" type="blueprint[]" descr="list of modules that should be installed with this module.  This is similar to 'required' but '.vendor' suffix will be appended to the module names if the shared libraries have vendor variants and this module uses VNDK."/>
        <object-field name="sanitize">
            <field name="never" type="bool"/>
            <field name="address" type="bool" descr="main sanitizers"/>
            <field name="thread" type="bool"/>
            <field name="hwaddress" type="bool"/>
            <field name="undefined" type="bool" descr="local sanitizers"/>
            <field name="all_undefined" type="bool"/>
            <field name="misc_undefined" type="string[]"/>
            <field name="coverage" type="bool"/>
            <field name="safestack" type="bool"/>
            <field name="cfi" type="bool"/>
            <field name="integer_overflow" type="bool"/>
            <field name="scudo" type="bool"/>
            <field name="scs" type="bool"/>
            <object-field name="diag">
                <field name="undefined" type="bool"/>
                <field name="cfi" type="bool"/>
                <field name="integer_overflow" type="bool"/>
                <field name="misc_undefined" type="string[]"/>
                <field name="no_recover" type="string[]"/>
            </object-field>
            <field name="recover" type="string[]" descr="value to pass to -fsanitize-recover="/>
            <field name="blacklist" type="string" descr="value to pass to -fsanitize-blacklist"/>
        </object-field>
        <field name="sdclang" type="bool" descr="compile module with SDLLVM instead of AOSP LLVM"/>
        <field name="sdk_version" type="string" descr="Minimum sdk version supported when compiling against the ndk"/>
        <field name="shared" type="string[]"/>
        <field name="shared_libs" type="blueprint[]" descr="list of modules that should be dynamically linked into this module."/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="static" type="string[]"/>
        <field name="static_libs" type="blueprint[]" descr="list of modules that should be statically linked into this module."/>
        <field name="static_ndk_lib" type="bool"/>
        <field name="stem" type="string" descr="set the name of the output"/>
        <field name="stl" type="string" descr="Select the STL library to use.  Possible values are &quot;libc++&quot;, &quot;libc++_static&quot;, &quot;libstdc++&quot;, or &quot;none&quot;. Leave blank to select the default."/>
        <object-field name="strip">
            <field name="none" type="bool"/>
            <field name="all" type="bool"/>
            <field name="keep_symbols" type="bool"/>
            <field name="keep_symbols_list" type="string[]"/>
            <field name="use_gnu_strip" type="bool"/>
        </object-field>
        <object-field name="stubs">
            <field name="symbol_file" type="string" descr="Relative path to the symbol map. The symbol map provides the list of symbols that are exported for stubs variant of this library."/>
            <field name="versions" type="string[]" descr="List versions to generate stubs libs for."/>
        </object-field>
        <field name="symbol_ordering_file" type="string" descr="Local file name to pass to the linker as --symbol-ordering-file"/>
        <field name="system_shared_libs" type="blueprint[]" descr="list of system libraries that will be dynamically linked to shared library and executable modules.  If unset, generally defaults to libc, libm, and libdl.  Set to [] to prevent linking against the defaults."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
            <object-field name="recovery">
                <field name="srcs" type="string[]" descr="list of source files that should only be used in the recovery variant of the C/C++ module."/>
                <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="cflags" type="string[]" descr="List of additional cflags that should be used to build the recovery variant of the C/C++ module."/>
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the recovery variant of the C/C++ module."/>
            </object-field>
            <object-field name="vendor">
                <field name="override_export_include_dirs" type="string[]" descr="list of exported include directories, like export_include_dirs, that will be applied to the vendor variant of this library. This will overwrite any other declarations."/>
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_runtime_libs" type="blueprint[]" descr="list of runtime libs that should not be installed along with the vendor variant of the C/C++ module."/>
                <field name="version_script" type="string" descr="version script for this vendor variant"/>
                <field name="srcs" type="string[]" descr="list of source files that should only be used in the vendor variant of the C/C++ module."/>
                <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="cflags" type="string[]" descr="List of additional cflags that should be used to build the vendor variant of the C/C++ module."/>
            </object-field>
        </object-field>
        <field name="tidy" type="bool" descr="whether to run clang-tidy over C-like sources."/>
        <field name="tidy_checks" type="string[]" descr="Extra checks to enable or disable in clang-tidy"/>
        <field name="tidy_checks_as_errors" type="string[]" descr="Checks that should be treated as errors."/>
        <field name="tidy_flags" type="string[]" descr="Extra flags to pass to clang-tidy"/>
        <field name="unexported_symbols_list" type="string" descr="local file name to pass to the linker as -unexported_symbols_list"/>
        <field name="unique_host_soname" type="bool" descr="rename host libraries to prevent overlap with system installed libraries"/>
        <field name="use_clang_lld" type="bool" descr="Use clang lld instead of gnu ld."/>
        <field name="use_version_lib" type="bool" descr="make android::build:GetBuildNumber() available containing the build ID."/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vendor_available" type="bool" descr="whether this module should be allowed to be directly depended by other modules with `vendor: true`, `proprietary: true`, or `vendor_available:true`. If set to true, two variants will be built separately, one like normal, and the other limited to the set of libraries and headers that are exposed to /vendor modules. The vendor variant may be used with a different (newer) /system, so it shouldn't have any unversioned runtime dependencies, or make assumptions about the system that may not be true in the future. If set to false, this module becomes inaccessible from /vendor modules. Default value is true when vndk: {enabled: true} or vendor: true. Nothing happens if BOARD_VNDK_VERSION isn't set in the BoardConfig.mk"/>
        <field name="version_script" type="string" descr="local file name to pass to the linker as --version_script"/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
        <object-field name="vndk">
            <field name="enabled" type="bool" descr="declared as a VNDK or VNDK-SP module. The vendor variant will be installed in /system instead of /vendor partition. `vendor_vailable` must be explicitly set to either true or false together with `vndk: {enabled: true}`."/>
            <field name="support_system_process" type="bool" descr="declared as a VNDK-SP module, which is a subset of VNDK. `vndk: { enabled: true }` must set together. All these modules are allowed to link to VNDK-SP or LL-NDK modules only. Other dependency will cause link-type errors. If `support_system_process` is not set or set to false, the module is VNDK-core and can link to other VNDK-core, VNDK-SP or LL-NDK modules only."/>
            <field name="extends" type="string" descr="Extending another module"/>
        </object-field>
        <field name="whole_static_libs" type="blueprint[]" descr="list of modules whose object files should be linked into this module in their entirety.  For static library modules, all of the .o files from the intermediate directory of the dependency will be linked into this modules .a file.  For a shared library, the dependency's .a file will be linked into this module using -Wl,--whole-archive."/>
        <field name="xom" type="bool"/>
        <field name="yaccflags" type="string[]" descr="list of module-specific flags that will be used for .y and .yy compiles"/>
    </blueprint>
    <blueprint name="cc_library_headers">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="list of source files used to compile the C/C++ module.  May be .c, .cpp, or .S files. srcs may reference the outputs of other modules that produce source files like genrule or filegroup using the syntax &quot;:module&quot;."/>
        <field name="host_supported" type="bool" descr="If set to true, build a variant of the module for the host.  Defaults to false."/>
        <field name="device_supported" type="bool" descr="If set to true, build a variant of the module for the device.  Defaults to true."/>
        <object-field name="aidl">
            <field name="export_aidl_headers" type="bool" descr="export headers generated from .aidl sources"/>
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the aidl include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the aidl include paths."/>
            <field name="generate_traces" type="bool" descr="whether to generate traces (for systrace) for this interface"/>
        </object-field>
        <field name="allow_undefined_symbols" type="bool" descr="allow the module to contain undefined symbols.  By default, modules cannot contain undefined symbols that are not satisified by their immediate dependencies.  Set this flag to true to remove --no-undefined from the linker flags. This flag should only be necessary for compiling low-level libraries like libc."/>
        <field name="asflags" type="string[]" descr="list of module-specific flags that will be used for .S compiles"/>
        <field name="bootstrap" type="bool" descr="Allows this module to use non-APEX version of libraries. Useful for building binaries that are started before APEXes are activated."/>
        <field name="c_std" type="string" descr="C standard version to use. Can be a specific version (such as &quot;gnu11&quot;), &quot;experimental&quot; (which will use draft versions like C1x when available), or the empty string (which will use the default)."/>
        <field name="cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles."/>
        <field name="clang" type="bool" descr="Deprecated. true is the default, false is invalid."/>
        <field name="clang_asflags" type="string[]" descr="list of module-specific flags that will be used for .S compiles when compiling with clang"/>
        <field name="clang_cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles when compiling with clang"/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="conlyflags" type="string[]" descr="list of module-specific flags that will be used for C compiles"/>
        <field name="cpp_std" type="string" descr="C++ standard version to use. Can be a specific version (such as &quot;gnu++11&quot;), &quot;experimental&quot; (which will use draft versions like C++1z when available), or the empty string (which will use the default)."/>
        <field name="cppflags" type="string[]" descr="list of module-specific flags that will be used for C++ compiles"/>
        <object-field name="debug" descr="release">
            <field name="cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles in debug or release builds"/>
        </object-field>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="double_loadable" type="bool" descr="whether this module is capable of being loaded with other instance (possibly an older version) of the same module in the same process. Currently, a shared library that is a member of VNDK (vndk: {enabled: true}) can be double loaded in a vendor process if the library is also a (direct and indirect) dependency of an LLNDK library. Such libraries must be explicitly marked as `double_loadable: true` by the owner, or the dependency from the LLNDK lib should be cut if the lib is not designed to be double loaded."/>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the C/C++ module. This is most useful in the arch/multilib variants to remove non-common files"/>
        <field name="export_generated_headers" type="blueprint[]" descr="list of generated headers to re-export include directories from. Entries must be present in generated_headers."/>
        <field name="export_header_lib_headers" type="blueprint[]" descr="list of header libraries to re-export include directories from. Entries must be present in header_libs."/>
        <field name="export_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the include path (using -I) for this module and any module that links against this module.  Directories listed in export_include_dirs do not need to be listed in local_include_dirs."/>
        <field name="export_shared_lib_headers" type="blueprint[]" descr="list of shared libraries to re-export include directories from. Entries must be present in shared_libs."/>
        <field name="export_static_lib_headers" type="blueprint[]" descr="list of static libraries to re-export include directories from. Entries must be present in static_libs."/>
        <field name="force_symbols_not_weak_list" type="string" descr="local file name to pass to the linker as -force_symbols_not_weak_list"/>
        <field name="force_symbols_weak_list" type="string" descr="local file name to pass to the linker as -force_symbols_weak_list"/>
        <field name="generated_headers" type="blueprint[]" descr="list of generated headers to add to the include path. These are the names of genrule modules."/>
        <field name="generated_sources" type="blueprint[]" descr="list of generated sources to compile. These are the names of gensrcs or genrule modules."/>
        <field name="gnu_extensions" type="bool" descr="if set to false, use -std=c++* instead of -std=gnu++*"/>
        <field name="group_static_libs" type="bool" descr="group static libraries.  This can resolve missing symbols issues with interdependencies between static libraries, but it is generally better to order them correctly instead."/>
        <object-field name="header_abi_checker">
            <field name="symbol_file" type="string" descr="Path to a symbol file that specifies the symbols to be included in the generated ABI dump file"/>
            <field name="exclude_symbol_versions" type="string[]" descr="Symbol versions that should be ignored from the symbol file"/>
            <field name="exclude_symbol_tags" type="string[]" descr="Symbol tags that should be ignored from the symbol file"/>
        </object-field>
        <field name="header_libs" type="blueprint[]" descr="list of modules that should only provide headers for this module."/>
        <field name="host_ldlibs" type="string[]" descr="-l arguments to pass to linker for host-provided shared libraries"/>
        <field name="include_build_directory" type="bool" descr="Add the directory containing the Android.bp file to the list of include directories. Defaults to true."/>
        <field name="include_dirs" type="string[]" descr="list of directories relative to the root of the source tree that will be added to the include path using -I. If possible, don't use this.  If adding paths from the current directory use local_include_dirs, if adding paths from other modules use export_include_dirs in that module."/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="instruction_set" type="string" descr="the instruction set architecture to use to compile the C/C++ module."/>
        <field name="ldflags" type="string[]" descr="list of module-specific flags that will be used for all link steps"/>
        <field name="local_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the include path using -I"/>
        <field name="logtags" type="string[]" descr="*.logtags files, to combine together in order to generate the /system/etc/event-log-tags file"/>
        <object-field name="lto">
            <field name="never" type="bool"/>
            <field name="full" type="bool"/>
            <field name="thin" type="bool"/>
        </object-field>
        <field name="native_coverage" type="bool"/>
        <field name="no_libcrt" type="bool" descr="don't link in libclang_rt.builtins-*.a"/>
        <field name="no_libgcc" type="bool" descr="don't link in libgcc.a"/>
        <field name="nocrt" type="bool" descr="don't link in crt_begin and crt_end.  This flag should only be necessary for compiling crt or libc."/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="openmp" type="bool" descr="Build and link with OpenMP"/>
        <field name="overrides" type="blueprint[]" descr="Names of modules to be overridden. Listed modules can only be other shared libraries (in Make or Soong). This does not completely prevent installation of the overridden libraries, but if both binaries would be installed by default (in PRODUCT_PACKAGES) the other library will be removed from PRODUCT_PACKAGES."/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="pack_relocations" type="bool" descr="Generate compact dynamic relocation table, default true."/>
        <object-field name="pgo">
            <field name="instrumentation" type="bool"/>
            <field name="sampling" type="bool"/>
            <field name="profile_file" type="string"/>
            <field name="benchmarks" type="string[]"/>
            <field name="enable_profile_use" type="bool"/>
            <field name="cflags" type="string[]" descr="Additional compiler flags to use when building this module for profiling (either instrumentation or sampling)."/>
        </object-field>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <object-field name="proto">
            <field name="export_proto_headers" type="bool" descr="export headers generated from .proto sources"/>
            <field name="static" type="bool" descr="Link statically against the protobuf runtime"/>
            <field name="type" type="string" descr="Proto generator type.  C++: full or lite.  Java: micro, nano, stream, or lite."/>
            <field name="plugin" type="string" descr="Proto plugin to use as the generator.  Must be a cc_binary_host module."/>
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the protoc include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the bp file that will be added to the protoc include paths."/>
            <field name="canonical_path_from_root" type="bool" descr="whether to identify the proto files from the root of the source tree (the original method in Android, useful for android-specific protos), or relative from where they were specified (useful for external/third party protos). This defaults to true today, but is expected to default to false in the future."/>
        </object-field>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="recovery_available" type="bool" descr="Make this module available when building for recovery"/>
        <field name="reexportedIncludeFlags" type="string[]"/>
        <field name="relative_install_path" type="string" descr="install to a subdirectory of the default install path for the module"/>
        <object-field name="renderscript">
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the llvm-rs-cc include paths"/>
            <field name="flags" type="string[]" descr="list of flags that will be passed to llvm-rs-cc"/>
            <field name="target_api" type="string" descr="Renderscript API level to target"/>
        </object-field>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="rtti" type="bool" descr="pass -frtti instead of -fno-rtti"/>
        <field name="runtime_libs" type="blueprint[]" descr="list of modules that should be installed with this module.  This is similar to 'required' but '.vendor' suffix will be appended to the module names if the shared libraries have vendor variants and this module uses VNDK."/>
        <object-field name="sanitize">
            <field name="never" type="bool"/>
            <field name="address" type="bool" descr="main sanitizers"/>
            <field name="thread" type="bool"/>
            <field name="hwaddress" type="bool"/>
            <field name="undefined" type="bool" descr="local sanitizers"/>
            <field name="all_undefined" type="bool"/>
            <field name="misc_undefined" type="string[]"/>
            <field name="coverage" type="bool"/>
            <field name="safestack" type="bool"/>
            <field name="cfi" type="bool"/>
            <field name="integer_overflow" type="bool"/>
            <field name="scudo" type="bool"/>
            <field name="scs" type="bool"/>
            <object-field name="diag">
                <field name="undefined" type="bool"/>
                <field name="cfi" type="bool"/>
                <field name="integer_overflow" type="bool"/>
                <field name="misc_undefined" type="string[]"/>
                <field name="no_recover" type="string[]"/>
            </object-field>
            <field name="recover" type="string[]" descr="value to pass to -fsanitize-recover="/>
            <field name="blacklist" type="string" descr="value to pass to -fsanitize-blacklist"/>
        </object-field>
        <field name="sdclang" type="bool" descr="compile module with SDLLVM instead of AOSP LLVM"/>
        <field name="sdk_version" type="string" descr="Minimum sdk version supported when compiling against the ndk"/>
        <field name="shared" type="string[]"/>
        <field name="shared_libs" type="blueprint[]" descr="list of modules that should be dynamically linked into this module."/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="static" type="string[]"/>
        <field name="static_libs" type="blueprint[]" descr="list of modules that should be statically linked into this module."/>
        <field name="static_ndk_lib" type="bool"/>
        <field name="stem" type="string" descr="set the name of the output"/>
        <field name="stl" type="string" descr="Select the STL library to use.  Possible values are &quot;libc++&quot;, &quot;libc++_static&quot;, &quot;libstdc++&quot;, or &quot;none&quot;. Leave blank to select the default."/>
        <object-field name="strip">
            <field name="none" type="bool"/>
            <field name="all" type="bool"/>
            <field name="keep_symbols" type="bool"/>
            <field name="keep_symbols_list" type="string[]"/>
            <field name="use_gnu_strip" type="bool"/>
        </object-field>
        <object-field name="stubs">
            <field name="symbol_file" type="string" descr="Relative path to the symbol map. The symbol map provides the list of symbols that are exported for stubs variant of this library."/>
            <field name="versions" type="string[]" descr="List versions to generate stubs libs for."/>
        </object-field>
        <field name="symbol_ordering_file" type="string" descr="Local file name to pass to the linker as --symbol-ordering-file"/>
        <field name="system_shared_libs" type="blueprint[]" descr="list of system libraries that will be dynamically linked to shared library and executable modules.  If unset, generally defaults to libc, libm, and libdl.  Set to [] to prevent linking against the defaults."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
            <object-field name="recovery">
                <field name="srcs" type="string[]" descr="list of source files that should only be used in the recovery variant of the C/C++ module."/>
                <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="cflags" type="string[]" descr="List of additional cflags that should be used to build the recovery variant of the C/C++ module."/>
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the recovery variant of the C/C++ module."/>
            </object-field>
            <object-field name="vendor">
                <field name="override_export_include_dirs" type="string[]" descr="list of exported include directories, like export_include_dirs, that will be applied to the vendor variant of this library. This will overwrite any other declarations."/>
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_runtime_libs" type="blueprint[]" descr="list of runtime libs that should not be installed along with the vendor variant of the C/C++ module."/>
                <field name="version_script" type="string" descr="version script for this vendor variant"/>
                <field name="srcs" type="string[]" descr="list of source files that should only be used in the vendor variant of the C/C++ module."/>
                <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="cflags" type="string[]" descr="List of additional cflags that should be used to build the vendor variant of the C/C++ module."/>
            </object-field>
        </object-field>
        <field name="tidy" type="bool" descr="whether to run clang-tidy over C-like sources."/>
        <field name="tidy_checks" type="string[]" descr="Extra checks to enable or disable in clang-tidy"/>
        <field name="tidy_checks_as_errors" type="string[]" descr="Checks that should be treated as errors."/>
        <field name="tidy_flags" type="string[]" descr="Extra flags to pass to clang-tidy"/>
        <field name="unexported_symbols_list" type="string" descr="local file name to pass to the linker as -unexported_symbols_list"/>
        <field name="unique_host_soname" type="bool" descr="rename host libraries to prevent overlap with system installed libraries"/>
        <field name="use_clang_lld" type="bool" descr="Use clang lld instead of gnu ld."/>
        <field name="use_version_lib" type="bool" descr="make android::build:GetBuildNumber() available containing the build ID."/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vendor_available" type="bool" descr="whether this module should be allowed to be directly depended by other modules with `vendor: true`, `proprietary: true`, or `vendor_available:true`. If set to true, two variants will be built separately, one like normal, and the other limited to the set of libraries and headers that are exposed to /vendor modules. The vendor variant may be used with a different (newer) /system, so it shouldn't have any unversioned runtime dependencies, or make assumptions about the system that may not be true in the future. If set to false, this module becomes inaccessible from /vendor modules. Default value is true when vndk: {enabled: true} or vendor: true. Nothing happens if BOARD_VNDK_VERSION isn't set in the BoardConfig.mk"/>
        <field name="version_script" type="string" descr="local file name to pass to the linker as --version_script"/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
        <object-field name="vndk">
            <field name="enabled" type="bool" descr="declared as a VNDK or VNDK-SP module. The vendor variant will be installed in /system instead of /vendor partition. `vendor_vailable` must be explicitly set to either true or false together with `vndk: {enabled: true}`."/>
            <field name="support_system_process" type="bool" descr="declared as a VNDK-SP module, which is a subset of VNDK. `vndk: { enabled: true }` must set together. All these modules are allowed to link to VNDK-SP or LL-NDK modules only. Other dependency will cause link-type errors. If `support_system_process` is not set or set to false, the module is VNDK-core and can link to other VNDK-core, VNDK-SP or LL-NDK modules only."/>
            <field name="extends" type="string" descr="Extending another module"/>
        </object-field>
        <field name="whole_static_libs" type="blueprint[]" descr="list of modules whose object files should be linked into this module in their entirety.  For static library modules, all of the .o files from the intermediate directory of the dependency will be linked into this modules .a file.  For a shared library, the dependency's .a file will be linked into this module using -Wl,--whole-archive."/>
        <field name="xom" type="bool"/>
        <field name="yaccflags" type="string[]" descr="list of module-specific flags that will be used for .y and .yy compiles"/>
    </blueprint>
    <blueprint name="cc_library_host_shared">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="list of source files used to compile the C/C++ module.  May be .c, .cpp, or .S files. srcs may reference the outputs of other modules that produce source files like genrule or filegroup using the syntax &quot;:module&quot;."/>
        <object-field name="aidl">
            <field name="export_aidl_headers" type="bool" descr="export headers generated from .aidl sources"/>
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the aidl include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the aidl include paths."/>
            <field name="generate_traces" type="bool" descr="whether to generate traces (for systrace) for this interface"/>
        </object-field>
        <field name="allow_undefined_symbols" type="bool" descr="allow the module to contain undefined symbols.  By default, modules cannot contain undefined symbols that are not satisified by their immediate dependencies.  Set this flag to true to remove --no-undefined from the linker flags. This flag should only be necessary for compiling low-level libraries like libc."/>
        <field name="asflags" type="string[]" descr="list of module-specific flags that will be used for .S compiles"/>
        <field name="bootstrap" type="bool" descr="Allows this module to use non-APEX version of libraries. Useful for building binaries that are started before APEXes are activated."/>
        <field name="c_std" type="string" descr="C standard version to use. Can be a specific version (such as &quot;gnu11&quot;), &quot;experimental&quot; (which will use draft versions like C1x when available), or the empty string (which will use the default)."/>
        <field name="cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles."/>
        <field name="clang" type="bool" descr="Deprecated. true is the default, false is invalid."/>
        <field name="clang_asflags" type="string[]" descr="list of module-specific flags that will be used for .S compiles when compiling with clang"/>
        <field name="clang_cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles when compiling with clang"/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="conlyflags" type="string[]" descr="list of module-specific flags that will be used for C compiles"/>
        <field name="cpp_std" type="string" descr="C++ standard version to use. Can be a specific version (such as &quot;gnu++11&quot;), &quot;experimental&quot; (which will use draft versions like C++1z when available), or the empty string (which will use the default)."/>
        <field name="cppflags" type="string[]" descr="list of module-specific flags that will be used for C++ compiles"/>
        <object-field name="debug" descr="release">
            <field name="cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles in debug or release builds"/>
        </object-field>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="double_loadable" type="bool" descr="whether this module is capable of being loaded with other instance (possibly an older version) of the same module in the same process. Currently, a shared library that is a member of VNDK (vndk: {enabled: true}) can be double loaded in a vendor process if the library is also a (direct and indirect) dependency of an LLNDK library. Such libraries must be explicitly marked as `double_loadable: true` by the owner, or the dependency from the LLNDK lib should be cut if the lib is not designed to be double loaded."/>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the C/C++ module. This is most useful in the arch/multilib variants to remove non-common files"/>
        <field name="export_generated_headers" type="blueprint[]" descr="list of generated headers to re-export include directories from. Entries must be present in generated_headers."/>
        <field name="export_header_lib_headers" type="blueprint[]" descr="list of header libraries to re-export include directories from. Entries must be present in header_libs."/>
        <field name="export_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the include path (using -I) for this module and any module that links against this module.  Directories listed in export_include_dirs do not need to be listed in local_include_dirs."/>
        <field name="export_shared_lib_headers" type="blueprint[]" descr="list of shared libraries to re-export include directories from. Entries must be present in shared_libs."/>
        <field name="export_static_lib_headers" type="blueprint[]" descr="list of static libraries to re-export include directories from. Entries must be present in static_libs."/>
        <field name="force_symbols_not_weak_list" type="string" descr="local file name to pass to the linker as -force_symbols_not_weak_list"/>
        <field name="force_symbols_weak_list" type="string" descr="local file name to pass to the linker as -force_symbols_weak_list"/>
        <field name="generated_headers" type="blueprint[]" descr="list of generated headers to add to the include path. These are the names of genrule modules."/>
        <field name="generated_sources" type="blueprint[]" descr="list of generated sources to compile. These are the names of gensrcs or genrule modules."/>
        <field name="gnu_extensions" type="bool" descr="if set to false, use -std=c++* instead of -std=gnu++*"/>
        <field name="group_static_libs" type="bool" descr="group static libraries.  This can resolve missing symbols issues with interdependencies between static libraries, but it is generally better to order them correctly instead."/>
        <object-field name="header_abi_checker">
            <field name="symbol_file" type="string" descr="Path to a symbol file that specifies the symbols to be included in the generated ABI dump file"/>
            <field name="exclude_symbol_versions" type="string[]" descr="Symbol versions that should be ignored from the symbol file"/>
            <field name="exclude_symbol_tags" type="string[]" descr="Symbol tags that should be ignored from the symbol file"/>
        </object-field>
        <field name="header_libs" type="blueprint[]" descr="list of modules that should only provide headers for this module."/>
        <field name="host_ldlibs" type="string[]" descr="-l arguments to pass to linker for host-provided shared libraries"/>
        <field name="include_build_directory" type="bool" descr="Add the directory containing the Android.bp file to the list of include directories. Defaults to true."/>
        <field name="include_dirs" type="string[]" descr="list of directories relative to the root of the source tree that will be added to the include path using -I. If possible, don't use this.  If adding paths from the current directory use local_include_dirs, if adding paths from other modules use export_include_dirs in that module."/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="instruction_set" type="string" descr="the instruction set architecture to use to compile the C/C++ module."/>
        <field name="ldflags" type="string[]" descr="list of module-specific flags that will be used for all link steps"/>
        <field name="local_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the include path using -I"/>
        <field name="logtags" type="string[]" descr="*.logtags files, to combine together in order to generate the /system/etc/event-log-tags file"/>
        <object-field name="lto">
            <field name="never" type="bool"/>
            <field name="full" type="bool"/>
            <field name="thin" type="bool"/>
        </object-field>
        <field name="native_coverage" type="bool"/>
        <field name="no_libcrt" type="bool" descr="don't link in libclang_rt.builtins-*.a"/>
        <field name="no_libgcc" type="bool" descr="don't link in libgcc.a"/>
        <field name="nocrt" type="bool" descr="don't link in crt_begin and crt_end.  This flag should only be necessary for compiling crt or libc."/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="openmp" type="bool" descr="Build and link with OpenMP"/>
        <field name="overrides" type="blueprint[]" descr="Names of modules to be overridden. Listed modules can only be other shared libraries (in Make or Soong). This does not completely prevent installation of the overridden libraries, but if both binaries would be installed by default (in PRODUCT_PACKAGES) the other library will be removed from PRODUCT_PACKAGES."/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="pack_relocations" type="bool" descr="Generate compact dynamic relocation table, default true."/>
        <object-field name="pgo">
            <field name="instrumentation" type="bool"/>
            <field name="sampling" type="bool"/>
            <field name="profile_file" type="string"/>
            <field name="benchmarks" type="string[]"/>
            <field name="enable_profile_use" type="bool"/>
            <field name="cflags" type="string[]" descr="Additional compiler flags to use when building this module for profiling (either instrumentation or sampling)."/>
        </object-field>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <object-field name="proto">
            <field name="type" type="string" descr="Proto generator type.  C++: full or lite.  Java: micro, nano, stream, or lite."/>
            <field name="plugin" type="string" descr="Proto plugin to use as the generator.  Must be a cc_binary_host module."/>
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the protoc include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the bp file that will be added to the protoc include paths."/>
            <field name="canonical_path_from_root" type="bool" descr="whether to identify the proto files from the root of the source tree (the original method in Android, useful for android-specific protos), or relative from where they were specified (useful for external/third party protos). This defaults to true today, but is expected to default to false in the future."/>
            <field name="export_proto_headers" type="bool" descr="export headers generated from .proto sources"/>
            <field name="static" type="bool" descr="Link statically against the protobuf runtime"/>
        </object-field>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="recovery_available" type="bool" descr="Make this module available when building for recovery"/>
        <field name="reexportedIncludeFlags" type="string[]"/>
        <field name="relative_install_path" type="string" descr="install to a subdirectory of the default install path for the module"/>
        <object-field name="renderscript">
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the llvm-rs-cc include paths"/>
            <field name="flags" type="string[]" descr="list of flags that will be passed to llvm-rs-cc"/>
            <field name="target_api" type="string" descr="Renderscript API level to target"/>
        </object-field>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="rtti" type="bool" descr="pass -frtti instead of -fno-rtti"/>
        <field name="runtime_libs" type="blueprint[]" descr="list of modules that should be installed with this module.  This is similar to 'required' but '.vendor' suffix will be appended to the module names if the shared libraries have vendor variants and this module uses VNDK."/>
        <object-field name="sanitize">
            <field name="never" type="bool"/>
            <field name="address" type="bool" descr="main sanitizers"/>
            <field name="thread" type="bool"/>
            <field name="hwaddress" type="bool"/>
            <field name="undefined" type="bool" descr="local sanitizers"/>
            <field name="all_undefined" type="bool"/>
            <field name="misc_undefined" type="string[]"/>
            <field name="coverage" type="bool"/>
            <field name="safestack" type="bool"/>
            <field name="cfi" type="bool"/>
            <field name="integer_overflow" type="bool"/>
            <field name="scudo" type="bool"/>
            <field name="scs" type="bool"/>
            <object-field name="diag">
                <field name="undefined" type="bool"/>
                <field name="cfi" type="bool"/>
                <field name="integer_overflow" type="bool"/>
                <field name="misc_undefined" type="string[]"/>
                <field name="no_recover" type="string[]"/>
            </object-field>
            <field name="recover" type="string[]" descr="value to pass to -fsanitize-recover="/>
            <field name="blacklist" type="string" descr="value to pass to -fsanitize-blacklist"/>
        </object-field>
        <field name="sdclang" type="bool" descr="compile module with SDLLVM instead of AOSP LLVM"/>
        <field name="sdk_version" type="string" descr="Minimum sdk version supported when compiling against the ndk"/>
        <field name="shared" type="string[]"/>
        <field name="shared_libs" type="blueprint[]" descr="list of modules that should be dynamically linked into this module."/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="static" type="string[]"/>
        <field name="static_libs" type="blueprint[]" descr="list of modules that should be statically linked into this module."/>
        <field name="static_ndk_lib" type="bool"/>
        <field name="stem" type="string" descr="set the name of the output"/>
        <field name="stl" type="string" descr="Select the STL library to use.  Possible values are &quot;libc++&quot;, &quot;libc++_static&quot;, &quot;libstdc++&quot;, or &quot;none&quot;. Leave blank to select the default."/>
        <object-field name="strip">
            <field name="none" type="bool"/>
            <field name="all" type="bool"/>
            <field name="keep_symbols" type="bool"/>
            <field name="keep_symbols_list" type="string[]"/>
            <field name="use_gnu_strip" type="bool"/>
        </object-field>
        <object-field name="stubs">
            <field name="symbol_file" type="string" descr="Relative path to the symbol map. The symbol map provides the list of symbols that are exported for stubs variant of this library."/>
            <field name="versions" type="string[]" descr="List versions to generate stubs libs for."/>
        </object-field>
        <field name="symbol_ordering_file" type="string" descr="Local file name to pass to the linker as --symbol-ordering-file"/>
        <field name="system_shared_libs" type="blueprint[]" descr="list of system libraries that will be dynamically linked to shared library and executable modules.  If unset, generally defaults to libc, libm, and libdl.  Set to [] to prevent linking against the defaults."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
            <object-field name="recovery">
                <field name="srcs" type="string[]" descr="list of source files that should only be used in the recovery variant of the C/C++ module."/>
                <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="cflags" type="string[]" descr="List of additional cflags that should be used to build the recovery variant of the C/C++ module."/>
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the recovery variant of the C/C++ module."/>
            </object-field>
            <object-field name="vendor">
                <field name="override_export_include_dirs" type="string[]" descr="list of exported include directories, like export_include_dirs, that will be applied to the vendor variant of this library. This will overwrite any other declarations."/>
                <field name="srcs" type="string[]" descr="list of source files that should only be used in the vendor variant of the C/C++ module."/>
                <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="cflags" type="string[]" descr="List of additional cflags that should be used to build the vendor variant of the C/C++ module."/>
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_runtime_libs" type="blueprint[]" descr="list of runtime libs that should not be installed along with the vendor variant of the C/C++ module."/>
                <field name="version_script" type="string" descr="version script for this vendor variant"/>
            </object-field>
        </object-field>
        <field name="tidy" type="bool" descr="whether to run clang-tidy over C-like sources."/>
        <field name="tidy_checks" type="string[]" descr="Extra checks to enable or disable in clang-tidy"/>
        <field name="tidy_checks_as_errors" type="string[]" descr="Checks that should be treated as errors."/>
        <field name="tidy_flags" type="string[]" descr="Extra flags to pass to clang-tidy"/>
        <field name="unexported_symbols_list" type="string" descr="local file name to pass to the linker as -unexported_symbols_list"/>
        <field name="unique_host_soname" type="bool" descr="rename host libraries to prevent overlap with system installed libraries"/>
        <field name="use_clang_lld" type="bool" descr="Use clang lld instead of gnu ld."/>
        <field name="use_version_lib" type="bool" descr="make android::build:GetBuildNumber() available containing the build ID."/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vendor_available" type="bool" descr="whether this module should be allowed to be directly depended by other modules with `vendor: true`, `proprietary: true`, or `vendor_available:true`. If set to true, two variants will be built separately, one like normal, and the other limited to the set of libraries and headers that are exposed to /vendor modules. The vendor variant may be used with a different (newer) /system, so it shouldn't have any unversioned runtime dependencies, or make assumptions about the system that may not be true in the future. If set to false, this module becomes inaccessible from /vendor modules. Default value is true when vndk: {enabled: true} or vendor: true. Nothing happens if BOARD_VNDK_VERSION isn't set in the BoardConfig.mk"/>
        <field name="version_script" type="string" descr="local file name to pass to the linker as --version_script"/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
        <object-field name="vndk">
            <field name="enabled" type="bool" descr="declared as a VNDK or VNDK-SP module. The vendor variant will be installed in /system instead of /vendor partition. `vendor_vailable` must be explicitly set to either true or false together with `vndk: {enabled: true}`."/>
            <field name="support_system_process" type="bool" descr="declared as a VNDK-SP module, which is a subset of VNDK. `vndk: { enabled: true }` must set together. All these modules are allowed to link to VNDK-SP or LL-NDK modules only. Other dependency will cause link-type errors. If `support_system_process` is not set or set to false, the module is VNDK-core and can link to other VNDK-core, VNDK-SP or LL-NDK modules only."/>
            <field name="extends" type="string" descr="Extending another module"/>
        </object-field>
        <field name="whole_static_libs" type="blueprint[]" descr="list of modules whose object files should be linked into this module in their entirety.  For static library modules, all of the .o files from the intermediate directory of the dependency will be linked into this modules .a file.  For a shared library, the dependency's .a file will be linked into this module using -Wl,--whole-archive."/>
        <field name="xom" type="bool"/>
        <field name="yaccflags" type="string[]" descr="list of module-specific flags that will be used for .y and .yy compiles"/>
    </blueprint>
    <blueprint name="cc_library_host_static">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="list of source files used to compile the C/C++ module.  May be .c, .cpp, or .S files. srcs may reference the outputs of other modules that produce source files like genrule or filegroup using the syntax &quot;:module&quot;."/>
        <object-field name="aidl">
            <field name="export_aidl_headers" type="bool" descr="export headers generated from .aidl sources"/>
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the aidl include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the aidl include paths."/>
            <field name="generate_traces" type="bool" descr="whether to generate traces (for systrace) for this interface"/>
        </object-field>
        <field name="allow_undefined_symbols" type="bool" descr="allow the module to contain undefined symbols.  By default, modules cannot contain undefined symbols that are not satisified by their immediate dependencies.  Set this flag to true to remove --no-undefined from the linker flags. This flag should only be necessary for compiling low-level libraries like libc."/>
        <field name="asflags" type="string[]" descr="list of module-specific flags that will be used for .S compiles"/>
        <field name="bootstrap" type="bool" descr="Allows this module to use non-APEX version of libraries. Useful for building binaries that are started before APEXes are activated."/>
        <field name="c_std" type="string" descr="C standard version to use. Can be a specific version (such as &quot;gnu11&quot;), &quot;experimental&quot; (which will use draft versions like C1x when available), or the empty string (which will use the default)."/>
        <field name="cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles."/>
        <field name="clang" type="bool" descr="Deprecated. true is the default, false is invalid."/>
        <field name="clang_asflags" type="string[]" descr="list of module-specific flags that will be used for .S compiles when compiling with clang"/>
        <field name="clang_cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles when compiling with clang"/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="conlyflags" type="string[]" descr="list of module-specific flags that will be used for C compiles"/>
        <field name="cpp_std" type="string" descr="C++ standard version to use. Can be a specific version (such as &quot;gnu++11&quot;), &quot;experimental&quot; (which will use draft versions like C++1z when available), or the empty string (which will use the default)."/>
        <field name="cppflags" type="string[]" descr="list of module-specific flags that will be used for C++ compiles"/>
        <object-field name="debug" descr="release">
            <field name="cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles in debug or release builds"/>
        </object-field>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="double_loadable" type="bool" descr="whether this module is capable of being loaded with other instance (possibly an older version) of the same module in the same process. Currently, a shared library that is a member of VNDK (vndk: {enabled: true}) can be double loaded in a vendor process if the library is also a (direct and indirect) dependency of an LLNDK library. Such libraries must be explicitly marked as `double_loadable: true` by the owner, or the dependency from the LLNDK lib should be cut if the lib is not designed to be double loaded."/>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the C/C++ module. This is most useful in the arch/multilib variants to remove non-common files"/>
        <field name="export_generated_headers" type="blueprint[]" descr="list of generated headers to re-export include directories from. Entries must be present in generated_headers."/>
        <field name="export_header_lib_headers" type="blueprint[]" descr="list of header libraries to re-export include directories from. Entries must be present in header_libs."/>
        <field name="export_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the include path (using -I) for this module and any module that links against this module.  Directories listed in export_include_dirs do not need to be listed in local_include_dirs."/>
        <field name="export_shared_lib_headers" type="blueprint[]" descr="list of shared libraries to re-export include directories from. Entries must be present in shared_libs."/>
        <field name="export_static_lib_headers" type="blueprint[]" descr="list of static libraries to re-export include directories from. Entries must be present in static_libs."/>
        <field name="force_symbols_not_weak_list" type="string" descr="local file name to pass to the linker as -force_symbols_not_weak_list"/>
        <field name="force_symbols_weak_list" type="string" descr="local file name to pass to the linker as -force_symbols_weak_list"/>
        <field name="generated_headers" type="blueprint[]" descr="list of generated headers to add to the include path. These are the names of genrule modules."/>
        <field name="generated_sources" type="blueprint[]" descr="list of generated sources to compile. These are the names of gensrcs or genrule modules."/>
        <field name="gnu_extensions" type="bool" descr="if set to false, use -std=c++* instead of -std=gnu++*"/>
        <field name="group_static_libs" type="bool" descr="group static libraries.  This can resolve missing symbols issues with interdependencies between static libraries, but it is generally better to order them correctly instead."/>
        <object-field name="header_abi_checker">
            <field name="symbol_file" type="string" descr="Path to a symbol file that specifies the symbols to be included in the generated ABI dump file"/>
            <field name="exclude_symbol_versions" type="string[]" descr="Symbol versions that should be ignored from the symbol file"/>
            <field name="exclude_symbol_tags" type="string[]" descr="Symbol tags that should be ignored from the symbol file"/>
        </object-field>
        <field name="header_libs" type="blueprint[]" descr="list of modules that should only provide headers for this module."/>
        <field name="host_ldlibs" type="string[]" descr="-l arguments to pass to linker for host-provided shared libraries"/>
        <field name="include_build_directory" type="bool" descr="Add the directory containing the Android.bp file to the list of include directories. Defaults to true."/>
        <field name="include_dirs" type="string[]" descr="list of directories relative to the root of the source tree that will be added to the include path using -I. If possible, don't use this.  If adding paths from the current directory use local_include_dirs, if adding paths from other modules use export_include_dirs in that module."/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="instruction_set" type="string" descr="the instruction set architecture to use to compile the C/C++ module."/>
        <field name="ldflags" type="string[]" descr="list of module-specific flags that will be used for all link steps"/>
        <field name="local_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the include path using -I"/>
        <field name="logtags" type="string[]" descr="*.logtags files, to combine together in order to generate the /system/etc/event-log-tags file"/>
        <object-field name="lto">
            <field name="never" type="bool"/>
            <field name="full" type="bool"/>
            <field name="thin" type="bool"/>
        </object-field>
        <field name="native_coverage" type="bool"/>
        <field name="no_libcrt" type="bool" descr="don't link in libclang_rt.builtins-*.a"/>
        <field name="no_libgcc" type="bool" descr="don't link in libgcc.a"/>
        <field name="nocrt" type="bool" descr="don't link in crt_begin and crt_end.  This flag should only be necessary for compiling crt or libc."/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="openmp" type="bool" descr="Build and link with OpenMP"/>
        <field name="overrides" type="blueprint[]" descr="Names of modules to be overridden. Listed modules can only be other shared libraries (in Make or Soong). This does not completely prevent installation of the overridden libraries, but if both binaries would be installed by default (in PRODUCT_PACKAGES) the other library will be removed from PRODUCT_PACKAGES."/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="pack_relocations" type="bool" descr="Generate compact dynamic relocation table, default true."/>
        <object-field name="pgo">
            <field name="instrumentation" type="bool"/>
            <field name="sampling" type="bool"/>
            <field name="profile_file" type="string"/>
            <field name="benchmarks" type="string[]"/>
            <field name="enable_profile_use" type="bool"/>
            <field name="cflags" type="string[]" descr="Additional compiler flags to use when building this module for profiling (either instrumentation or sampling)."/>
        </object-field>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <object-field name="proto">
            <field name="type" type="string" descr="Proto generator type.  C++: full or lite.  Java: micro, nano, stream, or lite."/>
            <field name="plugin" type="string" descr="Proto plugin to use as the generator.  Must be a cc_binary_host module."/>
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the protoc include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the bp file that will be added to the protoc include paths."/>
            <field name="canonical_path_from_root" type="bool" descr="whether to identify the proto files from the root of the source tree (the original method in Android, useful for android-specific protos), or relative from where they were specified (useful for external/third party protos). This defaults to true today, but is expected to default to false in the future."/>
            <field name="export_proto_headers" type="bool" descr="export headers generated from .proto sources"/>
            <field name="static" type="bool" descr="Link statically against the protobuf runtime"/>
        </object-field>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="recovery_available" type="bool" descr="Make this module available when building for recovery"/>
        <field name="reexportedIncludeFlags" type="string[]"/>
        <field name="relative_install_path" type="string" descr="install to a subdirectory of the default install path for the module"/>
        <object-field name="renderscript">
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the llvm-rs-cc include paths"/>
            <field name="flags" type="string[]" descr="list of flags that will be passed to llvm-rs-cc"/>
            <field name="target_api" type="string" descr="Renderscript API level to target"/>
        </object-field>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="rtti" type="bool" descr="pass -frtti instead of -fno-rtti"/>
        <field name="runtime_libs" type="blueprint[]" descr="list of modules that should be installed with this module.  This is similar to 'required' but '.vendor' suffix will be appended to the module names if the shared libraries have vendor variants and this module uses VNDK."/>
        <object-field name="sanitize">
            <field name="never" type="bool"/>
            <field name="address" type="bool" descr="main sanitizers"/>
            <field name="thread" type="bool"/>
            <field name="hwaddress" type="bool"/>
            <field name="undefined" type="bool" descr="local sanitizers"/>
            <field name="all_undefined" type="bool"/>
            <field name="misc_undefined" type="string[]"/>
            <field name="coverage" type="bool"/>
            <field name="safestack" type="bool"/>
            <field name="cfi" type="bool"/>
            <field name="integer_overflow" type="bool"/>
            <field name="scudo" type="bool"/>
            <field name="scs" type="bool"/>
            <object-field name="diag">
                <field name="undefined" type="bool"/>
                <field name="cfi" type="bool"/>
                <field name="integer_overflow" type="bool"/>
                <field name="misc_undefined" type="string[]"/>
                <field name="no_recover" type="string[]"/>
            </object-field>
            <field name="recover" type="string[]" descr="value to pass to -fsanitize-recover="/>
            <field name="blacklist" type="string" descr="value to pass to -fsanitize-blacklist"/>
        </object-field>
        <field name="sdclang" type="bool" descr="compile module with SDLLVM instead of AOSP LLVM"/>
        <field name="sdk_version" type="string" descr="Minimum sdk version supported when compiling against the ndk"/>
        <field name="shared" type="string[]"/>
        <field name="shared_libs" type="blueprint[]" descr="list of modules that should be dynamically linked into this module."/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="static" type="string[]"/>
        <field name="static_libs" type="blueprint[]" descr="list of modules that should be statically linked into this module."/>
        <field name="static_ndk_lib" type="bool"/>
        <field name="stem" type="string" descr="set the name of the output"/>
        <field name="stl" type="string" descr="Select the STL library to use.  Possible values are &quot;libc++&quot;, &quot;libc++_static&quot;, &quot;libstdc++&quot;, or &quot;none&quot;. Leave blank to select the default."/>
        <object-field name="strip">
            <field name="none" type="bool"/>
            <field name="all" type="bool"/>
            <field name="keep_symbols" type="bool"/>
            <field name="keep_symbols_list" type="string[]"/>
            <field name="use_gnu_strip" type="bool"/>
        </object-field>
        <object-field name="stubs">
            <field name="symbol_file" type="string" descr="Relative path to the symbol map. The symbol map provides the list of symbols that are exported for stubs variant of this library."/>
            <field name="versions" type="string[]" descr="List versions to generate stubs libs for."/>
        </object-field>
        <field name="symbol_ordering_file" type="string" descr="Local file name to pass to the linker as --symbol-ordering-file"/>
        <field name="system_shared_libs" type="blueprint[]" descr="list of system libraries that will be dynamically linked to shared library and executable modules.  If unset, generally defaults to libc, libm, and libdl.  Set to [] to prevent linking against the defaults."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
            <object-field name="recovery">
                <field name="srcs" type="string[]" descr="list of source files that should only be used in the recovery variant of the C/C++ module."/>
                <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="cflags" type="string[]" descr="List of additional cflags that should be used to build the recovery variant of the C/C++ module."/>
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the recovery variant of the C/C++ module."/>
            </object-field>
            <object-field name="vendor">
                <field name="override_export_include_dirs" type="string[]" descr="list of exported include directories, like export_include_dirs, that will be applied to the vendor variant of this library. This will overwrite any other declarations."/>
                <field name="srcs" type="string[]" descr="list of source files that should only be used in the vendor variant of the C/C++ module."/>
                <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="cflags" type="string[]" descr="List of additional cflags that should be used to build the vendor variant of the C/C++ module."/>
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_runtime_libs" type="blueprint[]" descr="list of runtime libs that should not be installed along with the vendor variant of the C/C++ module."/>
                <field name="version_script" type="string" descr="version script for this vendor variant"/>
            </object-field>
        </object-field>
        <field name="tidy" type="bool" descr="whether to run clang-tidy over C-like sources."/>
        <field name="tidy_checks" type="string[]" descr="Extra checks to enable or disable in clang-tidy"/>
        <field name="tidy_checks_as_errors" type="string[]" descr="Checks that should be treated as errors."/>
        <field name="tidy_flags" type="string[]" descr="Extra flags to pass to clang-tidy"/>
        <field name="unexported_symbols_list" type="string" descr="local file name to pass to the linker as -unexported_symbols_list"/>
        <field name="unique_host_soname" type="bool" descr="rename host libraries to prevent overlap with system installed libraries"/>
        <field name="use_clang_lld" type="bool" descr="Use clang lld instead of gnu ld."/>
        <field name="use_version_lib" type="bool" descr="make android::build:GetBuildNumber() available containing the build ID."/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vendor_available" type="bool" descr="whether this module should be allowed to be directly depended by other modules with `vendor: true`, `proprietary: true`, or `vendor_available:true`. If set to true, two variants will be built separately, one like normal, and the other limited to the set of libraries and headers that are exposed to /vendor modules. The vendor variant may be used with a different (newer) /system, so it shouldn't have any unversioned runtime dependencies, or make assumptions about the system that may not be true in the future. If set to false, this module becomes inaccessible from /vendor modules. Default value is true when vndk: {enabled: true} or vendor: true. Nothing happens if BOARD_VNDK_VERSION isn't set in the BoardConfig.mk"/>
        <field name="version_script" type="string" descr="local file name to pass to the linker as --version_script"/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
        <object-field name="vndk">
            <field name="enabled" type="bool" descr="declared as a VNDK or VNDK-SP module. The vendor variant will be installed in /system instead of /vendor partition. `vendor_vailable` must be explicitly set to either true or false together with `vndk: {enabled: true}`."/>
            <field name="support_system_process" type="bool" descr="declared as a VNDK-SP module, which is a subset of VNDK. `vndk: { enabled: true }` must set together. All these modules are allowed to link to VNDK-SP or LL-NDK modules only. Other dependency will cause link-type errors. If `support_system_process` is not set or set to false, the module is VNDK-core and can link to other VNDK-core, VNDK-SP or LL-NDK modules only."/>
            <field name="extends" type="string" descr="Extending another module"/>
        </object-field>
        <field name="whole_static_libs" type="blueprint[]" descr="list of modules whose object files should be linked into this module in their entirety.  For static library modules, all of the .o files from the intermediate directory of the dependency will be linked into this modules .a file.  For a shared library, the dependency's .a file will be linked into this module using -Wl,--whole-archive."/>
        <field name="xom" type="bool"/>
        <field name="yaccflags" type="string[]" descr="list of module-specific flags that will be used for .y and .yy compiles"/>
    </blueprint>
    <blueprint name="cc_library_shared">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="list of source files used to compile the C/C++ module.  May be .c, .cpp, or .S files. srcs may reference the outputs of other modules that produce source files like genrule or filegroup using the syntax &quot;:module&quot;."/>
        <field name="host_supported" type="bool" descr="If set to true, build a variant of the module for the host.  Defaults to false."/>
        <field name="device_supported" type="bool" descr="If set to true, build a variant of the module for the device.  Defaults to true."/>
        <object-field name="aidl">
            <field name="export_aidl_headers" type="bool" descr="export headers generated from .aidl sources"/>
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the aidl include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the aidl include paths."/>
            <field name="generate_traces" type="bool" descr="whether to generate traces (for systrace) for this interface"/>
        </object-field>
        <field name="allow_undefined_symbols" type="bool" descr="allow the module to contain undefined symbols.  By default, modules cannot contain undefined symbols that are not satisified by their immediate dependencies.  Set this flag to true to remove --no-undefined from the linker flags. This flag should only be necessary for compiling low-level libraries like libc."/>
        <field name="asflags" type="string[]" descr="list of module-specific flags that will be used for .S compiles"/>
        <field name="bootstrap" type="bool" descr="Allows this module to use non-APEX version of libraries. Useful for building binaries that are started before APEXes are activated."/>
        <field name="c_std" type="string" descr="C standard version to use. Can be a specific version (such as &quot;gnu11&quot;), &quot;experimental&quot; (which will use draft versions like C1x when available), or the empty string (which will use the default)."/>
        <field name="cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles."/>
        <field name="clang" type="bool" descr="Deprecated. true is the default, false is invalid."/>
        <field name="clang_asflags" type="string[]" descr="list of module-specific flags that will be used for .S compiles when compiling with clang"/>
        <field name="clang_cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles when compiling with clang"/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="conlyflags" type="string[]" descr="list of module-specific flags that will be used for C compiles"/>
        <field name="cpp_std" type="string" descr="C++ standard version to use. Can be a specific version (such as &quot;gnu++11&quot;), &quot;experimental&quot; (which will use draft versions like C++1z when available), or the empty string (which will use the default)."/>
        <field name="cppflags" type="string[]" descr="list of module-specific flags that will be used for C++ compiles"/>
        <object-field name="debug" descr="release">
            <field name="cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles in debug or release builds"/>
        </object-field>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="double_loadable" type="bool" descr="whether this module is capable of being loaded with other instance (possibly an older version) of the same module in the same process. Currently, a shared library that is a member of VNDK (vndk: {enabled: true}) can be double loaded in a vendor process if the library is also a (direct and indirect) dependency of an LLNDK library. Such libraries must be explicitly marked as `double_loadable: true` by the owner, or the dependency from the LLNDK lib should be cut if the lib is not designed to be double loaded."/>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the C/C++ module. This is most useful in the arch/multilib variants to remove non-common files"/>
        <field name="export_generated_headers" type="blueprint[]" descr="list of generated headers to re-export include directories from. Entries must be present in generated_headers."/>
        <field name="export_header_lib_headers" type="blueprint[]" descr="list of header libraries to re-export include directories from. Entries must be present in header_libs."/>
        <field name="export_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the include path (using -I) for this module and any module that links against this module.  Directories listed in export_include_dirs do not need to be listed in local_include_dirs."/>
        <field name="export_shared_lib_headers" type="blueprint[]" descr="list of shared libraries to re-export include directories from. Entries must be present in shared_libs."/>
        <field name="export_static_lib_headers" type="blueprint[]" descr="list of static libraries to re-export include directories from. Entries must be present in static_libs."/>
        <field name="force_symbols_not_weak_list" type="string" descr="local file name to pass to the linker as -force_symbols_not_weak_list"/>
        <field name="force_symbols_weak_list" type="string" descr="local file name to pass to the linker as -force_symbols_weak_list"/>
        <field name="generated_headers" type="blueprint[]" descr="list of generated headers to add to the include path. These are the names of genrule modules."/>
        <field name="generated_sources" type="blueprint[]" descr="list of generated sources to compile. These are the names of gensrcs or genrule modules."/>
        <field name="gnu_extensions" type="bool" descr="if set to false, use -std=c++* instead of -std=gnu++*"/>
        <field name="group_static_libs" type="bool" descr="group static libraries.  This can resolve missing symbols issues with interdependencies between static libraries, but it is generally better to order them correctly instead."/>
        <object-field name="header_abi_checker">
            <field name="symbol_file" type="string" descr="Path to a symbol file that specifies the symbols to be included in the generated ABI dump file"/>
            <field name="exclude_symbol_versions" type="string[]" descr="Symbol versions that should be ignored from the symbol file"/>
            <field name="exclude_symbol_tags" type="string[]" descr="Symbol tags that should be ignored from the symbol file"/>
        </object-field>
        <field name="header_libs" type="blueprint[]" descr="list of modules that should only provide headers for this module."/>
        <field name="host_ldlibs" type="string[]" descr="-l arguments to pass to linker for host-provided shared libraries"/>
        <field name="include_build_directory" type="bool" descr="Add the directory containing the Android.bp file to the list of include directories. Defaults to true."/>
        <field name="include_dirs" type="string[]" descr="list of directories relative to the root of the source tree that will be added to the include path using -I. If possible, don't use this.  If adding paths from the current directory use local_include_dirs, if adding paths from other modules use export_include_dirs in that module."/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="instruction_set" type="string" descr="the instruction set architecture to use to compile the C/C++ module."/>
        <field name="ldflags" type="string[]" descr="list of module-specific flags that will be used for all link steps"/>
        <field name="local_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the include path using -I"/>
        <field name="logtags" type="string[]" descr="*.logtags files, to combine together in order to generate the /system/etc/event-log-tags file"/>
        <object-field name="lto">
            <field name="never" type="bool"/>
            <field name="full" type="bool"/>
            <field name="thin" type="bool"/>
        </object-field>
        <field name="native_coverage" type="bool"/>
        <field name="no_libcrt" type="bool" descr="don't link in libclang_rt.builtins-*.a"/>
        <field name="no_libgcc" type="bool" descr="don't link in libgcc.a"/>
        <field name="nocrt" type="bool" descr="don't link in crt_begin and crt_end.  This flag should only be necessary for compiling crt or libc."/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="openmp" type="bool" descr="Build and link with OpenMP"/>
        <field name="overrides" type="blueprint[]" descr="Names of modules to be overridden. Listed modules can only be other shared libraries (in Make or Soong). This does not completely prevent installation of the overridden libraries, but if both binaries would be installed by default (in PRODUCT_PACKAGES) the other library will be removed from PRODUCT_PACKAGES."/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="pack_relocations" type="bool" descr="Generate compact dynamic relocation table, default true."/>
        <object-field name="pgo">
            <field name="instrumentation" type="bool"/>
            <field name="sampling" type="bool"/>
            <field name="profile_file" type="string"/>
            <field name="benchmarks" type="string[]"/>
            <field name="enable_profile_use" type="bool"/>
            <field name="cflags" type="string[]" descr="Additional compiler flags to use when building this module for profiling (either instrumentation or sampling)."/>
        </object-field>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <object-field name="proto">
            <field name="export_proto_headers" type="bool" descr="export headers generated from .proto sources"/>
            <field name="static" type="bool" descr="Link statically against the protobuf runtime"/>
            <field name="type" type="string" descr="Proto generator type.  C++: full or lite.  Java: micro, nano, stream, or lite."/>
            <field name="plugin" type="string" descr="Proto plugin to use as the generator.  Must be a cc_binary_host module."/>
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the protoc include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the bp file that will be added to the protoc include paths."/>
            <field name="canonical_path_from_root" type="bool" descr="whether to identify the proto files from the root of the source tree (the original method in Android, useful for android-specific protos), or relative from where they were specified (useful for external/third party protos). This defaults to true today, but is expected to default to false in the future."/>
        </object-field>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="recovery_available" type="bool" descr="Make this module available when building for recovery"/>
        <field name="reexportedIncludeFlags" type="string[]"/>
        <field name="relative_install_path" type="string" descr="install to a subdirectory of the default install path for the module"/>
        <object-field name="renderscript">
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the llvm-rs-cc include paths"/>
            <field name="flags" type="string[]" descr="list of flags that will be passed to llvm-rs-cc"/>
            <field name="target_api" type="string" descr="Renderscript API level to target"/>
        </object-field>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="rtti" type="bool" descr="pass -frtti instead of -fno-rtti"/>
        <field name="runtime_libs" type="blueprint[]" descr="list of modules that should be installed with this module.  This is similar to 'required' but '.vendor' suffix will be appended to the module names if the shared libraries have vendor variants and this module uses VNDK."/>
        <object-field name="sanitize">
            <field name="never" type="bool"/>
            <field name="address" type="bool" descr="main sanitizers"/>
            <field name="thread" type="bool"/>
            <field name="hwaddress" type="bool"/>
            <field name="undefined" type="bool" descr="local sanitizers"/>
            <field name="all_undefined" type="bool"/>
            <field name="misc_undefined" type="string[]"/>
            <field name="coverage" type="bool"/>
            <field name="safestack" type="bool"/>
            <field name="cfi" type="bool"/>
            <field name="integer_overflow" type="bool"/>
            <field name="scudo" type="bool"/>
            <field name="scs" type="bool"/>
            <object-field name="diag">
                <field name="undefined" type="bool"/>
                <field name="cfi" type="bool"/>
                <field name="integer_overflow" type="bool"/>
                <field name="misc_undefined" type="string[]"/>
                <field name="no_recover" type="string[]"/>
            </object-field>
            <field name="recover" type="string[]" descr="value to pass to -fsanitize-recover="/>
            <field name="blacklist" type="string" descr="value to pass to -fsanitize-blacklist"/>
        </object-field>
        <field name="sdclang" type="bool" descr="compile module with SDLLVM instead of AOSP LLVM"/>
        <field name="sdk_version" type="string" descr="Minimum sdk version supported when compiling against the ndk"/>
        <field name="shared" type="string[]"/>
        <field name="shared_libs" type="blueprint[]" descr="list of modules that should be dynamically linked into this module."/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="static" type="string[]"/>
        <field name="static_libs" type="blueprint[]" descr="list of modules that should be statically linked into this module."/>
        <field name="static_ndk_lib" type="bool"/>
        <field name="stem" type="string" descr="set the name of the output"/>
        <field name="stl" type="string" descr="Select the STL library to use.  Possible values are &quot;libc++&quot;, &quot;libc++_static&quot;, &quot;libstdc++&quot;, or &quot;none&quot;. Leave blank to select the default."/>
        <object-field name="strip">
            <field name="none" type="bool"/>
            <field name="all" type="bool"/>
            <field name="keep_symbols" type="bool"/>
            <field name="keep_symbols_list" type="string[]"/>
            <field name="use_gnu_strip" type="bool"/>
        </object-field>
        <object-field name="stubs">
            <field name="symbol_file" type="string" descr="Relative path to the symbol map. The symbol map provides the list of symbols that are exported for stubs variant of this library."/>
            <field name="versions" type="string[]" descr="List versions to generate stubs libs for."/>
        </object-field>
        <field name="symbol_ordering_file" type="string" descr="Local file name to pass to the linker as --symbol-ordering-file"/>
        <field name="system_shared_libs" type="blueprint[]" descr="list of system libraries that will be dynamically linked to shared library and executable modules.  If unset, generally defaults to libc, libm, and libdl.  Set to [] to prevent linking against the defaults."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
            <object-field name="recovery">
                <field name="srcs" type="string[]" descr="list of source files that should only be used in the recovery variant of the C/C++ module."/>
                <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="cflags" type="string[]" descr="List of additional cflags that should be used to build the recovery variant of the C/C++ module."/>
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the recovery variant of the C/C++ module."/>
            </object-field>
            <object-field name="vendor">
                <field name="override_export_include_dirs" type="string[]" descr="list of exported include directories, like export_include_dirs, that will be applied to the vendor variant of this library. This will overwrite any other declarations."/>
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_runtime_libs" type="blueprint[]" descr="list of runtime libs that should not be installed along with the vendor variant of the C/C++ module."/>
                <field name="version_script" type="string" descr="version script for this vendor variant"/>
                <field name="srcs" type="string[]" descr="list of source files that should only be used in the vendor variant of the C/C++ module."/>
                <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="cflags" type="string[]" descr="List of additional cflags that should be used to build the vendor variant of the C/C++ module."/>
            </object-field>
        </object-field>
        <field name="tidy" type="bool" descr="whether to run clang-tidy over C-like sources."/>
        <field name="tidy_checks" type="string[]" descr="Extra checks to enable or disable in clang-tidy"/>
        <field name="tidy_checks_as_errors" type="string[]" descr="Checks that should be treated as errors."/>
        <field name="tidy_flags" type="string[]" descr="Extra flags to pass to clang-tidy"/>
        <field name="unexported_symbols_list" type="string" descr="local file name to pass to the linker as -unexported_symbols_list"/>
        <field name="unique_host_soname" type="bool" descr="rename host libraries to prevent overlap with system installed libraries"/>
        <field name="use_clang_lld" type="bool" descr="Use clang lld instead of gnu ld."/>
        <field name="use_version_lib" type="bool" descr="make android::build:GetBuildNumber() available containing the build ID."/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vendor_available" type="bool" descr="whether this module should be allowed to be directly depended by other modules with `vendor: true`, `proprietary: true`, or `vendor_available:true`. If set to true, two variants will be built separately, one like normal, and the other limited to the set of libraries and headers that are exposed to /vendor modules. The vendor variant may be used with a different (newer) /system, so it shouldn't have any unversioned runtime dependencies, or make assumptions about the system that may not be true in the future. If set to false, this module becomes inaccessible from /vendor modules. Default value is true when vndk: {enabled: true} or vendor: true. Nothing happens if BOARD_VNDK_VERSION isn't set in the BoardConfig.mk"/>
        <field name="version_script" type="string" descr="local file name to pass to the linker as --version_script"/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
        <object-field name="vndk">
            <field name="enabled" type="bool" descr="declared as a VNDK or VNDK-SP module. The vendor variant will be installed in /system instead of /vendor partition. `vendor_vailable` must be explicitly set to either true or false together with `vndk: {enabled: true}`."/>
            <field name="support_system_process" type="bool" descr="declared as a VNDK-SP module, which is a subset of VNDK. `vndk: { enabled: true }` must set together. All these modules are allowed to link to VNDK-SP or LL-NDK modules only. Other dependency will cause link-type errors. If `support_system_process` is not set or set to false, the module is VNDK-core and can link to other VNDK-core, VNDK-SP or LL-NDK modules only."/>
            <field name="extends" type="string" descr="Extending another module"/>
        </object-field>
        <field name="whole_static_libs" type="blueprint[]" descr="list of modules whose object files should be linked into this module in their entirety.  For static library modules, all of the .o files from the intermediate directory of the dependency will be linked into this modules .a file.  For a shared library, the dependency's .a file will be linked into this module using -Wl,--whole-archive."/>
        <field name="xom" type="bool"/>
        <field name="yaccflags" type="string[]" descr="list of module-specific flags that will be used for .y and .yy compiles"/>
    </blueprint>
    <blueprint name="cc_library_static">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="list of source files used to compile the C/C++ module.  May be .c, .cpp, or .S files. srcs may reference the outputs of other modules that produce source files like genrule or filegroup using the syntax &quot;:module&quot;."/>
        <field name="host_supported" type="bool" descr="If set to true, build a variant of the module for the host.  Defaults to false."/>
        <field name="device_supported" type="bool" descr="If set to true, build a variant of the module for the device.  Defaults to true."/>
        <object-field name="aidl">
            <field name="export_aidl_headers" type="bool" descr="export headers generated from .aidl sources"/>
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the aidl include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the aidl include paths."/>
            <field name="generate_traces" type="bool" descr="whether to generate traces (for systrace) for this interface"/>
        </object-field>
        <field name="allow_undefined_symbols" type="bool" descr="allow the module to contain undefined symbols.  By default, modules cannot contain undefined symbols that are not satisified by their immediate dependencies.  Set this flag to true to remove --no-undefined from the linker flags. This flag should only be necessary for compiling low-level libraries like libc."/>
        <field name="asflags" type="string[]" descr="list of module-specific flags that will be used for .S compiles"/>
        <field name="bootstrap" type="bool" descr="Allows this module to use non-APEX version of libraries. Useful for building binaries that are started before APEXes are activated."/>
        <field name="c_std" type="string" descr="C standard version to use. Can be a specific version (such as &quot;gnu11&quot;), &quot;experimental&quot; (which will use draft versions like C1x when available), or the empty string (which will use the default)."/>
        <field name="cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles."/>
        <field name="clang" type="bool" descr="Deprecated. true is the default, false is invalid."/>
        <field name="clang_asflags" type="string[]" descr="list of module-specific flags that will be used for .S compiles when compiling with clang"/>
        <field name="clang_cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles when compiling with clang"/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="conlyflags" type="string[]" descr="list of module-specific flags that will be used for C compiles"/>
        <field name="cpp_std" type="string" descr="C++ standard version to use. Can be a specific version (such as &quot;gnu++11&quot;), &quot;experimental&quot; (which will use draft versions like C++1z when available), or the empty string (which will use the default)."/>
        <field name="cppflags" type="string[]" descr="list of module-specific flags that will be used for C++ compiles"/>
        <object-field name="debug" descr="release">
            <field name="cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles in debug or release builds"/>
        </object-field>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="double_loadable" type="bool" descr="whether this module is capable of being loaded with other instance (possibly an older version) of the same module in the same process. Currently, a shared library that is a member of VNDK (vndk: {enabled: true}) can be double loaded in a vendor process if the library is also a (direct and indirect) dependency of an LLNDK library. Such libraries must be explicitly marked as `double_loadable: true` by the owner, or the dependency from the LLNDK lib should be cut if the lib is not designed to be double loaded."/>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the C/C++ module. This is most useful in the arch/multilib variants to remove non-common files"/>
        <field name="export_generated_headers" type="blueprint[]" descr="list of generated headers to re-export include directories from. Entries must be present in generated_headers."/>
        <field name="export_header_lib_headers" type="blueprint[]" descr="list of header libraries to re-export include directories from. Entries must be present in header_libs."/>
        <field name="export_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the include path (using -I) for this module and any module that links against this module.  Directories listed in export_include_dirs do not need to be listed in local_include_dirs."/>
        <field name="export_shared_lib_headers" type="blueprint[]" descr="list of shared libraries to re-export include directories from. Entries must be present in shared_libs."/>
        <field name="export_static_lib_headers" type="blueprint[]" descr="list of static libraries to re-export include directories from. Entries must be present in static_libs."/>
        <field name="force_symbols_not_weak_list" type="string" descr="local file name to pass to the linker as -force_symbols_not_weak_list"/>
        <field name="force_symbols_weak_list" type="string" descr="local file name to pass to the linker as -force_symbols_weak_list"/>
        <field name="generated_headers" type="blueprint[]" descr="list of generated headers to add to the include path. These are the names of genrule modules."/>
        <field name="generated_sources" type="blueprint[]" descr="list of generated sources to compile. These are the names of gensrcs or genrule modules."/>
        <field name="gnu_extensions" type="bool" descr="if set to false, use -std=c++* instead of -std=gnu++*"/>
        <field name="group_static_libs" type="bool" descr="group static libraries.  This can resolve missing symbols issues with interdependencies between static libraries, but it is generally better to order them correctly instead."/>
        <object-field name="header_abi_checker">
            <field name="symbol_file" type="string" descr="Path to a symbol file that specifies the symbols to be included in the generated ABI dump file"/>
            <field name="exclude_symbol_versions" type="string[]" descr="Symbol versions that should be ignored from the symbol file"/>
            <field name="exclude_symbol_tags" type="string[]" descr="Symbol tags that should be ignored from the symbol file"/>
        </object-field>
        <field name="header_libs" type="blueprint[]" descr="list of modules that should only provide headers for this module."/>
        <field name="host_ldlibs" type="string[]" descr="-l arguments to pass to linker for host-provided shared libraries"/>
        <field name="include_build_directory" type="bool" descr="Add the directory containing the Android.bp file to the list of include directories. Defaults to true."/>
        <field name="include_dirs" type="string[]" descr="list of directories relative to the root of the source tree that will be added to the include path using -I. If possible, don't use this.  If adding paths from the current directory use local_include_dirs, if adding paths from other modules use export_include_dirs in that module."/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="instruction_set" type="string" descr="the instruction set architecture to use to compile the C/C++ module."/>
        <field name="ldflags" type="string[]" descr="list of module-specific flags that will be used for all link steps"/>
        <field name="local_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the include path using -I"/>
        <field name="logtags" type="string[]" descr="*.logtags files, to combine together in order to generate the /system/etc/event-log-tags file"/>
        <object-field name="lto">
            <field name="never" type="bool"/>
            <field name="full" type="bool"/>
            <field name="thin" type="bool"/>
        </object-field>
        <field name="native_coverage" type="bool"/>
        <field name="no_libcrt" type="bool" descr="don't link in libclang_rt.builtins-*.a"/>
        <field name="no_libgcc" type="bool" descr="don't link in libgcc.a"/>
        <field name="nocrt" type="bool" descr="don't link in crt_begin and crt_end.  This flag should only be necessary for compiling crt or libc."/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="openmp" type="bool" descr="Build and link with OpenMP"/>
        <field name="overrides" type="blueprint[]" descr="Names of modules to be overridden. Listed modules can only be other shared libraries (in Make or Soong). This does not completely prevent installation of the overridden libraries, but if both binaries would be installed by default (in PRODUCT_PACKAGES) the other library will be removed from PRODUCT_PACKAGES."/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="pack_relocations" type="bool" descr="Generate compact dynamic relocation table, default true."/>
        <object-field name="pgo">
            <field name="instrumentation" type="bool"/>
            <field name="sampling" type="bool"/>
            <field name="profile_file" type="string"/>
            <field name="benchmarks" type="string[]"/>
            <field name="enable_profile_use" type="bool"/>
            <field name="cflags" type="string[]" descr="Additional compiler flags to use when building this module for profiling (either instrumentation or sampling)."/>
        </object-field>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <object-field name="proto">
            <field name="export_proto_headers" type="bool" descr="export headers generated from .proto sources"/>
            <field name="static" type="bool" descr="Link statically against the protobuf runtime"/>
            <field name="type" type="string" descr="Proto generator type.  C++: full or lite.  Java: micro, nano, stream, or lite."/>
            <field name="plugin" type="string" descr="Proto plugin to use as the generator.  Must be a cc_binary_host module."/>
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the protoc include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the bp file that will be added to the protoc include paths."/>
            <field name="canonical_path_from_root" type="bool" descr="whether to identify the proto files from the root of the source tree (the original method in Android, useful for android-specific protos), or relative from where they were specified (useful for external/third party protos). This defaults to true today, but is expected to default to false in the future."/>
        </object-field>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="recovery_available" type="bool" descr="Make this module available when building for recovery"/>
        <field name="reexportedIncludeFlags" type="string[]"/>
        <field name="relative_install_path" type="string" descr="install to a subdirectory of the default install path for the module"/>
        <object-field name="renderscript">
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the llvm-rs-cc include paths"/>
            <field name="flags" type="string[]" descr="list of flags that will be passed to llvm-rs-cc"/>
            <field name="target_api" type="string" descr="Renderscript API level to target"/>
        </object-field>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="rtti" type="bool" descr="pass -frtti instead of -fno-rtti"/>
        <field name="runtime_libs" type="blueprint[]" descr="list of modules that should be installed with this module.  This is similar to 'required' but '.vendor' suffix will be appended to the module names if the shared libraries have vendor variants and this module uses VNDK."/>
        <object-field name="sanitize">
            <field name="never" type="bool"/>
            <field name="address" type="bool" descr="main sanitizers"/>
            <field name="thread" type="bool"/>
            <field name="hwaddress" type="bool"/>
            <field name="undefined" type="bool" descr="local sanitizers"/>
            <field name="all_undefined" type="bool"/>
            <field name="misc_undefined" type="string[]"/>
            <field name="coverage" type="bool"/>
            <field name="safestack" type="bool"/>
            <field name="cfi" type="bool"/>
            <field name="integer_overflow" type="bool"/>
            <field name="scudo" type="bool"/>
            <field name="scs" type="bool"/>
            <object-field name="diag">
                <field name="undefined" type="bool"/>
                <field name="cfi" type="bool"/>
                <field name="integer_overflow" type="bool"/>
                <field name="misc_undefined" type="string[]"/>
                <field name="no_recover" type="string[]"/>
            </object-field>
            <field name="recover" type="string[]" descr="value to pass to -fsanitize-recover="/>
            <field name="blacklist" type="string" descr="value to pass to -fsanitize-blacklist"/>
        </object-field>
        <field name="sdclang" type="bool" descr="compile module with SDLLVM instead of AOSP LLVM"/>
        <field name="sdk_version" type="string" descr="Minimum sdk version supported when compiling against the ndk"/>
        <field name="shared" type="string[]"/>
        <field name="shared_libs" type="blueprint[]" descr="list of modules that should be dynamically linked into this module."/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="static" type="string[]"/>
        <field name="static_libs" type="blueprint[]" descr="list of modules that should be statically linked into this module."/>
        <field name="static_ndk_lib" type="bool"/>
        <field name="stem" type="string" descr="set the name of the output"/>
        <field name="stl" type="string" descr="Select the STL library to use.  Possible values are &quot;libc++&quot;, &quot;libc++_static&quot;, &quot;libstdc++&quot;, or &quot;none&quot;. Leave blank to select the default."/>
        <object-field name="strip">
            <field name="none" type="bool"/>
            <field name="all" type="bool"/>
            <field name="keep_symbols" type="bool"/>
            <field name="keep_symbols_list" type="string[]"/>
            <field name="use_gnu_strip" type="bool"/>
        </object-field>
        <object-field name="stubs">
            <field name="symbol_file" type="string" descr="Relative path to the symbol map. The symbol map provides the list of symbols that are exported for stubs variant of this library."/>
            <field name="versions" type="string[]" descr="List versions to generate stubs libs for."/>
        </object-field>
        <field name="symbol_ordering_file" type="string" descr="Local file name to pass to the linker as --symbol-ordering-file"/>
        <field name="system_shared_libs" type="blueprint[]" descr="list of system libraries that will be dynamically linked to shared library and executable modules.  If unset, generally defaults to libc, libm, and libdl.  Set to [] to prevent linking against the defaults."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
            <object-field name="recovery">
                <field name="srcs" type="string[]" descr="list of source files that should only be used in the recovery variant of the C/C++ module."/>
                <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="cflags" type="string[]" descr="List of additional cflags that should be used to build the recovery variant of the C/C++ module."/>
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the recovery variant of the C/C++ module."/>
            </object-field>
            <object-field name="vendor">
                <field name="override_export_include_dirs" type="string[]" descr="list of exported include directories, like export_include_dirs, that will be applied to the vendor variant of this library. This will overwrite any other declarations."/>
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_runtime_libs" type="blueprint[]" descr="list of runtime libs that should not be installed along with the vendor variant of the C/C++ module."/>
                <field name="version_script" type="string" descr="version script for this vendor variant"/>
                <field name="srcs" type="string[]" descr="list of source files that should only be used in the vendor variant of the C/C++ module."/>
                <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="cflags" type="string[]" descr="List of additional cflags that should be used to build the vendor variant of the C/C++ module."/>
            </object-field>
        </object-field>
        <field name="tidy" type="bool" descr="whether to run clang-tidy over C-like sources."/>
        <field name="tidy_checks" type="string[]" descr="Extra checks to enable or disable in clang-tidy"/>
        <field name="tidy_checks_as_errors" type="string[]" descr="Checks that should be treated as errors."/>
        <field name="tidy_flags" type="string[]" descr="Extra flags to pass to clang-tidy"/>
        <field name="unexported_symbols_list" type="string" descr="local file name to pass to the linker as -unexported_symbols_list"/>
        <field name="unique_host_soname" type="bool" descr="rename host libraries to prevent overlap with system installed libraries"/>
        <field name="use_clang_lld" type="bool" descr="Use clang lld instead of gnu ld."/>
        <field name="use_version_lib" type="bool" descr="make android::build:GetBuildNumber() available containing the build ID."/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vendor_available" type="bool" descr="whether this module should be allowed to be directly depended by other modules with `vendor: true`, `proprietary: true`, or `vendor_available:true`. If set to true, two variants will be built separately, one like normal, and the other limited to the set of libraries and headers that are exposed to /vendor modules. The vendor variant may be used with a different (newer) /system, so it shouldn't have any unversioned runtime dependencies, or make assumptions about the system that may not be true in the future. If set to false, this module becomes inaccessible from /vendor modules. Default value is true when vndk: {enabled: true} or vendor: true. Nothing happens if BOARD_VNDK_VERSION isn't set in the BoardConfig.mk"/>
        <field name="version_script" type="string" descr="local file name to pass to the linker as --version_script"/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
        <object-field name="vndk">
            <field name="enabled" type="bool" descr="declared as a VNDK or VNDK-SP module. The vendor variant will be installed in /system instead of /vendor partition. `vendor_vailable` must be explicitly set to either true or false together with `vndk: {enabled: true}`."/>
            <field name="support_system_process" type="bool" descr="declared as a VNDK-SP module, which is a subset of VNDK. `vndk: { enabled: true }` must set together. All these modules are allowed to link to VNDK-SP or LL-NDK modules only. Other dependency will cause link-type errors. If `support_system_process` is not set or set to false, the module is VNDK-core and can link to other VNDK-core, VNDK-SP or LL-NDK modules only."/>
            <field name="extends" type="string" descr="Extending another module"/>
        </object-field>
        <field name="whole_static_libs" type="blueprint[]" descr="list of modules whose object files should be linked into this module in their entirety.  For static library modules, all of the .o files from the intermediate directory of the dependency will be linked into this modules .a file.  For a shared library, the dependency's .a file will be linked into this module using -Wl,--whole-archive."/>
        <field name="xom" type="bool"/>
        <field name="yaccflags" type="string[]" descr="list of module-specific flags that will be used for .y and .yy compiles"/>
    </blueprint>
    <blueprint name="cc_object">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="list of source files used to compile the C/C++ module.  May be .c, .cpp, or .S files. srcs may reference the outputs of other modules that produce source files like genrule or filegroup using the syntax &quot;:module&quot;."/>
        <field name="host_supported" type="bool" descr="If set to true, build a variant of the module for the host.  Defaults to false."/>
        <field name="device_supported" type="bool" descr="If set to true, build a variant of the module for the device.  Defaults to true."/>
        <object-field name="aidl">
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the aidl include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the aidl include paths."/>
            <field name="generate_traces" type="bool" descr="whether to generate traces (for systrace) for this interface"/>
        </object-field>
        <field name="asflags" type="string[]" descr="list of module-specific flags that will be used for .S compiles"/>
        <field name="bootstrap" type="bool" descr="Allows this module to use non-APEX version of libraries. Useful for building binaries that are started before APEXes are activated."/>
        <field name="c_std" type="string" descr="C standard version to use. Can be a specific version (such as &quot;gnu11&quot;), &quot;experimental&quot; (which will use draft versions like C1x when available), or the empty string (which will use the default)."/>
        <field name="cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles."/>
        <field name="clang" type="bool" descr="Deprecated. true is the default, false is invalid."/>
        <field name="clang_asflags" type="string[]" descr="list of module-specific flags that will be used for .S compiles when compiling with clang"/>
        <field name="clang_cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles when compiling with clang"/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="conlyflags" type="string[]" descr="list of module-specific flags that will be used for C compiles"/>
        <field name="cpp_std" type="string" descr="C++ standard version to use. Can be a specific version (such as &quot;gnu++11&quot;), &quot;experimental&quot; (which will use draft versions like C++1z when available), or the empty string (which will use the default)."/>
        <field name="cppflags" type="string[]" descr="list of module-specific flags that will be used for C++ compiles"/>
        <object-field name="debug" descr="release">
            <field name="cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles in debug or release builds"/>
        </object-field>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="double_loadable" type="bool" descr="whether this module is capable of being loaded with other instance (possibly an older version) of the same module in the same process. Currently, a shared library that is a member of VNDK (vndk: {enabled: true}) can be double loaded in a vendor process if the library is also a (direct and indirect) dependency of an LLNDK library. Such libraries must be explicitly marked as `double_loadable: true` by the owner, or the dependency from the LLNDK lib should be cut if the lib is not designed to be double loaded."/>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the C/C++ module. This is most useful in the arch/multilib variants to remove non-common files"/>
        <field name="generated_headers" type="blueprint[]" descr="list of generated headers to add to the include path. These are the names of genrule modules."/>
        <field name="generated_sources" type="blueprint[]" descr="list of generated sources to compile. These are the names of gensrcs or genrule modules."/>
        <field name="gnu_extensions" type="bool" descr="if set to false, use -std=c++* instead of -std=gnu++*"/>
        <field name="include_build_directory" type="bool" descr="Add the directory containing the Android.bp file to the list of include directories. Defaults to true."/>
        <field name="include_dirs" type="string[]" descr="list of directories relative to the root of the source tree that will be added to the include path using -I. If possible, don't use this.  If adding paths from the current directory use local_include_dirs, if adding paths from other modules use export_include_dirs in that module."/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="instruction_set" type="string" descr="the instruction set architecture to use to compile the C/C++ module."/>
        <field name="local_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the include path using -I"/>
        <field name="logtags" type="string[]" descr="*.logtags files, to combine together in order to generate the /system/etc/event-log-tags file"/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="objs" type="string[]" descr="names of other cc_object modules to link into this module using partial linking"/>
        <field name="openmp" type="bool" descr="Build and link with OpenMP"/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="prefix_symbols" type="string" descr="if set, add an extra objcopy --prefix-symbols= step"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <object-field name="proto">
            <field name="static" type="bool" descr="Link statically against the protobuf runtime"/>
            <field name="type" type="string" descr="Proto generator type.  C++: full or lite.  Java: micro, nano, stream, or lite."/>
            <field name="plugin" type="string" descr="Proto plugin to use as the generator.  Must be a cc_binary_host module."/>
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the protoc include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the bp file that will be added to the protoc include paths."/>
            <field name="canonical_path_from_root" type="bool" descr="whether to identify the proto files from the root of the source tree (the original method in Android, useful for android-specific protos), or relative from where they were specified (useful for external/third party protos). This defaults to true today, but is expected to default to false in the future."/>
        </object-field>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="recovery_available" type="bool" descr="Make this module available when building for recovery"/>
        <object-field name="renderscript">
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the llvm-rs-cc include paths"/>
            <field name="flags" type="string[]" descr="list of flags that will be passed to llvm-rs-cc"/>
            <field name="target_api" type="string" descr="Renderscript API level to target"/>
        </object-field>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="rtti" type="bool" descr="pass -frtti instead of -fno-rtti"/>
        <field name="sdclang" type="bool" descr="compile module with SDLLVM instead of AOSP LLVM"/>
        <field name="sdk_version" type="string" descr="Minimum sdk version supported when compiling against the ndk"/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="stl" type="string" descr="Select the STL library to use.  Possible values are &quot;libc++&quot;, &quot;libc++_static&quot;, &quot;libstdc++&quot;, or &quot;none&quot;. Leave blank to select the default."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
            <object-field name="recovery">
                <field name="srcs" type="string[]" descr="list of source files that should only be used in the recovery variant of the C/C++ module."/>
                <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="cflags" type="string[]" descr="List of additional cflags that should be used to build the recovery variant of the C/C++ module."/>
            </object-field>
            <object-field name="vendor">
                <field name="srcs" type="string[]" descr="list of source files that should only be used in the vendor variant of the C/C++ module."/>
                <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="cflags" type="string[]" descr="List of additional cflags that should be used to build the vendor variant of the C/C++ module."/>
            </object-field>
        </object-field>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vendor_available" type="bool" descr="whether this module should be allowed to be directly depended by other modules with `vendor: true`, `proprietary: true`, or `vendor_available:true`. If set to true, two variants will be built separately, one like normal, and the other limited to the set of libraries and headers that are exposed to /vendor modules. The vendor variant may be used with a different (newer) /system, so it shouldn't have any unversioned runtime dependencies, or make assumptions about the system that may not be true in the future. If set to false, this module becomes inaccessible from /vendor modules. Default value is true when vndk: {enabled: true} or vendor: true. Nothing happens if BOARD_VNDK_VERSION isn't set in the BoardConfig.mk"/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
        <field name="yaccflags" type="string[]" descr="list of module-specific flags that will be used for .y and .yy compiles"/>
    </blueprint>
    <blueprint name="cc_prebuilt_binary">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="a prebuilt library or binary. Can reference a genrule module that generates an executable file."/>
        <field name="host_supported" type="bool" descr="If set to true, build a variant of the module for the host.  Defaults to false."/>
        <field name="device_supported" type="bool" descr="If set to true, build a variant of the module for the device.  Defaults to true."/>
        <field name="allow_undefined_symbols" type="bool" descr="allow the module to contain undefined symbols.  By default, modules cannot contain undefined symbols that are not satisified by their immediate dependencies.  Set this flag to true to remove --no-undefined from the linker flags. This flag should only be necessary for compiling low-level libraries like libc."/>
        <field name="bootstrap" type="bool" descr="Allows this module to use non-APEX version of libraries. Useful for building binaries that are started before APEXes are activated."/>
        <field name="check_elf_files" type="bool" descr="Check the prebuilt ELF files (e.g. DT_SONAME, DT_NEEDED, resolution of undefined symbols, etc), default true."/>
        <field name="clang" type="bool" descr="Deprecated. true is the default, false is invalid."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="double_loadable" type="bool" descr="whether this module is capable of being loaded with other instance (possibly an older version) of the same module in the same process. Currently, a shared library that is a member of VNDK (vndk: {enabled: true}) can be double loaded in a vendor process if the library is also a (direct and indirect) dependency of an LLNDK library. Such libraries must be explicitly marked as `double_loadable: true` by the owner, or the dependency from the LLNDK lib should be cut if the lib is not designed to be double loaded."/>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="export_generated_headers" type="blueprint[]" descr="list of generated headers to re-export include directories from. Entries must be present in generated_headers."/>
        <field name="export_header_lib_headers" type="blueprint[]" descr="list of header libraries to re-export include directories from. Entries must be present in header_libs."/>
        <field name="export_shared_lib_headers" type="blueprint[]" descr="list of shared libraries to re-export include directories from. Entries must be present in shared_libs."/>
        <field name="export_static_lib_headers" type="blueprint[]" descr="list of static libraries to re-export include directories from. Entries must be present in static_libs."/>
        <field name="group_static_libs" type="bool" descr="group static libraries.  This can resolve missing symbols issues with interdependencies between static libraries, but it is generally better to order them correctly instead."/>
        <field name="header_libs" type="blueprint[]" descr="list of modules that should only provide headers for this module."/>
        <field name="host_ldlibs" type="string[]" descr="-l arguments to pass to linker for host-provided shared libraries"/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="ldflags" type="string[]" descr="list of module-specific flags that will be used for all link steps"/>
        <field name="logtags" type="string[]" descr="*.logtags files, to combine together in order to generate the /system/etc/event-log-tags file"/>
        <object-field name="lto">
            <field name="never" type="bool"/>
            <field name="full" type="bool"/>
            <field name="thin" type="bool"/>
        </object-field>
        <field name="native_coverage" type="bool"/>
        <field name="no_libcrt" type="bool" descr="don't link in libclang_rt.builtins-*.a"/>
        <field name="no_libgcc" type="bool" descr="don't link in libgcc.a"/>
        <field name="nocrt" type="bool" descr="don't link in crt_begin and crt_end.  This flag should only be necessary for compiling crt or libc."/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="overrides" type="blueprint[]" descr="Names of modules to be overridden. Listed modules can only be other binaries (in Make or Soong). This does not completely prevent installation of the overridden binaries, but if both binaries would be installed by default (in PRODUCT_PACKAGES) the other binary will be removed from PRODUCT_PACKAGES."/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="pack_relocations" type="bool" descr="Generate compact dynamic relocation table, default true."/>
        <object-field name="pgo">
            <field name="instrumentation" type="bool"/>
            <field name="sampling" type="bool"/>
            <field name="profile_file" type="string"/>
            <field name="benchmarks" type="string[]"/>
            <field name="enable_profile_use" type="bool"/>
            <field name="cflags" type="string[]" descr="Additional compiler flags to use when building this module for profiling (either instrumentation or sampling)."/>
        </object-field>
        <field name="prefer" type="bool" descr="When prefer is set to true the prebuilt will be used instead of any source module with a matching name."/>
        <field name="prefix_symbols" type="string" descr="if set, add an extra objcopy --prefix-symbols= step"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="recovery_available" type="bool" descr="Make this module available when building for recovery"/>
        <field name="reexportedIncludeFlags" type="string[]"/>
        <field name="relative_install_path" type="string" descr="install to a subdirectory of the default install path for the module"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="runtime_libs" type="blueprint[]" descr="list of modules that should be installed with this module.  This is similar to 'required' but '.vendor' suffix will be appended to the module names if the shared libraries have vendor variants and this module uses VNDK."/>
        <object-field name="sanitize">
            <field name="never" type="bool"/>
            <field name="address" type="bool" descr="main sanitizers"/>
            <field name="thread" type="bool"/>
            <field name="hwaddress" type="bool"/>
            <field name="undefined" type="bool" descr="local sanitizers"/>
            <field name="all_undefined" type="bool"/>
            <field name="misc_undefined" type="string[]"/>
            <field name="coverage" type="bool"/>
            <field name="safestack" type="bool"/>
            <field name="cfi" type="bool"/>
            <field name="integer_overflow" type="bool"/>
            <field name="scudo" type="bool"/>
            <field name="scs" type="bool"/>
            <object-field name="diag">
                <field name="undefined" type="bool"/>
                <field name="cfi" type="bool"/>
                <field name="integer_overflow" type="bool"/>
                <field name="misc_undefined" type="string[]"/>
                <field name="no_recover" type="string[]"/>
            </object-field>
            <field name="recover" type="string[]" descr="value to pass to -fsanitize-recover="/>
            <field name="blacklist" type="string" descr="value to pass to -fsanitize-blacklist"/>
        </object-field>
        <field name="sdclang" type="bool" descr="compile module with SDLLVM instead of AOSP LLVM"/>
        <field name="sdk_version" type="string" descr="Minimum sdk version supported when compiling against the ndk"/>
        <field name="shared_libs" type="blueprint[]" descr="list of modules that should be dynamically linked into this module."/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="static_executable" type="bool" descr="compile executable with -static"/>
        <field name="static_libs" type="blueprint[]" descr="list of modules that should be statically linked into this module."/>
        <field name="stem" type="string" descr="set the name of the output"/>
        <field name="stl" type="string" descr="Select the STL library to use.  Possible values are &quot;libc++&quot;, &quot;libc++_static&quot;, &quot;libstdc++&quot;, or &quot;none&quot;. Leave blank to select the default."/>
        <object-field name="strip">
            <field name="none" type="bool"/>
            <field name="all" type="bool"/>
            <field name="keep_symbols" type="bool"/>
            <field name="keep_symbols_list" type="string[]"/>
            <field name="use_gnu_strip" type="bool"/>
        </object-field>
        <field name="suffix" type="string" descr="append to the name of the output"/>
        <field name="symbol_ordering_file" type="string" descr="Local file name to pass to the linker as --symbol-ordering-file"/>
        <field name="symlink_preferred_arch" type="bool" descr="if set, install a symlink to the preferred architecture"/>
        <field name="symlinks" type="string[]" descr="install symlinks to the binary.  Symlink names will have the suffix and the binary extension (if any) appended"/>
        <field name="system_shared_libs" type="blueprint[]" descr="list of system libraries that will be dynamically linked to shared library and executable modules.  If unset, generally defaults to libc, libm, and libdl.  Set to [] to prevent linking against the defaults."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
            <object-field name="recovery">
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the recovery variant of the C/C++ module."/>
            </object-field>
            <object-field name="vendor">
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_runtime_libs" type="blueprint[]" descr="list of runtime libs that should not be installed along with the vendor variant of the C/C++ module."/>
                <field name="version_script" type="string" descr="version script for this vendor variant"/>
            </object-field>
        </object-field>
        <field name="tidy" type="bool" descr="whether to run clang-tidy over C-like sources."/>
        <field name="tidy_checks" type="string[]" descr="Extra checks to enable or disable in clang-tidy"/>
        <field name="tidy_checks_as_errors" type="string[]" descr="Checks that should be treated as errors."/>
        <field name="tidy_flags" type="string[]" descr="Extra flags to pass to clang-tidy"/>
        <field name="use_clang_lld" type="bool" descr="Use clang lld instead of gnu ld."/>
        <field name="use_version_lib" type="bool" descr="make android::build:GetBuildNumber() available containing the build ID."/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vendor_available" type="bool" descr="whether this module should be allowed to be directly depended by other modules with `vendor: true`, `proprietary: true`, or `vendor_available:true`. If set to true, two variants will be built separately, one like normal, and the other limited to the set of libraries and headers that are exposed to /vendor modules. The vendor variant may be used with a different (newer) /system, so it shouldn't have any unversioned runtime dependencies, or make assumptions about the system that may not be true in the future. If set to false, this module becomes inaccessible from /vendor modules. Default value is true when vndk: {enabled: true} or vendor: true. Nothing happens if BOARD_VNDK_VERSION isn't set in the BoardConfig.mk"/>
        <field name="version_script" type="string" descr="local file name to pass to the linker as --version_script"/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
        <object-field name="vndk">
            <field name="enabled" type="bool" descr="declared as a VNDK or VNDK-SP module. The vendor variant will be installed in /system instead of /vendor partition. `vendor_vailable` must be explicitly set to either true or false together with `vndk: {enabled: true}`."/>
            <field name="support_system_process" type="bool" descr="declared as a VNDK-SP module, which is a subset of VNDK. `vndk: { enabled: true }` must set together. All these modules are allowed to link to VNDK-SP or LL-NDK modules only. Other dependency will cause link-type errors. If `support_system_process` is not set or set to false, the module is VNDK-core and can link to other VNDK-core, VNDK-SP or LL-NDK modules only."/>
            <field name="extends" type="string" descr="Extending another module"/>
        </object-field>
        <field name="whole_static_libs" type="blueprint[]" descr="list of modules whose object files should be linked into this module in their entirety.  For static library modules, all of the .o files from the intermediate directory of the dependency will be linked into this modules .a file.  For a shared library, the dependency's .a file will be linked into this module using -Wl,--whole-archive."/>
        <field name="xom" type="bool"/>
    </blueprint>
    <blueprint name="cc_prebuilt_library_shared">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="a prebuilt library or binary. Can reference a genrule module that generates an executable file."/>
        <field name="host_supported" type="bool" descr="If set to true, build a variant of the module for the host.  Defaults to false."/>
        <field name="device_supported" type="bool" descr="If set to true, build a variant of the module for the device.  Defaults to true."/>
        <object-field name="aidl">
            <field name="export_aidl_headers" type="bool" descr="export headers generated from .aidl sources"/>
        </object-field>
        <field name="allow_undefined_symbols" type="bool" descr="allow the module to contain undefined symbols.  By default, modules cannot contain undefined symbols that are not satisified by their immediate dependencies.  Set this flag to true to remove --no-undefined from the linker flags. This flag should only be necessary for compiling low-level libraries like libc."/>
        <field name="bootstrap" type="bool" descr="Allows this module to use non-APEX version of libraries. Useful for building binaries that are started before APEXes are activated."/>
        <field name="check_elf_files" type="bool" descr="Check the prebuilt ELF files (e.g. DT_SONAME, DT_NEEDED, resolution of undefined symbols, etc), default true."/>
        <field name="clang" type="bool" descr="Deprecated. true is the default, false is invalid."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="double_loadable" type="bool" descr="whether this module is capable of being loaded with other instance (possibly an older version) of the same module in the same process. Currently, a shared library that is a member of VNDK (vndk: {enabled: true}) can be double loaded in a vendor process if the library is also a (direct and indirect) dependency of an LLNDK library. Such libraries must be explicitly marked as `double_loadable: true` by the owner, or the dependency from the LLNDK lib should be cut if the lib is not designed to be double loaded."/>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="export_generated_headers" type="blueprint[]" descr="list of generated headers to re-export include directories from. Entries must be present in generated_headers."/>
        <field name="export_header_lib_headers" type="blueprint[]" descr="list of header libraries to re-export include directories from. Entries must be present in header_libs."/>
        <field name="export_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the include path (using -I) for this module and any module that links against this module.  Directories listed in export_include_dirs do not need to be listed in local_include_dirs."/>
        <field name="export_shared_lib_headers" type="blueprint[]" descr="list of shared libraries to re-export include directories from. Entries must be present in shared_libs."/>
        <field name="export_static_lib_headers" type="blueprint[]" descr="list of static libraries to re-export include directories from. Entries must be present in static_libs."/>
        <field name="force_symbols_not_weak_list" type="string" descr="local file name to pass to the linker as -force_symbols_not_weak_list"/>
        <field name="force_symbols_weak_list" type="string" descr="local file name to pass to the linker as -force_symbols_weak_list"/>
        <field name="group_static_libs" type="bool" descr="group static libraries.  This can resolve missing symbols issues with interdependencies between static libraries, but it is generally better to order them correctly instead."/>
        <object-field name="header_abi_checker">
            <field name="symbol_file" type="string" descr="Path to a symbol file that specifies the symbols to be included in the generated ABI dump file"/>
            <field name="exclude_symbol_versions" type="string[]" descr="Symbol versions that should be ignored from the symbol file"/>
            <field name="exclude_symbol_tags" type="string[]" descr="Symbol tags that should be ignored from the symbol file"/>
        </object-field>
        <field name="header_libs" type="blueprint[]" descr="list of modules that should only provide headers for this module."/>
        <field name="host_ldlibs" type="string[]" descr="-l arguments to pass to linker for host-provided shared libraries"/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="ldflags" type="string[]" descr="list of module-specific flags that will be used for all link steps"/>
        <field name="logtags" type="string[]" descr="*.logtags files, to combine together in order to generate the /system/etc/event-log-tags file"/>
        <object-field name="lto">
            <field name="never" type="bool"/>
            <field name="full" type="bool"/>
            <field name="thin" type="bool"/>
        </object-field>
        <field name="native_coverage" type="bool"/>
        <field name="no_libcrt" type="bool" descr="don't link in libclang_rt.builtins-*.a"/>
        <field name="no_libgcc" type="bool" descr="don't link in libgcc.a"/>
        <field name="nocrt" type="bool" descr="don't link in crt_begin and crt_end.  This flag should only be necessary for compiling crt or libc."/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="overrides" type="blueprint[]" descr="Names of modules to be overridden. Listed modules can only be other shared libraries (in Make or Soong). This does not completely prevent installation of the overridden libraries, but if both binaries would be installed by default (in PRODUCT_PACKAGES) the other library will be removed from PRODUCT_PACKAGES."/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="pack_relocations" type="bool" descr="Generate compact dynamic relocation table, default true."/>
        <object-field name="pgo">
            <field name="instrumentation" type="bool"/>
            <field name="sampling" type="bool"/>
            <field name="profile_file" type="string"/>
            <field name="benchmarks" type="string[]"/>
            <field name="enable_profile_use" type="bool"/>
            <field name="cflags" type="string[]" descr="Additional compiler flags to use when building this module for profiling (either instrumentation or sampling)."/>
        </object-field>
        <field name="prefer" type="bool" descr="When prefer is set to true the prebuilt will be used instead of any source module with a matching name."/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <object-field name="proto">
            <field name="export_proto_headers" type="bool" descr="export headers generated from .proto sources"/>
        </object-field>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="recovery_available" type="bool" descr="Make this module available when building for recovery"/>
        <field name="reexportedIncludeFlags" type="string[]"/>
        <field name="relative_install_path" type="string" descr="install to a subdirectory of the default install path for the module"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="runtime_libs" type="blueprint[]" descr="list of modules that should be installed with this module.  This is similar to 'required' but '.vendor' suffix will be appended to the module names if the shared libraries have vendor variants and this module uses VNDK."/>
        <object-field name="sanitize">
            <field name="never" type="bool"/>
            <field name="address" type="bool" descr="main sanitizers"/>
            <field name="thread" type="bool"/>
            <field name="hwaddress" type="bool"/>
            <field name="undefined" type="bool" descr="local sanitizers"/>
            <field name="all_undefined" type="bool"/>
            <field name="misc_undefined" type="string[]"/>
            <field name="coverage" type="bool"/>
            <field name="safestack" type="bool"/>
            <field name="cfi" type="bool"/>
            <field name="integer_overflow" type="bool"/>
            <field name="scudo" type="bool"/>
            <field name="scs" type="bool"/>
            <object-field name="diag">
                <field name="undefined" type="bool"/>
                <field name="cfi" type="bool"/>
                <field name="integer_overflow" type="bool"/>
                <field name="misc_undefined" type="string[]"/>
                <field name="no_recover" type="string[]"/>
            </object-field>
            <field name="recover" type="string[]" descr="value to pass to -fsanitize-recover="/>
            <field name="blacklist" type="string" descr="value to pass to -fsanitize-blacklist"/>
        </object-field>
        <field name="sdclang" type="bool" descr="compile module with SDLLVM instead of AOSP LLVM"/>
        <field name="sdk_version" type="string" descr="Minimum sdk version supported when compiling against the ndk"/>
        <field name="shared" type="string[]"/>
        <field name="shared_libs" type="blueprint[]" descr="list of modules that should be dynamically linked into this module."/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="static" type="string[]"/>
        <field name="static_libs" type="blueprint[]" descr="list of modules that should be statically linked into this module."/>
        <field name="static_ndk_lib" type="bool"/>
        <field name="stem" type="string" descr="set the name of the output"/>
        <field name="stl" type="string" descr="Select the STL library to use.  Possible values are &quot;libc++&quot;, &quot;libc++_static&quot;, &quot;libstdc++&quot;, or &quot;none&quot;. Leave blank to select the default."/>
        <object-field name="strip">
            <field name="none" type="bool"/>
            <field name="all" type="bool"/>
            <field name="keep_symbols" type="bool"/>
            <field name="keep_symbols_list" type="string[]"/>
            <field name="use_gnu_strip" type="bool"/>
        </object-field>
        <object-field name="stubs">
            <field name="symbol_file" type="string" descr="Relative path to the symbol map. The symbol map provides the list of symbols that are exported for stubs variant of this library."/>
            <field name="versions" type="string[]" descr="List versions to generate stubs libs for."/>
        </object-field>
        <field name="symbol_ordering_file" type="string" descr="Local file name to pass to the linker as --symbol-ordering-file"/>
        <field name="system_shared_libs" type="blueprint[]" descr="list of system libraries that will be dynamically linked to shared library and executable modules.  If unset, generally defaults to libc, libm, and libdl.  Set to [] to prevent linking against the defaults."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
            <object-field name="recovery">
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the recovery variant of the C/C++ module."/>
            </object-field>
            <object-field name="vendor">
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_runtime_libs" type="blueprint[]" descr="list of runtime libs that should not be installed along with the vendor variant of the C/C++ module."/>
                <field name="version_script" type="string" descr="version script for this vendor variant"/>
                <field name="override_export_include_dirs" type="string[]" descr="list of exported include directories, like export_include_dirs, that will be applied to the vendor variant of this library. This will overwrite any other declarations."/>
            </object-field>
        </object-field>
        <field name="tidy" type="bool" descr="whether to run clang-tidy over C-like sources."/>
        <field name="tidy_checks" type="string[]" descr="Extra checks to enable or disable in clang-tidy"/>
        <field name="tidy_checks_as_errors" type="string[]" descr="Checks that should be treated as errors."/>
        <field name="tidy_flags" type="string[]" descr="Extra flags to pass to clang-tidy"/>
        <field name="unexported_symbols_list" type="string" descr="local file name to pass to the linker as -unexported_symbols_list"/>
        <field name="unique_host_soname" type="bool" descr="rename host libraries to prevent overlap with system installed libraries"/>
        <field name="use_clang_lld" type="bool" descr="Use clang lld instead of gnu ld."/>
        <field name="use_version_lib" type="bool" descr="make android::build:GetBuildNumber() available containing the build ID."/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vendor_available" type="bool" descr="whether this module should be allowed to be directly depended by other modules with `vendor: true`, `proprietary: true`, or `vendor_available:true`. If set to true, two variants will be built separately, one like normal, and the other limited to the set of libraries and headers that are exposed to /vendor modules. The vendor variant may be used with a different (newer) /system, so it shouldn't have any unversioned runtime dependencies, or make assumptions about the system that may not be true in the future. If set to false, this module becomes inaccessible from /vendor modules. Default value is true when vndk: {enabled: true} or vendor: true. Nothing happens if BOARD_VNDK_VERSION isn't set in the BoardConfig.mk"/>
        <field name="version_script" type="string" descr="local file name to pass to the linker as --version_script"/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
        <object-field name="vndk">
            <field name="enabled" type="bool" descr="declared as a VNDK or VNDK-SP module. The vendor variant will be installed in /system instead of /vendor partition. `vendor_vailable` must be explicitly set to either true or false together with `vndk: {enabled: true}`."/>
            <field name="support_system_process" type="bool" descr="declared as a VNDK-SP module, which is a subset of VNDK. `vndk: { enabled: true }` must set together. All these modules are allowed to link to VNDK-SP or LL-NDK modules only. Other dependency will cause link-type errors. If `support_system_process` is not set or set to false, the module is VNDK-core and can link to other VNDK-core, VNDK-SP or LL-NDK modules only."/>
            <field name="extends" type="string" descr="Extending another module"/>
        </object-field>
        <field name="whole_static_libs" type="blueprint[]" descr="list of modules whose object files should be linked into this module in their entirety.  For static library modules, all of the .o files from the intermediate directory of the dependency will be linked into this modules .a file.  For a shared library, the dependency's .a file will be linked into this module using -Wl,--whole-archive."/>
        <field name="xom" type="bool"/>
    </blueprint>
    <blueprint name="cc_prebuilt_library_static">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="a prebuilt library or binary. Can reference a genrule module that generates an executable file."/>
        <field name="host_supported" type="bool" descr="If set to true, build a variant of the module for the host.  Defaults to false."/>
        <field name="device_supported" type="bool" descr="If set to true, build a variant of the module for the device.  Defaults to true."/>
        <object-field name="aidl">
            <field name="export_aidl_headers" type="bool" descr="export headers generated from .aidl sources"/>
        </object-field>
        <field name="allow_undefined_symbols" type="bool" descr="allow the module to contain undefined symbols.  By default, modules cannot contain undefined symbols that are not satisified by their immediate dependencies.  Set this flag to true to remove --no-undefined from the linker flags. This flag should only be necessary for compiling low-level libraries like libc."/>
        <field name="bootstrap" type="bool" descr="Allows this module to use non-APEX version of libraries. Useful for building binaries that are started before APEXes are activated."/>
        <field name="check_elf_files" type="bool" descr="Check the prebuilt ELF files (e.g. DT_SONAME, DT_NEEDED, resolution of undefined symbols, etc), default true."/>
        <field name="clang" type="bool" descr="Deprecated. true is the default, false is invalid."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="double_loadable" type="bool" descr="whether this module is capable of being loaded with other instance (possibly an older version) of the same module in the same process. Currently, a shared library that is a member of VNDK (vndk: {enabled: true}) can be double loaded in a vendor process if the library is also a (direct and indirect) dependency of an LLNDK library. Such libraries must be explicitly marked as `double_loadable: true` by the owner, or the dependency from the LLNDK lib should be cut if the lib is not designed to be double loaded."/>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="export_generated_headers" type="blueprint[]" descr="list of generated headers to re-export include directories from. Entries must be present in generated_headers."/>
        <field name="export_header_lib_headers" type="blueprint[]" descr="list of header libraries to re-export include directories from. Entries must be present in header_libs."/>
        <field name="export_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the include path (using -I) for this module and any module that links against this module.  Directories listed in export_include_dirs do not need to be listed in local_include_dirs."/>
        <field name="export_shared_lib_headers" type="blueprint[]" descr="list of shared libraries to re-export include directories from. Entries must be present in shared_libs."/>
        <field name="export_static_lib_headers" type="blueprint[]" descr="list of static libraries to re-export include directories from. Entries must be present in static_libs."/>
        <field name="force_symbols_not_weak_list" type="string" descr="local file name to pass to the linker as -force_symbols_not_weak_list"/>
        <field name="force_symbols_weak_list" type="string" descr="local file name to pass to the linker as -force_symbols_weak_list"/>
        <field name="group_static_libs" type="bool" descr="group static libraries.  This can resolve missing symbols issues with interdependencies between static libraries, but it is generally better to order them correctly instead."/>
        <object-field name="header_abi_checker">
            <field name="symbol_file" type="string" descr="Path to a symbol file that specifies the symbols to be included in the generated ABI dump file"/>
            <field name="exclude_symbol_versions" type="string[]" descr="Symbol versions that should be ignored from the symbol file"/>
            <field name="exclude_symbol_tags" type="string[]" descr="Symbol tags that should be ignored from the symbol file"/>
        </object-field>
        <field name="header_libs" type="blueprint[]" descr="list of modules that should only provide headers for this module."/>
        <field name="host_ldlibs" type="string[]" descr="-l arguments to pass to linker for host-provided shared libraries"/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="ldflags" type="string[]" descr="list of module-specific flags that will be used for all link steps"/>
        <field name="logtags" type="string[]" descr="*.logtags files, to combine together in order to generate the /system/etc/event-log-tags file"/>
        <object-field name="lto">
            <field name="never" type="bool"/>
            <field name="full" type="bool"/>
            <field name="thin" type="bool"/>
        </object-field>
        <field name="native_coverage" type="bool"/>
        <field name="no_libcrt" type="bool" descr="don't link in libclang_rt.builtins-*.a"/>
        <field name="no_libgcc" type="bool" descr="don't link in libgcc.a"/>
        <field name="nocrt" type="bool" descr="don't link in crt_begin and crt_end.  This flag should only be necessary for compiling crt or libc."/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="overrides" type="blueprint[]" descr="Names of modules to be overridden. Listed modules can only be other shared libraries (in Make or Soong). This does not completely prevent installation of the overridden libraries, but if both binaries would be installed by default (in PRODUCT_PACKAGES) the other library will be removed from PRODUCT_PACKAGES."/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="pack_relocations" type="bool" descr="Generate compact dynamic relocation table, default true."/>
        <object-field name="pgo">
            <field name="instrumentation" type="bool"/>
            <field name="sampling" type="bool"/>
            <field name="profile_file" type="string"/>
            <field name="benchmarks" type="string[]"/>
            <field name="enable_profile_use" type="bool"/>
            <field name="cflags" type="string[]" descr="Additional compiler flags to use when building this module for profiling (either instrumentation or sampling)."/>
        </object-field>
        <field name="prefer" type="bool" descr="When prefer is set to true the prebuilt will be used instead of any source module with a matching name."/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <object-field name="proto">
            <field name="export_proto_headers" type="bool" descr="export headers generated from .proto sources"/>
        </object-field>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="recovery_available" type="bool" descr="Make this module available when building for recovery"/>
        <field name="reexportedIncludeFlags" type="string[]"/>
        <field name="relative_install_path" type="string" descr="install to a subdirectory of the default install path for the module"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="runtime_libs" type="blueprint[]" descr="list of modules that should be installed with this module.  This is similar to 'required' but '.vendor' suffix will be appended to the module names if the shared libraries have vendor variants and this module uses VNDK."/>
        <object-field name="sanitize">
            <field name="never" type="bool"/>
            <field name="address" type="bool" descr="main sanitizers"/>
            <field name="thread" type="bool"/>
            <field name="hwaddress" type="bool"/>
            <field name="undefined" type="bool" descr="local sanitizers"/>
            <field name="all_undefined" type="bool"/>
            <field name="misc_undefined" type="string[]"/>
            <field name="coverage" type="bool"/>
            <field name="safestack" type="bool"/>
            <field name="cfi" type="bool"/>
            <field name="integer_overflow" type="bool"/>
            <field name="scudo" type="bool"/>
            <field name="scs" type="bool"/>
            <object-field name="diag">
                <field name="undefined" type="bool"/>
                <field name="cfi" type="bool"/>
                <field name="integer_overflow" type="bool"/>
                <field name="misc_undefined" type="string[]"/>
                <field name="no_recover" type="string[]"/>
            </object-field>
            <field name="recover" type="string[]" descr="value to pass to -fsanitize-recover="/>
            <field name="blacklist" type="string" descr="value to pass to -fsanitize-blacklist"/>
        </object-field>
        <field name="sdclang" type="bool" descr="compile module with SDLLVM instead of AOSP LLVM"/>
        <field name="sdk_version" type="string" descr="Minimum sdk version supported when compiling against the ndk"/>
        <field name="shared" type="string[]"/>
        <field name="shared_libs" type="blueprint[]" descr="list of modules that should be dynamically linked into this module."/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="static" type="string[]"/>
        <field name="static_libs" type="blueprint[]" descr="list of modules that should be statically linked into this module."/>
        <field name="static_ndk_lib" type="bool"/>
        <field name="stem" type="string" descr="set the name of the output"/>
        <field name="stl" type="string" descr="Select the STL library to use.  Possible values are &quot;libc++&quot;, &quot;libc++_static&quot;, &quot;libstdc++&quot;, or &quot;none&quot;. Leave blank to select the default."/>
        <object-field name="strip">
            <field name="none" type="bool"/>
            <field name="all" type="bool"/>
            <field name="keep_symbols" type="bool"/>
            <field name="keep_symbols_list" type="string[]"/>
            <field name="use_gnu_strip" type="bool"/>
        </object-field>
        <object-field name="stubs">
            <field name="symbol_file" type="string" descr="Relative path to the symbol map. The symbol map provides the list of symbols that are exported for stubs variant of this library."/>
            <field name="versions" type="string[]" descr="List versions to generate stubs libs for."/>
        </object-field>
        <field name="symbol_ordering_file" type="string" descr="Local file name to pass to the linker as --symbol-ordering-file"/>
        <field name="system_shared_libs" type="blueprint[]" descr="list of system libraries that will be dynamically linked to shared library and executable modules.  If unset, generally defaults to libc, libm, and libdl.  Set to [] to prevent linking against the defaults."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
            <object-field name="recovery">
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the recovery variant of the C/C++ module."/>
            </object-field>
            <object-field name="vendor">
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_runtime_libs" type="blueprint[]" descr="list of runtime libs that should not be installed along with the vendor variant of the C/C++ module."/>
                <field name="version_script" type="string" descr="version script for this vendor variant"/>
                <field name="override_export_include_dirs" type="string[]" descr="list of exported include directories, like export_include_dirs, that will be applied to the vendor variant of this library. This will overwrite any other declarations."/>
            </object-field>
        </object-field>
        <field name="tidy" type="bool" descr="whether to run clang-tidy over C-like sources."/>
        <field name="tidy_checks" type="string[]" descr="Extra checks to enable or disable in clang-tidy"/>
        <field name="tidy_checks_as_errors" type="string[]" descr="Checks that should be treated as errors."/>
        <field name="tidy_flags" type="string[]" descr="Extra flags to pass to clang-tidy"/>
        <field name="unexported_symbols_list" type="string" descr="local file name to pass to the linker as -unexported_symbols_list"/>
        <field name="unique_host_soname" type="bool" descr="rename host libraries to prevent overlap with system installed libraries"/>
        <field name="use_clang_lld" type="bool" descr="Use clang lld instead of gnu ld."/>
        <field name="use_version_lib" type="bool" descr="make android::build:GetBuildNumber() available containing the build ID."/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vendor_available" type="bool" descr="whether this module should be allowed to be directly depended by other modules with `vendor: true`, `proprietary: true`, or `vendor_available:true`. If set to true, two variants will be built separately, one like normal, and the other limited to the set of libraries and headers that are exposed to /vendor modules. The vendor variant may be used with a different (newer) /system, so it shouldn't have any unversioned runtime dependencies, or make assumptions about the system that may not be true in the future. If set to false, this module becomes inaccessible from /vendor modules. Default value is true when vndk: {enabled: true} or vendor: true. Nothing happens if BOARD_VNDK_VERSION isn't set in the BoardConfig.mk"/>
        <field name="version_script" type="string" descr="local file name to pass to the linker as --version_script"/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
        <object-field name="vndk">
            <field name="enabled" type="bool" descr="declared as a VNDK or VNDK-SP module. The vendor variant will be installed in /system instead of /vendor partition. `vendor_vailable` must be explicitly set to either true or false together with `vndk: {enabled: true}`."/>
            <field name="support_system_process" type="bool" descr="declared as a VNDK-SP module, which is a subset of VNDK. `vndk: { enabled: true }` must set together. All these modules are allowed to link to VNDK-SP or LL-NDK modules only. Other dependency will cause link-type errors. If `support_system_process` is not set or set to false, the module is VNDK-core and can link to other VNDK-core, VNDK-SP or LL-NDK modules only."/>
            <field name="extends" type="string" descr="Extending another module"/>
        </object-field>
        <field name="whole_static_libs" type="blueprint[]" descr="list of modules whose object files should be linked into this module in their entirety.  For static library modules, all of the .o files from the intermediate directory of the dependency will be linked into this modules .a file.  For a shared library, the dependency's .a file will be linked into this module using -Wl,--whole-archive."/>
        <field name="xom" type="bool"/>
    </blueprint>
    <blueprint name="cc_test">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="list of source files used to compile the C/C++ module.  May be .c, .cpp, or .S files. srcs may reference the outputs of other modules that produce source files like genrule or filegroup using the syntax &quot;:module&quot;."/>
        <field name="host_supported" type="bool" descr="If set to true, build a variant of the module for the host.  Defaults to false."/>
        <field name="device_supported" type="bool" descr="If set to true, build a variant of the module for the device.  Defaults to true."/>
        <object-field name="aidl">
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the aidl include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the aidl include paths."/>
            <field name="generate_traces" type="bool" descr="whether to generate traces (for systrace) for this interface"/>
        </object-field>
        <field name="allow_undefined_symbols" type="bool" descr="allow the module to contain undefined symbols.  By default, modules cannot contain undefined symbols that are not satisified by their immediate dependencies.  Set this flag to true to remove --no-undefined from the linker flags. This flag should only be necessary for compiling low-level libraries like libc."/>
        <field name="asflags" type="string[]" descr="list of module-specific flags that will be used for .S compiles"/>
        <field name="bootstrap" type="bool" descr="Allows this module to use non-APEX version of libraries. Useful for building binaries that are started before APEXes are activated."/>
        <field name="c_std" type="string" descr="C standard version to use. Can be a specific version (such as &quot;gnu11&quot;), &quot;experimental&quot; (which will use draft versions like C1x when available), or the empty string (which will use the default)."/>
        <field name="cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles."/>
        <field name="clang" type="bool" descr="Deprecated. true is the default, false is invalid."/>
        <field name="clang_asflags" type="string[]" descr="list of module-specific flags that will be used for .S compiles when compiling with clang"/>
        <field name="clang_cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles when compiling with clang"/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="conlyflags" type="string[]" descr="list of module-specific flags that will be used for C compiles"/>
        <field name="cpp_std" type="string" descr="C++ standard version to use. Can be a specific version (such as &quot;gnu++11&quot;), &quot;experimental&quot; (which will use draft versions like C++1z when available), or the empty string (which will use the default)."/>
        <field name="cppflags" type="string[]" descr="list of module-specific flags that will be used for C++ compiles"/>
        <field name="data" type="string[]" descr="list of files or filegroup modules that provide data that should be installed alongside the test"/>
        <object-field name="debug" descr="release">
            <field name="cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles in debug or release builds"/>
        </object-field>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="double_loadable" type="bool" descr="whether this module is capable of being loaded with other instance (possibly an older version) of the same module in the same process. Currently, a shared library that is a member of VNDK (vndk: {enabled: true}) can be double loaded in a vendor process if the library is also a (direct and indirect) dependency of an LLNDK library. Such libraries must be explicitly marked as `double_loadable: true` by the owner, or the dependency from the LLNDK lib should be cut if the lib is not designed to be double loaded."/>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the C/C++ module. This is most useful in the arch/multilib variants to remove non-common files"/>
        <field name="export_generated_headers" type="blueprint[]" descr="list of generated headers to re-export include directories from. Entries must be present in generated_headers."/>
        <field name="export_header_lib_headers" type="blueprint[]" descr="list of header libraries to re-export include directories from. Entries must be present in header_libs."/>
        <field name="export_shared_lib_headers" type="blueprint[]" descr="list of shared libraries to re-export include directories from. Entries must be present in shared_libs."/>
        <field name="export_static_lib_headers" type="blueprint[]" descr="list of static libraries to re-export include directories from. Entries must be present in static_libs."/>
        <field name="generated_headers" type="blueprint[]" descr="list of generated headers to add to the include path. These are the names of genrule modules."/>
        <field name="generated_sources" type="blueprint[]" descr="list of generated sources to compile. These are the names of gensrcs or genrule modules."/>
        <field name="gnu_extensions" type="bool" descr="if set to false, use -std=c++* instead of -std=gnu++*"/>
        <field name="group_static_libs" type="bool" descr="group static libraries.  This can resolve missing symbols issues with interdependencies between static libraries, but it is generally better to order them correctly instead."/>
        <field name="gtest" type="bool" descr="if set, build against the gtest library. Defaults to true."/>
        <field name="header_libs" type="blueprint[]" descr="list of modules that should only provide headers for this module."/>
        <field name="host_ldlibs" type="string[]" descr="-l arguments to pass to linker for host-provided shared libraries"/>
        <field name="include_build_directory" type="bool" descr="Add the directory containing the Android.bp file to the list of include directories. Defaults to true."/>
        <field name="include_dirs" type="string[]" descr="list of directories relative to the root of the source tree that will be added to the include path using -I. If possible, don't use this.  If adding paths from the current directory use local_include_dirs, if adding paths from other modules use export_include_dirs in that module."/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="instruction_set" type="string" descr="the instruction set architecture to use to compile the C/C++ module."/>
        <field name="isolated" type="bool" descr="if set, use the isolated gtest runner. Defaults to false."/>
        <field name="ldflags" type="string[]" descr="list of module-specific flags that will be used for all link steps"/>
        <field name="local_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the include path using -I"/>
        <field name="logtags" type="string[]" descr="*.logtags files, to combine together in order to generate the /system/etc/event-log-tags file"/>
        <object-field name="lto">
            <field name="never" type="bool"/>
            <field name="full" type="bool"/>
            <field name="thin" type="bool"/>
        </object-field>
        <field name="native_coverage" type="bool"/>
        <field name="no_libcrt" type="bool" descr="don't link in libclang_rt.builtins-*.a"/>
        <field name="no_libgcc" type="bool" descr="don't link in libgcc.a"/>
        <field name="no_named_install_directory" type="bool" descr="Disables the creation of a test-specific directory when used with relative_install_path. Useful if several tests need to be in the same directory, but test_per_src doesn't work."/>
        <field name="nocrt" type="bool" descr="don't link in crt_begin and crt_end.  This flag should only be necessary for compiling crt or libc."/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="openmp" type="bool" descr="Build and link with OpenMP"/>
        <field name="overrides" type="blueprint[]" descr="Names of modules to be overridden. Listed modules can only be other binaries (in Make or Soong). This does not completely prevent installation of the overridden binaries, but if both binaries would be installed by default (in PRODUCT_PACKAGES) the other binary will be removed from PRODUCT_PACKAGES."/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="pack_relocations" type="bool" descr="Generate compact dynamic relocation table, default true."/>
        <object-field name="pgo">
            <field name="instrumentation" type="bool"/>
            <field name="sampling" type="bool"/>
            <field name="profile_file" type="string"/>
            <field name="benchmarks" type="string[]"/>
            <field name="enable_profile_use" type="bool"/>
            <field name="cflags" type="string[]" descr="Additional compiler flags to use when building this module for profiling (either instrumentation or sampling)."/>
        </object-field>
        <field name="prefix_symbols" type="string" descr="if set, add an extra objcopy --prefix-symbols= step"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <object-field name="proto">
            <field name="static" type="bool" descr="Link statically against the protobuf runtime"/>
            <field name="type" type="string" descr="Proto generator type.  C++: full or lite.  Java: micro, nano, stream, or lite."/>
            <field name="plugin" type="string" descr="Proto plugin to use as the generator.  Must be a cc_binary_host module."/>
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the protoc include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the bp file that will be added to the protoc include paths."/>
            <field name="canonical_path_from_root" type="bool" descr="whether to identify the proto files from the root of the source tree (the original method in Android, useful for android-specific protos), or relative from where they were specified (useful for external/third party protos). This defaults to true today, but is expected to default to false in the future."/>
        </object-field>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="recovery_available" type="bool" descr="Make this module available when building for recovery"/>
        <field name="reexportedIncludeFlags" type="string[]"/>
        <field name="relative_install_path" type="string" descr="install to a subdirectory of the default install path for the module"/>
        <object-field name="renderscript">
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the llvm-rs-cc include paths"/>
            <field name="flags" type="string[]" descr="list of flags that will be passed to llvm-rs-cc"/>
            <field name="target_api" type="string" descr="Renderscript API level to target"/>
        </object-field>
        <field name="require_root" type="bool" descr="Add RootTargetPreparer to auto generated test config. This guarantees the test to run with root permission."/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="rtti" type="bool" descr="pass -frtti instead of -fno-rtti"/>
        <field name="runtime_libs" type="blueprint[]" descr="list of modules that should be installed with this module.  This is similar to 'required' but '.vendor' suffix will be appended to the module names if the shared libraries have vendor variants and this module uses VNDK."/>
        <object-field name="sanitize">
            <field name="never" type="bool"/>
            <field name="address" type="bool" descr="main sanitizers"/>
            <field name="thread" type="bool"/>
            <field name="hwaddress" type="bool"/>
            <field name="undefined" type="bool" descr="local sanitizers"/>
            <field name="all_undefined" type="bool"/>
            <field name="misc_undefined" type="string[]"/>
            <field name="coverage" type="bool"/>
            <field name="safestack" type="bool"/>
            <field name="cfi" type="bool"/>
            <field name="integer_overflow" type="bool"/>
            <field name="scudo" type="bool"/>
            <field name="scs" type="bool"/>
            <object-field name="diag">
                <field name="undefined" type="bool"/>
                <field name="cfi" type="bool"/>
                <field name="integer_overflow" type="bool"/>
                <field name="misc_undefined" type="string[]"/>
                <field name="no_recover" type="string[]"/>
            </object-field>
            <field name="recover" type="string[]" descr="value to pass to -fsanitize-recover="/>
            <field name="blacklist" type="string" descr="value to pass to -fsanitize-blacklist"/>
        </object-field>
        <field name="sdclang" type="bool" descr="compile module with SDLLVM instead of AOSP LLVM"/>
        <field name="sdk_version" type="string" descr="Minimum sdk version supported when compiling against the ndk"/>
        <field name="shared_libs" type="blueprint[]" descr="list of modules that should be dynamically linked into this module."/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="static_executable" type="bool" descr="compile executable with -static"/>
        <field name="static_libs" type="blueprint[]" descr="list of modules that should be statically linked into this module."/>
        <field name="stem" type="string" descr="set the name of the output"/>
        <field name="stl" type="string" descr="Select the STL library to use.  Possible values are &quot;libc++&quot;, &quot;libc++_static&quot;, &quot;libstdc++&quot;, or &quot;none&quot;. Leave blank to select the default."/>
        <object-field name="strip">
            <field name="none" type="bool"/>
            <field name="all" type="bool"/>
            <field name="keep_symbols" type="bool"/>
            <field name="keep_symbols_list" type="string[]"/>
            <field name="use_gnu_strip" type="bool"/>
        </object-field>
        <field name="suffix" type="string" descr="append to the name of the output"/>
        <field name="symbol_ordering_file" type="string" descr="Local file name to pass to the linker as --symbol-ordering-file"/>
        <field name="symlink_preferred_arch" type="bool" descr="if set, install a symlink to the preferred architecture"/>
        <field name="symlinks" type="string[]" descr="install symlinks to the binary.  Symlink names will have the suffix and the binary extension (if any) appended"/>
        <field name="system_shared_libs" type="blueprint[]" descr="list of system libraries that will be dynamically linked to shared library and executable modules.  If unset, generally defaults to libc, libm, and libdl.  Set to [] to prevent linking against the defaults."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
            <object-field name="recovery">
                <field name="srcs" type="string[]" descr="list of source files that should only be used in the recovery variant of the C/C++ module."/>
                <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="cflags" type="string[]" descr="List of additional cflags that should be used to build the recovery variant of the C/C++ module."/>
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the recovery variant of the C/C++ module."/>
            </object-field>
            <object-field name="vendor">
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_runtime_libs" type="blueprint[]" descr="list of runtime libs that should not be installed along with the vendor variant of the C/C++ module."/>
                <field name="version_script" type="string" descr="version script for this vendor variant"/>
                <field name="srcs" type="string[]" descr="list of source files that should only be used in the vendor variant of the C/C++ module."/>
                <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="cflags" type="string[]" descr="List of additional cflags that should be used to build the vendor variant of the C/C++ module."/>
            </object-field>
        </object-field>
        <field name="test_config" type="string" descr="the name of the test configuration (for example &quot;AndroidTest.xml&quot;) that should be installed with the module."/>
        <field name="test_config_template" type="string" descr="the name of the test configuration template (for example &quot;AndroidTestTemplate.xml&quot;) that should be installed with the module."/>
        <field name="test_options" type="string[]" descr="Test options."/>
        <field name="test_per_src" type="bool" descr="Create a separate binary for each source file.  Useful when there is global state that can not be torn down and reset between each test suite."/>
        <field name="test_suites" type="string[]" descr="list of compatibility suites (for example &quot;cts&quot;, &quot;vts&quot;) that the module should be installed into."/>
        <field name="tidy" type="bool" descr="whether to run clang-tidy over C-like sources."/>
        <field name="tidy_checks" type="string[]" descr="Extra checks to enable or disable in clang-tidy"/>
        <field name="tidy_checks_as_errors" type="string[]" descr="Checks that should be treated as errors."/>
        <field name="tidy_flags" type="string[]" descr="Extra flags to pass to clang-tidy"/>
        <field name="use_clang_lld" type="bool" descr="Use clang lld instead of gnu ld."/>
        <field name="use_version_lib" type="bool" descr="make android::build:GetBuildNumber() available containing the build ID."/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vendor_available" type="bool" descr="whether this module should be allowed to be directly depended by other modules with `vendor: true`, `proprietary: true`, or `vendor_available:true`. If set to true, two variants will be built separately, one like normal, and the other limited to the set of libraries and headers that are exposed to /vendor modules. The vendor variant may be used with a different (newer) /system, so it shouldn't have any unversioned runtime dependencies, or make assumptions about the system that may not be true in the future. If set to false, this module becomes inaccessible from /vendor modules. Default value is true when vndk: {enabled: true} or vendor: true. Nothing happens if BOARD_VNDK_VERSION isn't set in the BoardConfig.mk"/>
        <field name="version_script" type="string" descr="local file name to pass to the linker as --version_script"/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
        <object-field name="vndk">
            <field name="enabled" type="bool" descr="declared as a VNDK or VNDK-SP module. The vendor variant will be installed in /system instead of /vendor partition. `vendor_vailable` must be explicitly set to either true or false together with `vndk: {enabled: true}`."/>
            <field name="support_system_process" type="bool" descr="declared as a VNDK-SP module, which is a subset of VNDK. `vndk: { enabled: true }` must set together. All these modules are allowed to link to VNDK-SP or LL-NDK modules only. Other dependency will cause link-type errors. If `support_system_process` is not set or set to false, the module is VNDK-core and can link to other VNDK-core, VNDK-SP or LL-NDK modules only."/>
            <field name="extends" type="string" descr="Extending another module"/>
        </object-field>
        <field name="whole_static_libs" type="blueprint[]" descr="list of modules whose object files should be linked into this module in their entirety.  For static library modules, all of the .o files from the intermediate directory of the dependency will be linked into this modules .a file.  For a shared library, the dependency's .a file will be linked into this module using -Wl,--whole-archive."/>
        <field name="xom" type="bool"/>
        <field name="yaccflags" type="string[]" descr="list of module-specific flags that will be used for .y and .yy compiles"/>
    </blueprint>
    <blueprint name="cc_test_host">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="list of source files used to compile the C/C++ module.  May be .c, .cpp, or .S files. srcs may reference the outputs of other modules that produce source files like genrule or filegroup using the syntax &quot;:module&quot;."/>
        <object-field name="aidl">
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the aidl include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the aidl include paths."/>
            <field name="generate_traces" type="bool" descr="whether to generate traces (for systrace) for this interface"/>
        </object-field>
        <field name="allow_undefined_symbols" type="bool" descr="allow the module to contain undefined symbols.  By default, modules cannot contain undefined symbols that are not satisified by their immediate dependencies.  Set this flag to true to remove --no-undefined from the linker flags. This flag should only be necessary for compiling low-level libraries like libc."/>
        <field name="asflags" type="string[]" descr="list of module-specific flags that will be used for .S compiles"/>
        <field name="bootstrap" type="bool" descr="Allows this module to use non-APEX version of libraries. Useful for building binaries that are started before APEXes are activated."/>
        <field name="c_std" type="string" descr="C standard version to use. Can be a specific version (such as &quot;gnu11&quot;), &quot;experimental&quot; (which will use draft versions like C1x when available), or the empty string (which will use the default)."/>
        <field name="cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles."/>
        <field name="clang" type="bool" descr="Deprecated. true is the default, false is invalid."/>
        <field name="clang_asflags" type="string[]" descr="list of module-specific flags that will be used for .S compiles when compiling with clang"/>
        <field name="clang_cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles when compiling with clang"/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="conlyflags" type="string[]" descr="list of module-specific flags that will be used for C compiles"/>
        <field name="cpp_std" type="string" descr="C++ standard version to use. Can be a specific version (such as &quot;gnu++11&quot;), &quot;experimental&quot; (which will use draft versions like C++1z when available), or the empty string (which will use the default)."/>
        <field name="cppflags" type="string[]" descr="list of module-specific flags that will be used for C++ compiles"/>
        <field name="data" type="string[]" descr="list of files or filegroup modules that provide data that should be installed alongside the test"/>
        <object-field name="debug" descr="release">
            <field name="cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles in debug or release builds"/>
        </object-field>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="double_loadable" type="bool" descr="whether this module is capable of being loaded with other instance (possibly an older version) of the same module in the same process. Currently, a shared library that is a member of VNDK (vndk: {enabled: true}) can be double loaded in a vendor process if the library is also a (direct and indirect) dependency of an LLNDK library. Such libraries must be explicitly marked as `double_loadable: true` by the owner, or the dependency from the LLNDK lib should be cut if the lib is not designed to be double loaded."/>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the C/C++ module. This is most useful in the arch/multilib variants to remove non-common files"/>
        <field name="export_generated_headers" type="blueprint[]" descr="list of generated headers to re-export include directories from. Entries must be present in generated_headers."/>
        <field name="export_header_lib_headers" type="blueprint[]" descr="list of header libraries to re-export include directories from. Entries must be present in header_libs."/>
        <field name="export_shared_lib_headers" type="blueprint[]" descr="list of shared libraries to re-export include directories from. Entries must be present in shared_libs."/>
        <field name="export_static_lib_headers" type="blueprint[]" descr="list of static libraries to re-export include directories from. Entries must be present in static_libs."/>
        <field name="generated_headers" type="blueprint[]" descr="list of generated headers to add to the include path. These are the names of genrule modules."/>
        <field name="generated_sources" type="blueprint[]" descr="list of generated sources to compile. These are the names of gensrcs or genrule modules."/>
        <field name="gnu_extensions" type="bool" descr="if set to false, use -std=c++* instead of -std=gnu++*"/>
        <field name="group_static_libs" type="bool" descr="group static libraries.  This can resolve missing symbols issues with interdependencies between static libraries, but it is generally better to order them correctly instead."/>
        <field name="gtest" type="bool" descr="if set, build against the gtest library. Defaults to true."/>
        <field name="header_libs" type="blueprint[]" descr="list of modules that should only provide headers for this module."/>
        <field name="host_ldlibs" type="string[]" descr="-l arguments to pass to linker for host-provided shared libraries"/>
        <field name="include_build_directory" type="bool" descr="Add the directory containing the Android.bp file to the list of include directories. Defaults to true."/>
        <field name="include_dirs" type="string[]" descr="list of directories relative to the root of the source tree that will be added to the include path using -I. If possible, don't use this.  If adding paths from the current directory use local_include_dirs, if adding paths from other modules use export_include_dirs in that module."/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="instruction_set" type="string" descr="the instruction set architecture to use to compile the C/C++ module."/>
        <field name="isolated" type="bool" descr="if set, use the isolated gtest runner. Defaults to false."/>
        <field name="ldflags" type="string[]" descr="list of module-specific flags that will be used for all link steps"/>
        <field name="local_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the include path using -I"/>
        <field name="logtags" type="string[]" descr="*.logtags files, to combine together in order to generate the /system/etc/event-log-tags file"/>
        <object-field name="lto">
            <field name="never" type="bool"/>
            <field name="full" type="bool"/>
            <field name="thin" type="bool"/>
        </object-field>
        <field name="native_coverage" type="bool"/>
        <field name="no_libcrt" type="bool" descr="don't link in libclang_rt.builtins-*.a"/>
        <field name="no_libgcc" type="bool" descr="don't link in libgcc.a"/>
        <field name="no_named_install_directory" type="bool" descr="Disables the creation of a test-specific directory when used with relative_install_path. Useful if several tests need to be in the same directory, but test_per_src doesn't work."/>
        <field name="nocrt" type="bool" descr="don't link in crt_begin and crt_end.  This flag should only be necessary for compiling crt or libc."/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="openmp" type="bool" descr="Build and link with OpenMP"/>
        <field name="overrides" type="blueprint[]" descr="Names of modules to be overridden. Listed modules can only be other binaries (in Make or Soong). This does not completely prevent installation of the overridden binaries, but if both binaries would be installed by default (in PRODUCT_PACKAGES) the other binary will be removed from PRODUCT_PACKAGES."/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="pack_relocations" type="bool" descr="Generate compact dynamic relocation table, default true."/>
        <object-field name="pgo">
            <field name="instrumentation" type="bool"/>
            <field name="sampling" type="bool"/>
            <field name="profile_file" type="string"/>
            <field name="benchmarks" type="string[]"/>
            <field name="enable_profile_use" type="bool"/>
            <field name="cflags" type="string[]" descr="Additional compiler flags to use when building this module for profiling (either instrumentation or sampling)."/>
        </object-field>
        <field name="prefix_symbols" type="string" descr="if set, add an extra objcopy --prefix-symbols= step"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <object-field name="proto">
            <field name="type" type="string" descr="Proto generator type.  C++: full or lite.  Java: micro, nano, stream, or lite."/>
            <field name="plugin" type="string" descr="Proto plugin to use as the generator.  Must be a cc_binary_host module."/>
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the protoc include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the bp file that will be added to the protoc include paths."/>
            <field name="canonical_path_from_root" type="bool" descr="whether to identify the proto files from the root of the source tree (the original method in Android, useful for android-specific protos), or relative from where they were specified (useful for external/third party protos). This defaults to true today, but is expected to default to false in the future."/>
            <field name="static" type="bool" descr="Link statically against the protobuf runtime"/>
        </object-field>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="recovery_available" type="bool" descr="Make this module available when building for recovery"/>
        <field name="reexportedIncludeFlags" type="string[]"/>
        <field name="relative_install_path" type="string" descr="install to a subdirectory of the default install path for the module"/>
        <object-field name="renderscript">
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the llvm-rs-cc include paths"/>
            <field name="flags" type="string[]" descr="list of flags that will be passed to llvm-rs-cc"/>
            <field name="target_api" type="string" descr="Renderscript API level to target"/>
        </object-field>
        <field name="require_root" type="bool" descr="Add RootTargetPreparer to auto generated test config. This guarantees the test to run with root permission."/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="rtti" type="bool" descr="pass -frtti instead of -fno-rtti"/>
        <field name="runtime_libs" type="blueprint[]" descr="list of modules that should be installed with this module.  This is similar to 'required' but '.vendor' suffix will be appended to the module names if the shared libraries have vendor variants and this module uses VNDK."/>
        <object-field name="sanitize">
            <field name="never" type="bool"/>
            <field name="address" type="bool" descr="main sanitizers"/>
            <field name="thread" type="bool"/>
            <field name="hwaddress" type="bool"/>
            <field name="undefined" type="bool" descr="local sanitizers"/>
            <field name="all_undefined" type="bool"/>
            <field name="misc_undefined" type="string[]"/>
            <field name="coverage" type="bool"/>
            <field name="safestack" type="bool"/>
            <field name="cfi" type="bool"/>
            <field name="integer_overflow" type="bool"/>
            <field name="scudo" type="bool"/>
            <field name="scs" type="bool"/>
            <object-field name="diag">
                <field name="undefined" type="bool"/>
                <field name="cfi" type="bool"/>
                <field name="integer_overflow" type="bool"/>
                <field name="misc_undefined" type="string[]"/>
                <field name="no_recover" type="string[]"/>
            </object-field>
            <field name="recover" type="string[]" descr="value to pass to -fsanitize-recover="/>
            <field name="blacklist" type="string" descr="value to pass to -fsanitize-blacklist"/>
        </object-field>
        <field name="sdclang" type="bool" descr="compile module with SDLLVM instead of AOSP LLVM"/>
        <field name="sdk_version" type="string" descr="Minimum sdk version supported when compiling against the ndk"/>
        <field name="shared_libs" type="blueprint[]" descr="list of modules that should be dynamically linked into this module."/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="static_executable" type="bool" descr="compile executable with -static"/>
        <field name="static_libs" type="blueprint[]" descr="list of modules that should be statically linked into this module."/>
        <field name="stem" type="string" descr="set the name of the output"/>
        <field name="stl" type="string" descr="Select the STL library to use.  Possible values are &quot;libc++&quot;, &quot;libc++_static&quot;, &quot;libstdc++&quot;, or &quot;none&quot;. Leave blank to select the default."/>
        <object-field name="strip">
            <field name="none" type="bool"/>
            <field name="all" type="bool"/>
            <field name="keep_symbols" type="bool"/>
            <field name="keep_symbols_list" type="string[]"/>
            <field name="use_gnu_strip" type="bool"/>
        </object-field>
        <field name="suffix" type="string" descr="append to the name of the output"/>
        <field name="symbol_ordering_file" type="string" descr="Local file name to pass to the linker as --symbol-ordering-file"/>
        <field name="symlink_preferred_arch" type="bool" descr="if set, install a symlink to the preferred architecture"/>
        <field name="symlinks" type="string[]" descr="install symlinks to the binary.  Symlink names will have the suffix and the binary extension (if any) appended"/>
        <field name="system_shared_libs" type="blueprint[]" descr="list of system libraries that will be dynamically linked to shared library and executable modules.  If unset, generally defaults to libc, libm, and libdl.  Set to [] to prevent linking against the defaults."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
            <object-field name="recovery">
                <field name="srcs" type="string[]" descr="list of source files that should only be used in the recovery variant of the C/C++ module."/>
                <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="cflags" type="string[]" descr="List of additional cflags that should be used to build the recovery variant of the C/C++ module."/>
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the recovery variant of the C/C++ module."/>
            </object-field>
            <object-field name="vendor">
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_runtime_libs" type="blueprint[]" descr="list of runtime libs that should not be installed along with the vendor variant of the C/C++ module."/>
                <field name="version_script" type="string" descr="version script for this vendor variant"/>
                <field name="srcs" type="string[]" descr="list of source files that should only be used in the vendor variant of the C/C++ module."/>
                <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="cflags" type="string[]" descr="List of additional cflags that should be used to build the vendor variant of the C/C++ module."/>
            </object-field>
        </object-field>
        <field name="test_config" type="string" descr="the name of the test configuration (for example &quot;AndroidTest.xml&quot;) that should be installed with the module."/>
        <field name="test_config_template" type="string" descr="the name of the test configuration template (for example &quot;AndroidTestTemplate.xml&quot;) that should be installed with the module."/>
        <field name="test_options" type="string[]" descr="Test options."/>
        <field name="test_per_src" type="bool" descr="Create a separate binary for each source file.  Useful when there is global state that can not be torn down and reset between each test suite."/>
        <field name="test_suites" type="string[]" descr="list of compatibility suites (for example &quot;cts&quot;, &quot;vts&quot;) that the module should be installed into."/>
        <field name="tidy" type="bool" descr="whether to run clang-tidy over C-like sources."/>
        <field name="tidy_checks" type="string[]" descr="Extra checks to enable or disable in clang-tidy"/>
        <field name="tidy_checks_as_errors" type="string[]" descr="Checks that should be treated as errors."/>
        <field name="tidy_flags" type="string[]" descr="Extra flags to pass to clang-tidy"/>
        <field name="use_clang_lld" type="bool" descr="Use clang lld instead of gnu ld."/>
        <field name="use_version_lib" type="bool" descr="make android::build:GetBuildNumber() available containing the build ID."/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vendor_available" type="bool" descr="whether this module should be allowed to be directly depended by other modules with `vendor: true`, `proprietary: true`, or `vendor_available:true`. If set to true, two variants will be built separately, one like normal, and the other limited to the set of libraries and headers that are exposed to /vendor modules. The vendor variant may be used with a different (newer) /system, so it shouldn't have any unversioned runtime dependencies, or make assumptions about the system that may not be true in the future. If set to false, this module becomes inaccessible from /vendor modules. Default value is true when vndk: {enabled: true} or vendor: true. Nothing happens if BOARD_VNDK_VERSION isn't set in the BoardConfig.mk"/>
        <field name="version_script" type="string" descr="local file name to pass to the linker as --version_script"/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
        <object-field name="vndk">
            <field name="enabled" type="bool" descr="declared as a VNDK or VNDK-SP module. The vendor variant will be installed in /system instead of /vendor partition. `vendor_vailable` must be explicitly set to either true or false together with `vndk: {enabled: true}`."/>
            <field name="support_system_process" type="bool" descr="declared as a VNDK-SP module, which is a subset of VNDK. `vndk: { enabled: true }` must set together. All these modules are allowed to link to VNDK-SP or LL-NDK modules only. Other dependency will cause link-type errors. If `support_system_process` is not set or set to false, the module is VNDK-core and can link to other VNDK-core, VNDK-SP or LL-NDK modules only."/>
            <field name="extends" type="string" descr="Extending another module"/>
        </object-field>
        <field name="whole_static_libs" type="blueprint[]" descr="list of modules whose object files should be linked into this module in their entirety.  For static library modules, all of the .o files from the intermediate directory of the dependency will be linked into this modules .a file.  For a shared library, the dependency's .a file will be linked into this module using -Wl,--whole-archive."/>
        <field name="xom" type="bool"/>
        <field name="yaccflags" type="string[]" descr="list of module-specific flags that will be used for .y and .yy compiles"/>
    </blueprint>
    <blueprint name="cc_test_library">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="list of source files used to compile the C/C++ module.  May be .c, .cpp, or .S files. srcs may reference the outputs of other modules that produce source files like genrule or filegroup using the syntax &quot;:module&quot;."/>
        <field name="host_supported" type="bool" descr="If set to true, build a variant of the module for the host.  Defaults to false."/>
        <field name="device_supported" type="bool" descr="If set to true, build a variant of the module for the device.  Defaults to true."/>
        <object-field name="aidl">
            <field name="export_aidl_headers" type="bool" descr="export headers generated from .aidl sources"/>
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the aidl include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the aidl include paths."/>
            <field name="generate_traces" type="bool" descr="whether to generate traces (for systrace) for this interface"/>
        </object-field>
        <field name="allow_undefined_symbols" type="bool" descr="allow the module to contain undefined symbols.  By default, modules cannot contain undefined symbols that are not satisified by their immediate dependencies.  Set this flag to true to remove --no-undefined from the linker flags. This flag should only be necessary for compiling low-level libraries like libc."/>
        <field name="asflags" type="string[]" descr="list of module-specific flags that will be used for .S compiles"/>
        <field name="bootstrap" type="bool" descr="Allows this module to use non-APEX version of libraries. Useful for building binaries that are started before APEXes are activated."/>
        <field name="c_std" type="string" descr="C standard version to use. Can be a specific version (such as &quot;gnu11&quot;), &quot;experimental&quot; (which will use draft versions like C1x when available), or the empty string (which will use the default)."/>
        <field name="cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles."/>
        <field name="clang" type="bool" descr="Deprecated. true is the default, false is invalid."/>
        <field name="clang_asflags" type="string[]" descr="list of module-specific flags that will be used for .S compiles when compiling with clang"/>
        <field name="clang_cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles when compiling with clang"/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="conlyflags" type="string[]" descr="list of module-specific flags that will be used for C compiles"/>
        <field name="cpp_std" type="string" descr="C++ standard version to use. Can be a specific version (such as &quot;gnu++11&quot;), &quot;experimental&quot; (which will use draft versions like C++1z when available), or the empty string (which will use the default)."/>
        <field name="cppflags" type="string[]" descr="list of module-specific flags that will be used for C++ compiles"/>
        <object-field name="debug" descr="release">
            <field name="cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles in debug or release builds"/>
        </object-field>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="double_loadable" type="bool" descr="whether this module is capable of being loaded with other instance (possibly an older version) of the same module in the same process. Currently, a shared library that is a member of VNDK (vndk: {enabled: true}) can be double loaded in a vendor process if the library is also a (direct and indirect) dependency of an LLNDK library. Such libraries must be explicitly marked as `double_loadable: true` by the owner, or the dependency from the LLNDK lib should be cut if the lib is not designed to be double loaded."/>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the C/C++ module. This is most useful in the arch/multilib variants to remove non-common files"/>
        <field name="export_generated_headers" type="blueprint[]" descr="list of generated headers to re-export include directories from. Entries must be present in generated_headers."/>
        <field name="export_header_lib_headers" type="blueprint[]" descr="list of header libraries to re-export include directories from. Entries must be present in header_libs."/>
        <field name="export_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the include path (using -I) for this module and any module that links against this module.  Directories listed in export_include_dirs do not need to be listed in local_include_dirs."/>
        <field name="export_shared_lib_headers" type="blueprint[]" descr="list of shared libraries to re-export include directories from. Entries must be present in shared_libs."/>
        <field name="export_static_lib_headers" type="blueprint[]" descr="list of static libraries to re-export include directories from. Entries must be present in static_libs."/>
        <field name="force_symbols_not_weak_list" type="string" descr="local file name to pass to the linker as -force_symbols_not_weak_list"/>
        <field name="force_symbols_weak_list" type="string" descr="local file name to pass to the linker as -force_symbols_weak_list"/>
        <field name="generated_headers" type="blueprint[]" descr="list of generated headers to add to the include path. These are the names of genrule modules."/>
        <field name="generated_sources" type="blueprint[]" descr="list of generated sources to compile. These are the names of gensrcs or genrule modules."/>
        <field name="gnu_extensions" type="bool" descr="if set to false, use -std=c++* instead of -std=gnu++*"/>
        <field name="group_static_libs" type="bool" descr="group static libraries.  This can resolve missing symbols issues with interdependencies between static libraries, but it is generally better to order them correctly instead."/>
        <field name="gtest" type="bool" descr="if set, build against the gtest library. Defaults to true."/>
        <object-field name="header_abi_checker">
            <field name="symbol_file" type="string" descr="Path to a symbol file that specifies the symbols to be included in the generated ABI dump file"/>
            <field name="exclude_symbol_versions" type="string[]" descr="Symbol versions that should be ignored from the symbol file"/>
            <field name="exclude_symbol_tags" type="string[]" descr="Symbol tags that should be ignored from the symbol file"/>
        </object-field>
        <field name="header_libs" type="blueprint[]" descr="list of modules that should only provide headers for this module."/>
        <field name="host_ldlibs" type="string[]" descr="-l arguments to pass to linker for host-provided shared libraries"/>
        <field name="include_build_directory" type="bool" descr="Add the directory containing the Android.bp file to the list of include directories. Defaults to true."/>
        <field name="include_dirs" type="string[]" descr="list of directories relative to the root of the source tree that will be added to the include path using -I. If possible, don't use this.  If adding paths from the current directory use local_include_dirs, if adding paths from other modules use export_include_dirs in that module."/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="instruction_set" type="string" descr="the instruction set architecture to use to compile the C/C++ module."/>
        <field name="isolated" type="bool" descr="if set, use the isolated gtest runner. Defaults to false."/>
        <field name="ldflags" type="string[]" descr="list of module-specific flags that will be used for all link steps"/>
        <field name="local_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the include path using -I"/>
        <field name="logtags" type="string[]" descr="*.logtags files, to combine together in order to generate the /system/etc/event-log-tags file"/>
        <object-field name="lto">
            <field name="never" type="bool"/>
            <field name="full" type="bool"/>
            <field name="thin" type="bool"/>
        </object-field>
        <field name="native_coverage" type="bool"/>
        <field name="no_libcrt" type="bool" descr="don't link in libclang_rt.builtins-*.a"/>
        <field name="no_libgcc" type="bool" descr="don't link in libgcc.a"/>
        <field name="nocrt" type="bool" descr="don't link in crt_begin and crt_end.  This flag should only be necessary for compiling crt or libc."/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="openmp" type="bool" descr="Build and link with OpenMP"/>
        <field name="overrides" type="blueprint[]" descr="Names of modules to be overridden. Listed modules can only be other shared libraries (in Make or Soong). This does not completely prevent installation of the overridden libraries, but if both binaries would be installed by default (in PRODUCT_PACKAGES) the other library will be removed from PRODUCT_PACKAGES."/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="pack_relocations" type="bool" descr="Generate compact dynamic relocation table, default true."/>
        <object-field name="pgo">
            <field name="instrumentation" type="bool"/>
            <field name="sampling" type="bool"/>
            <field name="profile_file" type="string"/>
            <field name="benchmarks" type="string[]"/>
            <field name="enable_profile_use" type="bool"/>
            <field name="cflags" type="string[]" descr="Additional compiler flags to use when building this module for profiling (either instrumentation or sampling)."/>
        </object-field>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <object-field name="proto">
            <field name="type" type="string" descr="Proto generator type.  C++: full or lite.  Java: micro, nano, stream, or lite."/>
            <field name="plugin" type="string" descr="Proto plugin to use as the generator.  Must be a cc_binary_host module."/>
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the protoc include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the bp file that will be added to the protoc include paths."/>
            <field name="canonical_path_from_root" type="bool" descr="whether to identify the proto files from the root of the source tree (the original method in Android, useful for android-specific protos), or relative from where they were specified (useful for external/third party protos). This defaults to true today, but is expected to default to false in the future."/>
            <field name="export_proto_headers" type="bool" descr="export headers generated from .proto sources"/>
            <field name="static" type="bool" descr="Link statically against the protobuf runtime"/>
        </object-field>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="recovery_available" type="bool" descr="Make this module available when building for recovery"/>
        <field name="reexportedIncludeFlags" type="string[]"/>
        <field name="relative_install_path" type="string" descr="install to a subdirectory of the default install path for the module"/>
        <object-field name="renderscript">
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the llvm-rs-cc include paths"/>
            <field name="flags" type="string[]" descr="list of flags that will be passed to llvm-rs-cc"/>
            <field name="target_api" type="string" descr="Renderscript API level to target"/>
        </object-field>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="rtti" type="bool" descr="pass -frtti instead of -fno-rtti"/>
        <field name="runtime_libs" type="blueprint[]" descr="list of modules that should be installed with this module.  This is similar to 'required' but '.vendor' suffix will be appended to the module names if the shared libraries have vendor variants and this module uses VNDK."/>
        <object-field name="sanitize">
            <field name="never" type="bool"/>
            <field name="address" type="bool" descr="main sanitizers"/>
            <field name="thread" type="bool"/>
            <field name="hwaddress" type="bool"/>
            <field name="undefined" type="bool" descr="local sanitizers"/>
            <field name="all_undefined" type="bool"/>
            <field name="misc_undefined" type="string[]"/>
            <field name="coverage" type="bool"/>
            <field name="safestack" type="bool"/>
            <field name="cfi" type="bool"/>
            <field name="integer_overflow" type="bool"/>
            <field name="scudo" type="bool"/>
            <field name="scs" type="bool"/>
            <object-field name="diag">
                <field name="undefined" type="bool"/>
                <field name="cfi" type="bool"/>
                <field name="integer_overflow" type="bool"/>
                <field name="misc_undefined" type="string[]"/>
                <field name="no_recover" type="string[]"/>
            </object-field>
            <field name="recover" type="string[]" descr="value to pass to -fsanitize-recover="/>
            <field name="blacklist" type="string" descr="value to pass to -fsanitize-blacklist"/>
        </object-field>
        <field name="sdclang" type="bool" descr="compile module with SDLLVM instead of AOSP LLVM"/>
        <field name="sdk_version" type="string" descr="Minimum sdk version supported when compiling against the ndk"/>
        <field name="shared" type="string[]"/>
        <field name="shared_libs" type="blueprint[]" descr="list of modules that should be dynamically linked into this module."/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="static" type="string[]"/>
        <field name="static_libs" type="blueprint[]" descr="list of modules that should be statically linked into this module."/>
        <field name="static_ndk_lib" type="bool"/>
        <field name="stem" type="string" descr="set the name of the output"/>
        <field name="stl" type="string" descr="Select the STL library to use.  Possible values are &quot;libc++&quot;, &quot;libc++_static&quot;, &quot;libstdc++&quot;, or &quot;none&quot;. Leave blank to select the default."/>
        <object-field name="strip">
            <field name="none" type="bool"/>
            <field name="all" type="bool"/>
            <field name="keep_symbols" type="bool"/>
            <field name="keep_symbols_list" type="string[]"/>
            <field name="use_gnu_strip" type="bool"/>
        </object-field>
        <object-field name="stubs">
            <field name="symbol_file" type="string" descr="Relative path to the symbol map. The symbol map provides the list of symbols that are exported for stubs variant of this library."/>
            <field name="versions" type="string[]" descr="List versions to generate stubs libs for."/>
        </object-field>
        <field name="symbol_ordering_file" type="string" descr="Local file name to pass to the linker as --symbol-ordering-file"/>
        <field name="system_shared_libs" type="blueprint[]" descr="list of system libraries that will be dynamically linked to shared library and executable modules.  If unset, generally defaults to libc, libm, and libdl.  Set to [] to prevent linking against the defaults."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
            <object-field name="recovery">
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="srcs" type="string[]" descr="list of source files that should only be used in the recovery variant of the C/C++ module."/>
                <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="cflags" type="string[]" descr="List of additional cflags that should be used to build the recovery variant of the C/C++ module."/>
            </object-field>
            <object-field name="vendor">
                <field name="srcs" type="string[]" descr="list of source files that should only be used in the vendor variant of the C/C++ module."/>
                <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="cflags" type="string[]" descr="List of additional cflags that should be used to build the vendor variant of the C/C++ module."/>
                <field name="override_export_include_dirs" type="string[]" descr="list of exported include directories, like export_include_dirs, that will be applied to the vendor variant of this library. This will overwrite any other declarations."/>
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_runtime_libs" type="blueprint[]" descr="list of runtime libs that should not be installed along with the vendor variant of the C/C++ module."/>
                <field name="version_script" type="string" descr="version script for this vendor variant"/>
            </object-field>
        </object-field>
        <field name="tidy" type="bool" descr="whether to run clang-tidy over C-like sources."/>
        <field name="tidy_checks" type="string[]" descr="Extra checks to enable or disable in clang-tidy"/>
        <field name="tidy_checks_as_errors" type="string[]" descr="Checks that should be treated as errors."/>
        <field name="tidy_flags" type="string[]" descr="Extra flags to pass to clang-tidy"/>
        <field name="unexported_symbols_list" type="string" descr="local file name to pass to the linker as -unexported_symbols_list"/>
        <field name="unique_host_soname" type="bool" descr="rename host libraries to prevent overlap with system installed libraries"/>
        <field name="use_clang_lld" type="bool" descr="Use clang lld instead of gnu ld."/>
        <field name="use_version_lib" type="bool" descr="make android::build:GetBuildNumber() available containing the build ID."/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vendor_available" type="bool" descr="whether this module should be allowed to be directly depended by other modules with `vendor: true`, `proprietary: true`, or `vendor_available:true`. If set to true, two variants will be built separately, one like normal, and the other limited to the set of libraries and headers that are exposed to /vendor modules. The vendor variant may be used with a different (newer) /system, so it shouldn't have any unversioned runtime dependencies, or make assumptions about the system that may not be true in the future. If set to false, this module becomes inaccessible from /vendor modules. Default value is true when vndk: {enabled: true} or vendor: true. Nothing happens if BOARD_VNDK_VERSION isn't set in the BoardConfig.mk"/>
        <field name="version_script" type="string" descr="local file name to pass to the linker as --version_script"/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
        <object-field name="vndk">
            <field name="enabled" type="bool" descr="declared as a VNDK or VNDK-SP module. The vendor variant will be installed in /system instead of /vendor partition. `vendor_vailable` must be explicitly set to either true or false together with `vndk: {enabled: true}`."/>
            <field name="support_system_process" type="bool" descr="declared as a VNDK-SP module, which is a subset of VNDK. `vndk: { enabled: true }` must set together. All these modules are allowed to link to VNDK-SP or LL-NDK modules only. Other dependency will cause link-type errors. If `support_system_process` is not set or set to false, the module is VNDK-core and can link to other VNDK-core, VNDK-SP or LL-NDK modules only."/>
            <field name="extends" type="string" descr="Extending another module"/>
        </object-field>
        <field name="whole_static_libs" type="blueprint[]" descr="list of modules whose object files should be linked into this module in their entirety.  For static library modules, all of the .o files from the intermediate directory of the dependency will be linked into this modules .a file.  For a shared library, the dependency's .a file will be linked into this module using -Wl,--whole-archive."/>
        <field name="xom" type="bool"/>
        <field name="yaccflags" type="string[]" descr="list of module-specific flags that will be used for .y and .yy compiles"/>
    </blueprint>
    <blueprint name="kernel_headers">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="list of source files used to compile the C/C++ module.  May be .c, .cpp, or .S files. srcs may reference the outputs of other modules that produce source files like genrule or filegroup using the syntax &quot;:module&quot;."/>
        <field name="host_supported" type="bool" descr="If set to true, build a variant of the module for the host.  Defaults to false."/>
        <field name="device_supported" type="bool" descr="If set to true, build a variant of the module for the device.  Defaults to true."/>
        <object-field name="aidl">
            <field name="export_aidl_headers" type="bool" descr="export headers generated from .aidl sources"/>
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the aidl include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the aidl include paths."/>
            <field name="generate_traces" type="bool" descr="whether to generate traces (for systrace) for this interface"/>
        </object-field>
        <field name="allow_undefined_symbols" type="bool" descr="allow the module to contain undefined symbols.  By default, modules cannot contain undefined symbols that are not satisified by their immediate dependencies.  Set this flag to true to remove --no-undefined from the linker flags. This flag should only be necessary for compiling low-level libraries like libc."/>
        <field name="asflags" type="string[]" descr="list of module-specific flags that will be used for .S compiles"/>
        <field name="bootstrap" type="bool" descr="Allows this module to use non-APEX version of libraries. Useful for building binaries that are started before APEXes are activated."/>
        <field name="c_std" type="string" descr="C standard version to use. Can be a specific version (such as &quot;gnu11&quot;), &quot;experimental&quot; (which will use draft versions like C1x when available), or the empty string (which will use the default)."/>
        <field name="cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles."/>
        <field name="clang" type="bool" descr="Deprecated. true is the default, false is invalid."/>
        <field name="clang_asflags" type="string[]" descr="list of module-specific flags that will be used for .S compiles when compiling with clang"/>
        <field name="clang_cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles when compiling with clang"/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="conlyflags" type="string[]" descr="list of module-specific flags that will be used for C compiles"/>
        <field name="cpp_std" type="string" descr="C++ standard version to use. Can be a specific version (such as &quot;gnu++11&quot;), &quot;experimental&quot; (which will use draft versions like C++1z when available), or the empty string (which will use the default)."/>
        <field name="cppflags" type="string[]" descr="list of module-specific flags that will be used for C++ compiles"/>
        <object-field name="debug" descr="release">
            <field name="cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles in debug or release builds"/>
        </object-field>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="double_loadable" type="bool" descr="whether this module is capable of being loaded with other instance (possibly an older version) of the same module in the same process. Currently, a shared library that is a member of VNDK (vndk: {enabled: true}) can be double loaded in a vendor process if the library is also a (direct and indirect) dependency of an LLNDK library. Such libraries must be explicitly marked as `double_loadable: true` by the owner, or the dependency from the LLNDK lib should be cut if the lib is not designed to be double loaded."/>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the C/C++ module. This is most useful in the arch/multilib variants to remove non-common files"/>
        <field name="export_generated_headers" type="blueprint[]" descr="list of generated headers to re-export include directories from. Entries must be present in generated_headers."/>
        <field name="export_header_lib_headers" type="blueprint[]" descr="list of header libraries to re-export include directories from. Entries must be present in header_libs."/>
        <field name="export_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the include path (using -I) for this module and any module that links against this module.  Directories listed in export_include_dirs do not need to be listed in local_include_dirs."/>
        <field name="export_shared_lib_headers" type="blueprint[]" descr="list of shared libraries to re-export include directories from. Entries must be present in shared_libs."/>
        <field name="export_static_lib_headers" type="blueprint[]" descr="list of static libraries to re-export include directories from. Entries must be present in static_libs."/>
        <field name="force_symbols_not_weak_list" type="string" descr="local file name to pass to the linker as -force_symbols_not_weak_list"/>
        <field name="force_symbols_weak_list" type="string" descr="local file name to pass to the linker as -force_symbols_weak_list"/>
        <field name="generated_headers" type="blueprint[]" descr="list of generated headers to add to the include path. These are the names of genrule modules."/>
        <field name="generated_sources" type="blueprint[]" descr="list of generated sources to compile. These are the names of gensrcs or genrule modules."/>
        <field name="gnu_extensions" type="bool" descr="if set to false, use -std=c++* instead of -std=gnu++*"/>
        <field name="group_static_libs" type="bool" descr="group static libraries.  This can resolve missing symbols issues with interdependencies between static libraries, but it is generally better to order them correctly instead."/>
        <object-field name="header_abi_checker">
            <field name="symbol_file" type="string" descr="Path to a symbol file that specifies the symbols to be included in the generated ABI dump file"/>
            <field name="exclude_symbol_versions" type="string[]" descr="Symbol versions that should be ignored from the symbol file"/>
            <field name="exclude_symbol_tags" type="string[]" descr="Symbol tags that should be ignored from the symbol file"/>
        </object-field>
        <field name="header_libs" type="blueprint[]" descr="list of modules that should only provide headers for this module."/>
        <field name="host_ldlibs" type="string[]" descr="-l arguments to pass to linker for host-provided shared libraries"/>
        <field name="include_build_directory" type="bool" descr="Add the directory containing the Android.bp file to the list of include directories. Defaults to true."/>
        <field name="include_dirs" type="string[]" descr="list of directories relative to the root of the source tree that will be added to the include path using -I. If possible, don't use this.  If adding paths from the current directory use local_include_dirs, if adding paths from other modules use export_include_dirs in that module."/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="instruction_set" type="string" descr="the instruction set architecture to use to compile the C/C++ module."/>
        <field name="ldflags" type="string[]" descr="list of module-specific flags that will be used for all link steps"/>
        <field name="local_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the include path using -I"/>
        <field name="logtags" type="string[]" descr="*.logtags files, to combine together in order to generate the /system/etc/event-log-tags file"/>
        <object-field name="lto">
            <field name="never" type="bool"/>
            <field name="full" type="bool"/>
            <field name="thin" type="bool"/>
        </object-field>
        <field name="native_coverage" type="bool"/>
        <field name="no_libcrt" type="bool" descr="don't link in libclang_rt.builtins-*.a"/>
        <field name="no_libgcc" type="bool" descr="don't link in libgcc.a"/>
        <field name="nocrt" type="bool" descr="don't link in crt_begin and crt_end.  This flag should only be necessary for compiling crt or libc."/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="openmp" type="bool" descr="Build and link with OpenMP"/>
        <field name="overrides" type="blueprint[]" descr="Names of modules to be overridden. Listed modules can only be other shared libraries (in Make or Soong). This does not completely prevent installation of the overridden libraries, but if both binaries would be installed by default (in PRODUCT_PACKAGES) the other library will be removed from PRODUCT_PACKAGES."/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="pack_relocations" type="bool" descr="Generate compact dynamic relocation table, default true."/>
        <object-field name="pgo">
            <field name="instrumentation" type="bool"/>
            <field name="sampling" type="bool"/>
            <field name="profile_file" type="string"/>
            <field name="benchmarks" type="string[]"/>
            <field name="enable_profile_use" type="bool"/>
            <field name="cflags" type="string[]" descr="Additional compiler flags to use when building this module for profiling (either instrumentation or sampling)."/>
        </object-field>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <object-field name="proto">
            <field name="export_proto_headers" type="bool" descr="export headers generated from .proto sources"/>
            <field name="static" type="bool" descr="Link statically against the protobuf runtime"/>
            <field name="type" type="string" descr="Proto generator type.  C++: full or lite.  Java: micro, nano, stream, or lite."/>
            <field name="plugin" type="string" descr="Proto plugin to use as the generator.  Must be a cc_binary_host module."/>
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the protoc include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the bp file that will be added to the protoc include paths."/>
            <field name="canonical_path_from_root" type="bool" descr="whether to identify the proto files from the root of the source tree (the original method in Android, useful for android-specific protos), or relative from where they were specified (useful for external/third party protos). This defaults to true today, but is expected to default to false in the future."/>
        </object-field>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="recovery_available" type="bool" descr="Make this module available when building for recovery"/>
        <field name="reexportedIncludeFlags" type="string[]"/>
        <field name="relative_install_path" type="string" descr="install to a subdirectory of the default install path for the module"/>
        <object-field name="renderscript">
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the llvm-rs-cc include paths"/>
            <field name="flags" type="string[]" descr="list of flags that will be passed to llvm-rs-cc"/>
            <field name="target_api" type="string" descr="Renderscript API level to target"/>
        </object-field>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="rtti" type="bool" descr="pass -frtti instead of -fno-rtti"/>
        <field name="runtime_libs" type="blueprint[]" descr="list of modules that should be installed with this module.  This is similar to 'required' but '.vendor' suffix will be appended to the module names if the shared libraries have vendor variants and this module uses VNDK."/>
        <object-field name="sanitize">
            <field name="never" type="bool"/>
            <field name="address" type="bool" descr="main sanitizers"/>
            <field name="thread" type="bool"/>
            <field name="hwaddress" type="bool"/>
            <field name="undefined" type="bool" descr="local sanitizers"/>
            <field name="all_undefined" type="bool"/>
            <field name="misc_undefined" type="string[]"/>
            <field name="coverage" type="bool"/>
            <field name="safestack" type="bool"/>
            <field name="cfi" type="bool"/>
            <field name="integer_overflow" type="bool"/>
            <field name="scudo" type="bool"/>
            <field name="scs" type="bool"/>
            <object-field name="diag">
                <field name="undefined" type="bool"/>
                <field name="cfi" type="bool"/>
                <field name="integer_overflow" type="bool"/>
                <field name="misc_undefined" type="string[]"/>
                <field name="no_recover" type="string[]"/>
            </object-field>
            <field name="recover" type="string[]" descr="value to pass to -fsanitize-recover="/>
            <field name="blacklist" type="string" descr="value to pass to -fsanitize-blacklist"/>
        </object-field>
        <field name="sdclang" type="bool" descr="compile module with SDLLVM instead of AOSP LLVM"/>
        <field name="sdk_version" type="string" descr="Minimum sdk version supported when compiling against the ndk"/>
        <field name="shared" type="string[]"/>
        <field name="shared_libs" type="blueprint[]" descr="list of modules that should be dynamically linked into this module."/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="static" type="string[]"/>
        <field name="static_libs" type="blueprint[]" descr="list of modules that should be statically linked into this module."/>
        <field name="static_ndk_lib" type="bool"/>
        <field name="stem" type="string" descr="set the name of the output"/>
        <field name="stl" type="string" descr="Select the STL library to use.  Possible values are &quot;libc++&quot;, &quot;libc++_static&quot;, &quot;libstdc++&quot;, or &quot;none&quot;. Leave blank to select the default."/>
        <object-field name="strip">
            <field name="none" type="bool"/>
            <field name="all" type="bool"/>
            <field name="keep_symbols" type="bool"/>
            <field name="keep_symbols_list" type="string[]"/>
            <field name="use_gnu_strip" type="bool"/>
        </object-field>
        <object-field name="stubs">
            <field name="symbol_file" type="string" descr="Relative path to the symbol map. The symbol map provides the list of symbols that are exported for stubs variant of this library."/>
            <field name="versions" type="string[]" descr="List versions to generate stubs libs for."/>
        </object-field>
        <field name="symbol_ordering_file" type="string" descr="Local file name to pass to the linker as --symbol-ordering-file"/>
        <field name="system_shared_libs" type="blueprint[]" descr="list of system libraries that will be dynamically linked to shared library and executable modules.  If unset, generally defaults to libc, libm, and libdl.  Set to [] to prevent linking against the defaults."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
            <object-field name="recovery">
                <field name="srcs" type="string[]" descr="list of source files that should only be used in the recovery variant of the C/C++ module."/>
                <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="cflags" type="string[]" descr="List of additional cflags that should be used to build the recovery variant of the C/C++ module."/>
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the recovery variant of the C/C++ module."/>
            </object-field>
            <object-field name="vendor">
                <field name="override_export_include_dirs" type="string[]" descr="list of exported include directories, like export_include_dirs, that will be applied to the vendor variant of this library. This will overwrite any other declarations."/>
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_runtime_libs" type="blueprint[]" descr="list of runtime libs that should not be installed along with the vendor variant of the C/C++ module."/>
                <field name="version_script" type="string" descr="version script for this vendor variant"/>
                <field name="srcs" type="string[]" descr="list of source files that should only be used in the vendor variant of the C/C++ module."/>
                <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="cflags" type="string[]" descr="List of additional cflags that should be used to build the vendor variant of the C/C++ module."/>
            </object-field>
        </object-field>
        <field name="tidy" type="bool" descr="whether to run clang-tidy over C-like sources."/>
        <field name="tidy_checks" type="string[]" descr="Extra checks to enable or disable in clang-tidy"/>
        <field name="tidy_checks_as_errors" type="string[]" descr="Checks that should be treated as errors."/>
        <field name="tidy_flags" type="string[]" descr="Extra flags to pass to clang-tidy"/>
        <field name="unexported_symbols_list" type="string" descr="local file name to pass to the linker as -unexported_symbols_list"/>
        <field name="unique_host_soname" type="bool" descr="rename host libraries to prevent overlap with system installed libraries"/>
        <field name="use_clang_lld" type="bool" descr="Use clang lld instead of gnu ld."/>
        <field name="use_version_lib" type="bool" descr="make android::build:GetBuildNumber() available containing the build ID."/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vendor_available" type="bool" descr="whether this module should be allowed to be directly depended by other modules with `vendor: true`, `proprietary: true`, or `vendor_available:true`. If set to true, two variants will be built separately, one like normal, and the other limited to the set of libraries and headers that are exposed to /vendor modules. The vendor variant may be used with a different (newer) /system, so it shouldn't have any unversioned runtime dependencies, or make assumptions about the system that may not be true in the future. If set to false, this module becomes inaccessible from /vendor modules. Default value is true when vndk: {enabled: true} or vendor: true. Nothing happens if BOARD_VNDK_VERSION isn't set in the BoardConfig.mk"/>
        <field name="version_script" type="string" descr="local file name to pass to the linker as --version_script"/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
        <object-field name="vndk">
            <field name="enabled" type="bool" descr="declared as a VNDK or VNDK-SP module. The vendor variant will be installed in /system instead of /vendor partition. `vendor_vailable` must be explicitly set to either true or false together with `vndk: {enabled: true}`."/>
            <field name="support_system_process" type="bool" descr="declared as a VNDK-SP module, which is a subset of VNDK. `vndk: { enabled: true }` must set together. All these modules are allowed to link to VNDK-SP or LL-NDK modules only. Other dependency will cause link-type errors. If `support_system_process` is not set or set to false, the module is VNDK-core and can link to other VNDK-core, VNDK-SP or LL-NDK modules only."/>
            <field name="extends" type="string" descr="Extending another module"/>
        </object-field>
        <field name="whole_static_libs" type="blueprint[]" descr="list of modules whose object files should be linked into this module in their entirety.  For static library modules, all of the .o files from the intermediate directory of the dependency will be linked into this modules .a file.  For a shared library, the dependency's .a file will be linked into this module using -Wl,--whole-archive."/>
        <field name="xom" type="bool"/>
        <field name="yaccflags" type="string[]" descr="list of module-specific flags that will be used for .y and .yy compiles"/>
    </blueprint>
    <blueprint name="llndk_headers">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <object-field name="aidl">
            <field name="export_aidl_headers" type="bool" descr="export headers generated from .aidl sources"/>
        </object-field>
        <field name="allow_undefined_symbols" type="bool" descr="allow the module to contain undefined symbols.  By default, modules cannot contain undefined symbols that are not satisified by their immediate dependencies.  Set this flag to true to remove --no-undefined from the linker flags. This flag should only be necessary for compiling low-level libraries like libc."/>
        <field name="bootstrap" type="bool" descr="Allows this module to use non-APEX version of libraries. Useful for building binaries that are started before APEXes are activated."/>
        <field name="clang" type="bool" descr="Deprecated. true is the default, false is invalid."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="double_loadable" type="bool" descr="whether this module is capable of being loaded with other instance (possibly an older version) of the same module in the same process. Currently, a shared library that is a member of VNDK (vndk: {enabled: true}) can be double loaded in a vendor process if the library is also a (direct and indirect) dependency of an LLNDK library. Such libraries must be explicitly marked as `double_loadable: true` by the owner, or the dependency from the LLNDK lib should be cut if the lib is not designed to be double loaded."/>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="export_generated_headers" type="blueprint[]" descr="list of generated headers to re-export include directories from. Entries must be present in generated_headers."/>
        <field name="export_header_lib_headers" type="blueprint[]" descr="list of header libraries to re-export include directories from. Entries must be present in header_libs."/>
        <field name="export_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the include path (using -I) for this module and any module that links against this module.  Directories listed in export_include_dirs do not need to be listed in local_include_dirs."/>
        <field name="export_shared_lib_headers" type="blueprint[]" descr="list of shared libraries to re-export include directories from. Entries must be present in shared_libs."/>
        <field name="export_static_lib_headers" type="blueprint[]" descr="list of static libraries to re-export include directories from. Entries must be present in static_libs."/>
        <field name="force_symbols_not_weak_list" type="string" descr="local file name to pass to the linker as -force_symbols_not_weak_list"/>
        <field name="force_symbols_weak_list" type="string" descr="local file name to pass to the linker as -force_symbols_weak_list"/>
        <field name="group_static_libs" type="bool" descr="group static libraries.  This can resolve missing symbols issues with interdependencies between static libraries, but it is generally better to order them correctly instead."/>
        <object-field name="header_abi_checker">
            <field name="symbol_file" type="string" descr="Path to a symbol file that specifies the symbols to be included in the generated ABI dump file"/>
            <field name="exclude_symbol_versions" type="string[]" descr="Symbol versions that should be ignored from the symbol file"/>
            <field name="exclude_symbol_tags" type="string[]" descr="Symbol tags that should be ignored from the symbol file"/>
        </object-field>
        <field name="header_libs" type="blueprint[]" descr="list of modules that should only provide headers for this module."/>
        <field name="host_ldlibs" type="string[]" descr="-l arguments to pass to linker for host-provided shared libraries"/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="ldflags" type="string[]" descr="list of module-specific flags that will be used for all link steps"/>
        <field name="logtags" type="string[]" descr="*.logtags files, to combine together in order to generate the /system/etc/event-log-tags file"/>
        <object-field name="lto">
            <field name="never" type="bool"/>
            <field name="full" type="bool"/>
            <field name="thin" type="bool"/>
        </object-field>
        <field name="native_coverage" type="bool"/>
        <field name="no_libcrt" type="bool" descr="don't link in libclang_rt.builtins-*.a"/>
        <field name="no_libgcc" type="bool" descr="don't link in libgcc.a"/>
        <field name="nocrt" type="bool" descr="don't link in crt_begin and crt_end.  This flag should only be necessary for compiling crt or libc."/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="overrides" type="blueprint[]" descr="Names of modules to be overridden. Listed modules can only be other shared libraries (in Make or Soong). This does not completely prevent installation of the overridden libraries, but if both binaries would be installed by default (in PRODUCT_PACKAGES) the other library will be removed from PRODUCT_PACKAGES."/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="pack_relocations" type="bool" descr="Generate compact dynamic relocation table, default true."/>
        <object-field name="pgo">
            <field name="instrumentation" type="bool"/>
            <field name="sampling" type="bool"/>
            <field name="profile_file" type="string"/>
            <field name="benchmarks" type="string[]"/>
            <field name="enable_profile_use" type="bool"/>
            <field name="cflags" type="string[]" descr="Additional compiler flags to use when building this module for profiling (either instrumentation or sampling)."/>
        </object-field>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <object-field name="proto">
            <field name="export_proto_headers" type="bool" descr="export headers generated from .proto sources"/>
        </object-field>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="recovery_available" type="bool" descr="Make this module available when building for recovery"/>
        <field name="reexportedIncludeFlags" type="string[]"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="runtime_libs" type="blueprint[]" descr="list of modules that should be installed with this module.  This is similar to 'required' but '.vendor' suffix will be appended to the module names if the shared libraries have vendor variants and this module uses VNDK."/>
        <object-field name="sanitize">
            <field name="never" type="bool"/>
            <field name="address" type="bool" descr="main sanitizers"/>
            <field name="thread" type="bool"/>
            <field name="hwaddress" type="bool"/>
            <field name="undefined" type="bool" descr="local sanitizers"/>
            <field name="all_undefined" type="bool"/>
            <field name="misc_undefined" type="string[]"/>
            <field name="coverage" type="bool"/>
            <field name="safestack" type="bool"/>
            <field name="cfi" type="bool"/>
            <field name="integer_overflow" type="bool"/>
            <field name="scudo" type="bool"/>
            <field name="scs" type="bool"/>
            <object-field name="diag">
                <field name="undefined" type="bool"/>
                <field name="cfi" type="bool"/>
                <field name="integer_overflow" type="bool"/>
                <field name="misc_undefined" type="string[]"/>
                <field name="no_recover" type="string[]"/>
            </object-field>
            <field name="recover" type="string[]" descr="value to pass to -fsanitize-recover="/>
            <field name="blacklist" type="string" descr="value to pass to -fsanitize-blacklist"/>
        </object-field>
        <field name="sdclang" type="bool" descr="compile module with SDLLVM instead of AOSP LLVM"/>
        <field name="sdk_version" type="string" descr="Minimum sdk version supported when compiling against the ndk"/>
        <field name="shared" type="string[]"/>
        <field name="shared_libs" type="blueprint[]" descr="list of modules that should be dynamically linked into this module."/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="static" type="string[]"/>
        <field name="static_libs" type="blueprint[]" descr="list of modules that should be statically linked into this module."/>
        <field name="static_ndk_lib" type="bool"/>
        <field name="stem" type="string" descr="set the name of the output"/>
        <field name="stl" type="string" descr="Select the STL library to use.  Possible values are &quot;libc++&quot;, &quot;libc++_static&quot;, &quot;libstdc++&quot;, or &quot;none&quot;. Leave blank to select the default."/>
        <object-field name="strip">
            <field name="none" type="bool"/>
            <field name="all" type="bool"/>
            <field name="keep_symbols" type="bool"/>
            <field name="keep_symbols_list" type="string[]"/>
            <field name="use_gnu_strip" type="bool"/>
        </object-field>
        <object-field name="stubs">
            <field name="symbol_file" type="string" descr="Relative path to the symbol map. The symbol map provides the list of symbols that are exported for stubs variant of this library."/>
            <field name="versions" type="string[]" descr="List versions to generate stubs libs for."/>
        </object-field>
        <field name="symbol_ordering_file" type="string" descr="Local file name to pass to the linker as --symbol-ordering-file"/>
        <field name="system_shared_libs" type="blueprint[]" descr="list of system libraries that will be dynamically linked to shared library and executable modules.  If unset, generally defaults to libc, libm, and libdl.  Set to [] to prevent linking against the defaults."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
            <object-field name="recovery">
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the recovery variant of the C/C++ module."/>
            </object-field>
            <object-field name="vendor">
                <field name="override_export_include_dirs" type="string[]" descr="list of exported include directories, like export_include_dirs, that will be applied to the vendor variant of this library. This will overwrite any other declarations."/>
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_runtime_libs" type="blueprint[]" descr="list of runtime libs that should not be installed along with the vendor variant of the C/C++ module."/>
                <field name="version_script" type="string" descr="version script for this vendor variant"/>
            </object-field>
        </object-field>
        <field name="tidy" type="bool" descr="whether to run clang-tidy over C-like sources."/>
        <field name="tidy_checks" type="string[]" descr="Extra checks to enable or disable in clang-tidy"/>
        <field name="tidy_checks_as_errors" type="string[]" descr="Checks that should be treated as errors."/>
        <field name="tidy_flags" type="string[]" descr="Extra flags to pass to clang-tidy"/>
        <field name="unexported_symbols_list" type="string" descr="local file name to pass to the linker as -unexported_symbols_list"/>
        <field name="unique_host_soname" type="bool" descr="rename host libraries to prevent overlap with system installed libraries"/>
        <field name="use_clang_lld" type="bool" descr="Use clang lld instead of gnu ld."/>
        <field name="use_version_lib" type="bool" descr="make android::build:GetBuildNumber() available containing the build ID."/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vendor_available" type="bool" descr="whether this module should be allowed to be directly depended by other modules with `vendor: true`, `proprietary: true`, or `vendor_available:true`. If set to true, two variants will be built separately, one like normal, and the other limited to the set of libraries and headers that are exposed to /vendor modules. The vendor variant may be used with a different (newer) /system, so it shouldn't have any unversioned runtime dependencies, or make assumptions about the system that may not be true in the future. If set to false, this module becomes inaccessible from /vendor modules. Default value is true when vndk: {enabled: true} or vendor: true. Nothing happens if BOARD_VNDK_VERSION isn't set in the BoardConfig.mk"/>
        <field name="version_script" type="string" descr="local file name to pass to the linker as --version_script"/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
        <object-field name="vndk">
            <field name="enabled" type="bool" descr="declared as a VNDK or VNDK-SP module. The vendor variant will be installed in /system instead of /vendor partition. `vendor_vailable` must be explicitly set to either true or false together with `vndk: {enabled: true}`."/>
            <field name="support_system_process" type="bool" descr="declared as a VNDK-SP module, which is a subset of VNDK. `vndk: { enabled: true }` must set together. All these modules are allowed to link to VNDK-SP or LL-NDK modules only. Other dependency will cause link-type errors. If `support_system_process` is not set or set to false, the module is VNDK-core and can link to other VNDK-core, VNDK-SP or LL-NDK modules only."/>
            <field name="extends" type="string" descr="Extending another module"/>
        </object-field>
        <field name="whole_static_libs" type="blueprint[]" descr="list of modules whose object files should be linked into this module in their entirety.  For static library modules, all of the .o files from the intermediate directory of the dependency will be linked into this modules .a file.  For a shared library, the dependency's .a file will be linked into this module using -Wl,--whole-archive."/>
        <field name="xom" type="bool"/>
    </blueprint>
    <blueprint name="llndk_library">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="bootstrap" type="bool" descr="Allows this module to use non-APEX version of libraries. Useful for building binaries that are started before APEXes are activated."/>
        <field name="clang" type="bool" descr="Deprecated. true is the default, false is invalid."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="export_headers_as_system" type="bool" descr="Whether to export any headers as -isystem instead of -I. Mainly for use by bionic/libc."/>
        <field name="export_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the include path (using -I) for this module and any module that links against this module.  Directories listed in export_include_dirs do not need to be listed in local_include_dirs."/>
        <field name="export_llndk_headers" type="string[]" descr="list of llndk headers to re-export include directories from."/>
        <field name="export_preprocessed_headers" type="string[]" descr="Which headers to process with versioner. This really only handles bionic/libc/include right now."/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="logtags" type="string[]" descr="*.logtags files, to combine together in order to generate the /system/etc/event-log-tags file"/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="recovery_available" type="bool" descr="Make this module available when building for recovery"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="sdclang" type="bool" descr="compile module with SDLLVM instead of AOSP LLVM"/>
        <field name="sdk_version" type="string" descr="Minimum sdk version supported when compiling against the ndk"/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="symbol_file" type="string" descr="Relative path to the symbol map. An example file can be seen here: TODO(danalbert): Make an example."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
            <object-field name="vendor">
                <field name="override_export_include_dirs" type="string[]" descr="list of exported include directories, like export_include_dirs, that will be applied to the vendor variant of this library. This will overwrite any other declarations."/>
            </object-field>
        </object-field>
        <field name="unversioned" type="bool" descr="Whether the system library uses symbol versions."/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vendor_available" type="bool" descr="whether this module can be directly depended upon by libs that are installed to /vendor. When set to false, this module can only be depended on by VNDK libraries, not vendor libraries. This effectively hides this module from vendors. Default value is true."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="ndk_headers">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="List of headers to install. Glob compatible. Common case is &quot;include/**/*.h&quot;."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="draft" type="bool" descr="True if this API is not yet ready to be shipped in the NDK. It will be available in the platform for testing, but will be excluded from the sysroot provided to the NDK proper."/>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="exclude_srcs" type="string[]" descr="Source paths that should be excluded from the srcs glob."/>
        <field name="from" type="string" descr="Base directory of the headers being installed. As an example: ndk_headers { } Will install $SYSROOT/usr/include/foo/bar/baz.h. If `from` were instead &quot;include/foo&quot;, it would have installed $SYSROOT/usr/include/bar/baz.h."/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="license" type="string" descr="Path to the NOTICE file associated with the headers."/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
        </object-field>
        <field name="to" type="string" descr="Install path within the sysroot. This is relative to usr/include."/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="ndk_library">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="draft" type="bool" descr="True if this API is not yet ready to be shipped in the NDK. It will be available in the platform for testing, but will be excluded from the sysroot provided to the NDK proper."/>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="first_version" type="string" descr="The first API level a library was available. A library will be generated for every API level beginning with this one."/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="symbol_file" type="string" descr="Relative path to the symbol map. An example file can be seen here: TODO(danalbert): Make an example."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
        </object-field>
        <field name="unversioned_until" type="string" descr="The first API level that library should have the version script applied. This defaults to the value of first_version, and should almost never be used. This is only needed to work around platform bugs like https://github.com/android-ndk/ndk/issues/265."/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="ndk_prebuilt_object">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="bootstrap" type="bool" descr="Allows this module to use non-APEX version of libraries. Useful for building binaries that are started before APEXes are activated."/>
        <field name="clang" type="bool" descr="Deprecated. true is the default, false is invalid."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="double_loadable" type="bool" descr="whether this module is capable of being loaded with other instance (possibly an older version) of the same module in the same process. Currently, a shared library that is a member of VNDK (vndk: {enabled: true}) can be double loaded in a vendor process if the library is also a (direct and indirect) dependency of an LLNDK library. Such libraries must be explicitly marked as `double_loadable: true` by the owner, or the dependency from the LLNDK lib should be cut if the lib is not designed to be double loaded."/>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="logtags" type="string[]" descr="*.logtags files, to combine together in order to generate the /system/etc/event-log-tags file"/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="objs" type="string[]" descr="names of other cc_object modules to link into this module using partial linking"/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="prefix_symbols" type="string" descr="if set, add an extra objcopy --prefix-symbols= step"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="recovery_available" type="bool" descr="Make this module available when building for recovery"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="sdclang" type="bool" descr="compile module with SDLLVM instead of AOSP LLVM"/>
        <field name="sdk_version" type="string" descr="Minimum sdk version supported when compiling against the ndk"/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
        </object-field>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vendor_available" type="bool" descr="whether this module should be allowed to be directly depended by other modules with `vendor: true`, `proprietary: true`, or `vendor_available:true`. If set to true, two variants will be built separately, one like normal, and the other limited to the set of libraries and headers that are exposed to /vendor modules. The vendor variant may be used with a different (newer) /system, so it shouldn't have any unversioned runtime dependencies, or make assumptions about the system that may not be true in the future. If set to false, this module becomes inaccessible from /vendor modules. Default value is true when vndk: {enabled: true} or vendor: true. Nothing happens if BOARD_VNDK_VERSION isn't set in the BoardConfig.mk"/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="ndk_prebuilt_shared_stl">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <object-field name="aidl">
            <field name="export_aidl_headers" type="bool" descr="export headers generated from .aidl sources"/>
        </object-field>
        <field name="allow_undefined_symbols" type="bool" descr="allow the module to contain undefined symbols.  By default, modules cannot contain undefined symbols that are not satisified by their immediate dependencies.  Set this flag to true to remove --no-undefined from the linker flags. This flag should only be necessary for compiling low-level libraries like libc."/>
        <field name="bootstrap" type="bool" descr="Allows this module to use non-APEX version of libraries. Useful for building binaries that are started before APEXes are activated."/>
        <field name="clang" type="bool" descr="Deprecated. true is the default, false is invalid."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="double_loadable" type="bool" descr="whether this module is capable of being loaded with other instance (possibly an older version) of the same module in the same process. Currently, a shared library that is a member of VNDK (vndk: {enabled: true}) can be double loaded in a vendor process if the library is also a (direct and indirect) dependency of an LLNDK library. Such libraries must be explicitly marked as `double_loadable: true` by the owner, or the dependency from the LLNDK lib should be cut if the lib is not designed to be double loaded."/>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="export_generated_headers" type="blueprint[]" descr="list of generated headers to re-export include directories from. Entries must be present in generated_headers."/>
        <field name="export_header_lib_headers" type="blueprint[]" descr="list of header libraries to re-export include directories from. Entries must be present in header_libs."/>
        <field name="export_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the include path (using -I) for this module and any module that links against this module.  Directories listed in export_include_dirs do not need to be listed in local_include_dirs."/>
        <field name="export_shared_lib_headers" type="blueprint[]" descr="list of shared libraries to re-export include directories from. Entries must be present in shared_libs."/>
        <field name="export_static_lib_headers" type="blueprint[]" descr="list of static libraries to re-export include directories from. Entries must be present in static_libs."/>
        <field name="force_symbols_not_weak_list" type="string" descr="local file name to pass to the linker as -force_symbols_not_weak_list"/>
        <field name="force_symbols_weak_list" type="string" descr="local file name to pass to the linker as -force_symbols_weak_list"/>
        <field name="group_static_libs" type="bool" descr="group static libraries.  This can resolve missing symbols issues with interdependencies between static libraries, but it is generally better to order them correctly instead."/>
        <object-field name="header_abi_checker">
            <field name="symbol_file" type="string" descr="Path to a symbol file that specifies the symbols to be included in the generated ABI dump file"/>
            <field name="exclude_symbol_versions" type="string[]" descr="Symbol versions that should be ignored from the symbol file"/>
            <field name="exclude_symbol_tags" type="string[]" descr="Symbol tags that should be ignored from the symbol file"/>
        </object-field>
        <field name="header_libs" type="blueprint[]" descr="list of modules that should only provide headers for this module."/>
        <field name="host_ldlibs" type="string[]" descr="-l arguments to pass to linker for host-provided shared libraries"/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="ldflags" type="string[]" descr="list of module-specific flags that will be used for all link steps"/>
        <field name="logtags" type="string[]" descr="*.logtags files, to combine together in order to generate the /system/etc/event-log-tags file"/>
        <object-field name="lto">
            <field name="never" type="bool"/>
            <field name="full" type="bool"/>
            <field name="thin" type="bool"/>
        </object-field>
        <field name="native_coverage" type="bool"/>
        <field name="no_libcrt" type="bool" descr="don't link in libclang_rt.builtins-*.a"/>
        <field name="no_libgcc" type="bool" descr="don't link in libgcc.a"/>
        <field name="nocrt" type="bool" descr="don't link in crt_begin and crt_end.  This flag should only be necessary for compiling crt or libc."/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="overrides" type="blueprint[]" descr="Names of modules to be overridden. Listed modules can only be other shared libraries (in Make or Soong). This does not completely prevent installation of the overridden libraries, but if both binaries would be installed by default (in PRODUCT_PACKAGES) the other library will be removed from PRODUCT_PACKAGES."/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="pack_relocations" type="bool" descr="Generate compact dynamic relocation table, default true."/>
        <object-field name="pgo">
            <field name="instrumentation" type="bool"/>
            <field name="sampling" type="bool"/>
            <field name="profile_file" type="string"/>
            <field name="benchmarks" type="string[]"/>
            <field name="enable_profile_use" type="bool"/>
            <field name="cflags" type="string[]" descr="Additional compiler flags to use when building this module for profiling (either instrumentation or sampling)."/>
        </object-field>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <object-field name="proto">
            <field name="export_proto_headers" type="bool" descr="export headers generated from .proto sources"/>
        </object-field>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="recovery_available" type="bool" descr="Make this module available when building for recovery"/>
        <field name="reexportedIncludeFlags" type="string[]"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="runtime_libs" type="blueprint[]" descr="list of modules that should be installed with this module.  This is similar to 'required' but '.vendor' suffix will be appended to the module names if the shared libraries have vendor variants and this module uses VNDK."/>
        <object-field name="sanitize">
            <field name="never" type="bool"/>
            <field name="address" type="bool" descr="main sanitizers"/>
            <field name="thread" type="bool"/>
            <field name="hwaddress" type="bool"/>
            <field name="undefined" type="bool" descr="local sanitizers"/>
            <field name="all_undefined" type="bool"/>
            <field name="misc_undefined" type="string[]"/>
            <field name="coverage" type="bool"/>
            <field name="safestack" type="bool"/>
            <field name="cfi" type="bool"/>
            <field name="integer_overflow" type="bool"/>
            <field name="scudo" type="bool"/>
            <field name="scs" type="bool"/>
            <object-field name="diag">
                <field name="undefined" type="bool"/>
                <field name="cfi" type="bool"/>
                <field name="integer_overflow" type="bool"/>
                <field name="misc_undefined" type="string[]"/>
                <field name="no_recover" type="string[]"/>
            </object-field>
            <field name="recover" type="string[]" descr="value to pass to -fsanitize-recover="/>
            <field name="blacklist" type="string" descr="value to pass to -fsanitize-blacklist"/>
        </object-field>
        <field name="sdclang" type="bool" descr="compile module with SDLLVM instead of AOSP LLVM"/>
        <field name="sdk_version" type="string" descr="Minimum sdk version supported when compiling against the ndk"/>
        <field name="shared" type="string[]"/>
        <field name="shared_libs" type="blueprint[]" descr="list of modules that should be dynamically linked into this module."/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="static" type="string[]"/>
        <field name="static_libs" type="blueprint[]" descr="list of modules that should be statically linked into this module."/>
        <field name="static_ndk_lib" type="bool"/>
        <field name="stem" type="string" descr="set the name of the output"/>
        <field name="stl" type="string" descr="Select the STL library to use.  Possible values are &quot;libc++&quot;, &quot;libc++_static&quot;, &quot;libstdc++&quot;, or &quot;none&quot;. Leave blank to select the default."/>
        <object-field name="strip">
            <field name="none" type="bool"/>
            <field name="all" type="bool"/>
            <field name="keep_symbols" type="bool"/>
            <field name="keep_symbols_list" type="string[]"/>
            <field name="use_gnu_strip" type="bool"/>
        </object-field>
        <object-field name="stubs">
            <field name="symbol_file" type="string" descr="Relative path to the symbol map. The symbol map provides the list of symbols that are exported for stubs variant of this library."/>
            <field name="versions" type="string[]" descr="List versions to generate stubs libs for."/>
        </object-field>
        <field name="symbol_ordering_file" type="string" descr="Local file name to pass to the linker as --symbol-ordering-file"/>
        <field name="system_shared_libs" type="blueprint[]" descr="list of system libraries that will be dynamically linked to shared library and executable modules.  If unset, generally defaults to libc, libm, and libdl.  Set to [] to prevent linking against the defaults."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
            <object-field name="recovery">
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the recovery variant of the C/C++ module."/>
            </object-field>
            <object-field name="vendor">
                <field name="override_export_include_dirs" type="string[]" descr="list of exported include directories, like export_include_dirs, that will be applied to the vendor variant of this library. This will overwrite any other declarations."/>
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_runtime_libs" type="blueprint[]" descr="list of runtime libs that should not be installed along with the vendor variant of the C/C++ module."/>
                <field name="version_script" type="string" descr="version script for this vendor variant"/>
            </object-field>
        </object-field>
        <field name="tidy" type="bool" descr="whether to run clang-tidy over C-like sources."/>
        <field name="tidy_checks" type="string[]" descr="Extra checks to enable or disable in clang-tidy"/>
        <field name="tidy_checks_as_errors" type="string[]" descr="Checks that should be treated as errors."/>
        <field name="tidy_flags" type="string[]" descr="Extra flags to pass to clang-tidy"/>
        <field name="unexported_symbols_list" type="string" descr="local file name to pass to the linker as -unexported_symbols_list"/>
        <field name="unique_host_soname" type="bool" descr="rename host libraries to prevent overlap with system installed libraries"/>
        <field name="use_clang_lld" type="bool" descr="Use clang lld instead of gnu ld."/>
        <field name="use_version_lib" type="bool" descr="make android::build:GetBuildNumber() available containing the build ID."/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vendor_available" type="bool" descr="whether this module should be allowed to be directly depended by other modules with `vendor: true`, `proprietary: true`, or `vendor_available:true`. If set to true, two variants will be built separately, one like normal, and the other limited to the set of libraries and headers that are exposed to /vendor modules. The vendor variant may be used with a different (newer) /system, so it shouldn't have any unversioned runtime dependencies, or make assumptions about the system that may not be true in the future. If set to false, this module becomes inaccessible from /vendor modules. Default value is true when vndk: {enabled: true} or vendor: true. Nothing happens if BOARD_VNDK_VERSION isn't set in the BoardConfig.mk"/>
        <field name="version_script" type="string" descr="local file name to pass to the linker as --version_script"/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
        <object-field name="vndk">
            <field name="enabled" type="bool" descr="declared as a VNDK or VNDK-SP module. The vendor variant will be installed in /system instead of /vendor partition. `vendor_vailable` must be explicitly set to either true or false together with `vndk: {enabled: true}`."/>
            <field name="support_system_process" type="bool" descr="declared as a VNDK-SP module, which is a subset of VNDK. `vndk: { enabled: true }` must set together. All these modules are allowed to link to VNDK-SP or LL-NDK modules only. Other dependency will cause link-type errors. If `support_system_process` is not set or set to false, the module is VNDK-core and can link to other VNDK-core, VNDK-SP or LL-NDK modules only."/>
            <field name="extends" type="string" descr="Extending another module"/>
        </object-field>
        <field name="whole_static_libs" type="blueprint[]" descr="list of modules whose object files should be linked into this module in their entirety.  For static library modules, all of the .o files from the intermediate directory of the dependency will be linked into this modules .a file.  For a shared library, the dependency's .a file will be linked into this module using -Wl,--whole-archive."/>
        <field name="xom" type="bool"/>
    </blueprint>
    <blueprint name="ndk_prebuilt_static_stl">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <object-field name="aidl">
            <field name="export_aidl_headers" type="bool" descr="export headers generated from .aidl sources"/>
        </object-field>
        <field name="allow_undefined_symbols" type="bool" descr="allow the module to contain undefined symbols.  By default, modules cannot contain undefined symbols that are not satisified by their immediate dependencies.  Set this flag to true to remove --no-undefined from the linker flags. This flag should only be necessary for compiling low-level libraries like libc."/>
        <field name="bootstrap" type="bool" descr="Allows this module to use non-APEX version of libraries. Useful for building binaries that are started before APEXes are activated."/>
        <field name="clang" type="bool" descr="Deprecated. true is the default, false is invalid."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="double_loadable" type="bool" descr="whether this module is capable of being loaded with other instance (possibly an older version) of the same module in the same process. Currently, a shared library that is a member of VNDK (vndk: {enabled: true}) can be double loaded in a vendor process if the library is also a (direct and indirect) dependency of an LLNDK library. Such libraries must be explicitly marked as `double_loadable: true` by the owner, or the dependency from the LLNDK lib should be cut if the lib is not designed to be double loaded."/>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="export_generated_headers" type="blueprint[]" descr="list of generated headers to re-export include directories from. Entries must be present in generated_headers."/>
        <field name="export_header_lib_headers" type="blueprint[]" descr="list of header libraries to re-export include directories from. Entries must be present in header_libs."/>
        <field name="export_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the include path (using -I) for this module and any module that links against this module.  Directories listed in export_include_dirs do not need to be listed in local_include_dirs."/>
        <field name="export_shared_lib_headers" type="blueprint[]" descr="list of shared libraries to re-export include directories from. Entries must be present in shared_libs."/>
        <field name="export_static_lib_headers" type="blueprint[]" descr="list of static libraries to re-export include directories from. Entries must be present in static_libs."/>
        <field name="force_symbols_not_weak_list" type="string" descr="local file name to pass to the linker as -force_symbols_not_weak_list"/>
        <field name="force_symbols_weak_list" type="string" descr="local file name to pass to the linker as -force_symbols_weak_list"/>
        <field name="group_static_libs" type="bool" descr="group static libraries.  This can resolve missing symbols issues with interdependencies between static libraries, but it is generally better to order them correctly instead."/>
        <object-field name="header_abi_checker">
            <field name="symbol_file" type="string" descr="Path to a symbol file that specifies the symbols to be included in the generated ABI dump file"/>
            <field name="exclude_symbol_versions" type="string[]" descr="Symbol versions that should be ignored from the symbol file"/>
            <field name="exclude_symbol_tags" type="string[]" descr="Symbol tags that should be ignored from the symbol file"/>
        </object-field>
        <field name="header_libs" type="blueprint[]" descr="list of modules that should only provide headers for this module."/>
        <field name="host_ldlibs" type="string[]" descr="-l arguments to pass to linker for host-provided shared libraries"/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="ldflags" type="string[]" descr="list of module-specific flags that will be used for all link steps"/>
        <field name="logtags" type="string[]" descr="*.logtags files, to combine together in order to generate the /system/etc/event-log-tags file"/>
        <object-field name="lto">
            <field name="never" type="bool"/>
            <field name="full" type="bool"/>
            <field name="thin" type="bool"/>
        </object-field>
        <field name="native_coverage" type="bool"/>
        <field name="no_libcrt" type="bool" descr="don't link in libclang_rt.builtins-*.a"/>
        <field name="no_libgcc" type="bool" descr="don't link in libgcc.a"/>
        <field name="nocrt" type="bool" descr="don't link in crt_begin and crt_end.  This flag should only be necessary for compiling crt or libc."/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="overrides" type="blueprint[]" descr="Names of modules to be overridden. Listed modules can only be other shared libraries (in Make or Soong). This does not completely prevent installation of the overridden libraries, but if both binaries would be installed by default (in PRODUCT_PACKAGES) the other library will be removed from PRODUCT_PACKAGES."/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="pack_relocations" type="bool" descr="Generate compact dynamic relocation table, default true."/>
        <object-field name="pgo">
            <field name="instrumentation" type="bool"/>
            <field name="sampling" type="bool"/>
            <field name="profile_file" type="string"/>
            <field name="benchmarks" type="string[]"/>
            <field name="enable_profile_use" type="bool"/>
            <field name="cflags" type="string[]" descr="Additional compiler flags to use when building this module for profiling (either instrumentation or sampling)."/>
        </object-field>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <object-field name="proto">
            <field name="export_proto_headers" type="bool" descr="export headers generated from .proto sources"/>
        </object-field>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="recovery_available" type="bool" descr="Make this module available when building for recovery"/>
        <field name="reexportedIncludeFlags" type="string[]"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="runtime_libs" type="blueprint[]" descr="list of modules that should be installed with this module.  This is similar to 'required' but '.vendor' suffix will be appended to the module names if the shared libraries have vendor variants and this module uses VNDK."/>
        <object-field name="sanitize">
            <field name="never" type="bool"/>
            <field name="address" type="bool" descr="main sanitizers"/>
            <field name="thread" type="bool"/>
            <field name="hwaddress" type="bool"/>
            <field name="undefined" type="bool" descr="local sanitizers"/>
            <field name="all_undefined" type="bool"/>
            <field name="misc_undefined" type="string[]"/>
            <field name="coverage" type="bool"/>
            <field name="safestack" type="bool"/>
            <field name="cfi" type="bool"/>
            <field name="integer_overflow" type="bool"/>
            <field name="scudo" type="bool"/>
            <field name="scs" type="bool"/>
            <object-field name="diag">
                <field name="undefined" type="bool"/>
                <field name="cfi" type="bool"/>
                <field name="integer_overflow" type="bool"/>
                <field name="misc_undefined" type="string[]"/>
                <field name="no_recover" type="string[]"/>
            </object-field>
            <field name="recover" type="string[]" descr="value to pass to -fsanitize-recover="/>
            <field name="blacklist" type="string" descr="value to pass to -fsanitize-blacklist"/>
        </object-field>
        <field name="sdclang" type="bool" descr="compile module with SDLLVM instead of AOSP LLVM"/>
        <field name="sdk_version" type="string" descr="Minimum sdk version supported when compiling against the ndk"/>
        <field name="shared" type="string[]"/>
        <field name="shared_libs" type="blueprint[]" descr="list of modules that should be dynamically linked into this module."/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="static" type="string[]"/>
        <field name="static_libs" type="blueprint[]" descr="list of modules that should be statically linked into this module."/>
        <field name="static_ndk_lib" type="bool"/>
        <field name="stem" type="string" descr="set the name of the output"/>
        <field name="stl" type="string" descr="Select the STL library to use.  Possible values are &quot;libc++&quot;, &quot;libc++_static&quot;, &quot;libstdc++&quot;, or &quot;none&quot;. Leave blank to select the default."/>
        <object-field name="strip">
            <field name="none" type="bool"/>
            <field name="all" type="bool"/>
            <field name="keep_symbols" type="bool"/>
            <field name="keep_symbols_list" type="string[]"/>
            <field name="use_gnu_strip" type="bool"/>
        </object-field>
        <object-field name="stubs">
            <field name="symbol_file" type="string" descr="Relative path to the symbol map. The symbol map provides the list of symbols that are exported for stubs variant of this library."/>
            <field name="versions" type="string[]" descr="List versions to generate stubs libs for."/>
        </object-field>
        <field name="symbol_ordering_file" type="string" descr="Local file name to pass to the linker as --symbol-ordering-file"/>
        <field name="system_shared_libs" type="blueprint[]" descr="list of system libraries that will be dynamically linked to shared library and executable modules.  If unset, generally defaults to libc, libm, and libdl.  Set to [] to prevent linking against the defaults."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
            <object-field name="recovery">
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the recovery variant of the C/C++ module."/>
            </object-field>
            <object-field name="vendor">
                <field name="override_export_include_dirs" type="string[]" descr="list of exported include directories, like export_include_dirs, that will be applied to the vendor variant of this library. This will overwrite any other declarations."/>
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_runtime_libs" type="blueprint[]" descr="list of runtime libs that should not be installed along with the vendor variant of the C/C++ module."/>
                <field name="version_script" type="string" descr="version script for this vendor variant"/>
            </object-field>
        </object-field>
        <field name="tidy" type="bool" descr="whether to run clang-tidy over C-like sources."/>
        <field name="tidy_checks" type="string[]" descr="Extra checks to enable or disable in clang-tidy"/>
        <field name="tidy_checks_as_errors" type="string[]" descr="Checks that should be treated as errors."/>
        <field name="tidy_flags" type="string[]" descr="Extra flags to pass to clang-tidy"/>
        <field name="unexported_symbols_list" type="string" descr="local file name to pass to the linker as -unexported_symbols_list"/>
        <field name="unique_host_soname" type="bool" descr="rename host libraries to prevent overlap with system installed libraries"/>
        <field name="use_clang_lld" type="bool" descr="Use clang lld instead of gnu ld."/>
        <field name="use_version_lib" type="bool" descr="make android::build:GetBuildNumber() available containing the build ID."/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vendor_available" type="bool" descr="whether this module should be allowed to be directly depended by other modules with `vendor: true`, `proprietary: true`, or `vendor_available:true`. If set to true, two variants will be built separately, one like normal, and the other limited to the set of libraries and headers that are exposed to /vendor modules. The vendor variant may be used with a different (newer) /system, so it shouldn't have any unversioned runtime dependencies, or make assumptions about the system that may not be true in the future. If set to false, this module becomes inaccessible from /vendor modules. Default value is true when vndk: {enabled: true} or vendor: true. Nothing happens if BOARD_VNDK_VERSION isn't set in the BoardConfig.mk"/>
        <field name="version_script" type="string" descr="local file name to pass to the linker as --version_script"/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
        <object-field name="vndk">
            <field name="enabled" type="bool" descr="declared as a VNDK or VNDK-SP module. The vendor variant will be installed in /system instead of /vendor partition. `vendor_vailable` must be explicitly set to either true or false together with `vndk: {enabled: true}`."/>
            <field name="support_system_process" type="bool" descr="declared as a VNDK-SP module, which is a subset of VNDK. `vndk: { enabled: true }` must set together. All these modules are allowed to link to VNDK-SP or LL-NDK modules only. Other dependency will cause link-type errors. If `support_system_process` is not set or set to false, the module is VNDK-core and can link to other VNDK-core, VNDK-SP or LL-NDK modules only."/>
            <field name="extends" type="string" descr="Extending another module"/>
        </object-field>
        <field name="whole_static_libs" type="blueprint[]" descr="list of modules whose object files should be linked into this module in their entirety.  For static library modules, all of the .o files from the intermediate directory of the dependency will be linked into this modules .a file.  For a shared library, the dependency's .a file will be linked into this module using -Wl,--whole-archive."/>
        <field name="xom" type="bool"/>
    </blueprint>
    <blueprint name="preprocessed_ndk_headers">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="Source path to the files to be preprocessed."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="draft" type="bool" descr="True if this API is not yet ready to be shipped in the NDK. It will be available in the platform for testing, but will be excluded from the sysroot provided to the NDK proper."/>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="exclude_srcs" type="string[]" descr="Source paths that should be excluded from the srcs glob."/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="license" type="string" descr="Path to the NOTICE file associated with the headers."/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="preprocessor" type="string" descr="The preprocessor to run. Must be a program inside the source directory with no dependencies."/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
        </object-field>
        <field name="to" type="string" descr="Install path within the sysroot. This is relative to usr/include."/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="toolchain_library">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="src" type="string" descr="the prebuilt toolchain library, as a path from the top of the source tree"/>
        <field name="srcs" type="string[]" descr="list of source files used to compile the C/C++ module.  May be .c, .cpp, or .S files. srcs may reference the outputs of other modules that produce source files like genrule or filegroup using the syntax &quot;:module&quot;."/>
        <field name="host_supported" type="bool" descr="If set to true, build a variant of the module for the host.  Defaults to false."/>
        <field name="device_supported" type="bool" descr="If set to true, build a variant of the module for the device.  Defaults to true."/>
        <object-field name="aidl">
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the aidl include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the aidl include paths."/>
            <field name="generate_traces" type="bool" descr="whether to generate traces (for systrace) for this interface"/>
            <field name="export_aidl_headers" type="bool" descr="export headers generated from .aidl sources"/>
        </object-field>
        <field name="allow_undefined_symbols" type="bool" descr="allow the module to contain undefined symbols.  By default, modules cannot contain undefined symbols that are not satisified by their immediate dependencies.  Set this flag to true to remove --no-undefined from the linker flags. This flag should only be necessary for compiling low-level libraries like libc."/>
        <field name="asflags" type="string[]" descr="list of module-specific flags that will be used for .S compiles"/>
        <field name="bootstrap" type="bool" descr="Allows this module to use non-APEX version of libraries. Useful for building binaries that are started before APEXes are activated."/>
        <field name="c_std" type="string" descr="C standard version to use. Can be a specific version (such as &quot;gnu11&quot;), &quot;experimental&quot; (which will use draft versions like C1x when available), or the empty string (which will use the default)."/>
        <field name="cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles."/>
        <field name="clang" type="bool" descr="Deprecated. true is the default, false is invalid."/>
        <field name="clang_asflags" type="string[]" descr="list of module-specific flags that will be used for .S compiles when compiling with clang"/>
        <field name="clang_cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles when compiling with clang"/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="conlyflags" type="string[]" descr="list of module-specific flags that will be used for C compiles"/>
        <field name="cpp_std" type="string" descr="C++ standard version to use. Can be a specific version (such as &quot;gnu++11&quot;), &quot;experimental&quot; (which will use draft versions like C++1z when available), or the empty string (which will use the default)."/>
        <field name="cppflags" type="string[]" descr="list of module-specific flags that will be used for C++ compiles"/>
        <object-field name="debug" descr="release">
            <field name="cflags" type="string[]" descr="list of module-specific flags that will be used for C and C++ compiles in debug or release builds"/>
        </object-field>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="double_loadable" type="bool" descr="whether this module is capable of being loaded with other instance (possibly an older version) of the same module in the same process. Currently, a shared library that is a member of VNDK (vndk: {enabled: true}) can be double loaded in a vendor process if the library is also a (direct and indirect) dependency of an LLNDK library. Such libraries must be explicitly marked as `double_loadable: true` by the owner, or the dependency from the LLNDK lib should be cut if the lib is not designed to be double loaded."/>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the C/C++ module. This is most useful in the arch/multilib variants to remove non-common files"/>
        <field name="export_generated_headers" type="blueprint[]" descr="list of generated headers to re-export include directories from. Entries must be present in generated_headers."/>
        <field name="export_header_lib_headers" type="blueprint[]" descr="list of header libraries to re-export include directories from. Entries must be present in header_libs."/>
        <field name="export_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the include path (using -I) for this module and any module that links against this module.  Directories listed in export_include_dirs do not need to be listed in local_include_dirs."/>
        <field name="export_shared_lib_headers" type="blueprint[]" descr="list of shared libraries to re-export include directories from. Entries must be present in shared_libs."/>
        <field name="export_static_lib_headers" type="blueprint[]" descr="list of static libraries to re-export include directories from. Entries must be present in static_libs."/>
        <field name="force_symbols_not_weak_list" type="string" descr="local file name to pass to the linker as -force_symbols_not_weak_list"/>
        <field name="force_symbols_weak_list" type="string" descr="local file name to pass to the linker as -force_symbols_weak_list"/>
        <field name="generated_headers" type="blueprint[]" descr="list of generated headers to add to the include path. These are the names of genrule modules."/>
        <field name="generated_sources" type="blueprint[]" descr="list of generated sources to compile. These are the names of gensrcs or genrule modules."/>
        <field name="gnu_extensions" type="bool" descr="if set to false, use -std=c++* instead of -std=gnu++*"/>
        <field name="group_static_libs" type="bool" descr="group static libraries.  This can resolve missing symbols issues with interdependencies between static libraries, but it is generally better to order them correctly instead."/>
        <object-field name="header_abi_checker">
            <field name="symbol_file" type="string" descr="Path to a symbol file that specifies the symbols to be included in the generated ABI dump file"/>
            <field name="exclude_symbol_versions" type="string[]" descr="Symbol versions that should be ignored from the symbol file"/>
            <field name="exclude_symbol_tags" type="string[]" descr="Symbol tags that should be ignored from the symbol file"/>
        </object-field>
        <field name="header_libs" type="blueprint[]" descr="list of modules that should only provide headers for this module."/>
        <field name="host_ldlibs" type="string[]" descr="-l arguments to pass to linker for host-provided shared libraries"/>
        <field name="include_build_directory" type="bool" descr="Add the directory containing the Android.bp file to the list of include directories. Defaults to true."/>
        <field name="include_dirs" type="string[]" descr="list of directories relative to the root of the source tree that will be added to the include path using -I. If possible, don't use this.  If adding paths from the current directory use local_include_dirs, if adding paths from other modules use export_include_dirs in that module."/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="instruction_set" type="string" descr="the instruction set architecture to use to compile the C/C++ module."/>
        <field name="ldflags" type="string[]" descr="list of module-specific flags that will be used for all link steps"/>
        <field name="local_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the include path using -I"/>
        <field name="logtags" type="string[]" descr="*.logtags files, to combine together in order to generate the /system/etc/event-log-tags file"/>
        <object-field name="lto">
            <field name="never" type="bool"/>
            <field name="full" type="bool"/>
            <field name="thin" type="bool"/>
        </object-field>
        <field name="native_coverage" type="bool"/>
        <field name="no_libcrt" type="bool" descr="don't link in libclang_rt.builtins-*.a"/>
        <field name="no_libgcc" type="bool" descr="don't link in libgcc.a"/>
        <field name="nocrt" type="bool" descr="don't link in crt_begin and crt_end.  This flag should only be necessary for compiling crt or libc."/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="openmp" type="bool" descr="Build and link with OpenMP"/>
        <field name="overrides" type="blueprint[]" descr="Names of modules to be overridden. Listed modules can only be other shared libraries (in Make or Soong). This does not completely prevent installation of the overridden libraries, but if both binaries would be installed by default (in PRODUCT_PACKAGES) the other library will be removed from PRODUCT_PACKAGES."/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="pack_relocations" type="bool" descr="Generate compact dynamic relocation table, default true."/>
        <object-field name="pgo">
            <field name="instrumentation" type="bool"/>
            <field name="sampling" type="bool"/>
            <field name="profile_file" type="string"/>
            <field name="benchmarks" type="string[]"/>
            <field name="enable_profile_use" type="bool"/>
            <field name="cflags" type="string[]" descr="Additional compiler flags to use when building this module for profiling (either instrumentation or sampling)."/>
        </object-field>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <object-field name="proto">
            <field name="type" type="string" descr="Proto generator type.  C++: full or lite.  Java: micro, nano, stream, or lite."/>
            <field name="plugin" type="string" descr="Proto plugin to use as the generator.  Must be a cc_binary_host module."/>
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the protoc include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the bp file that will be added to the protoc include paths."/>
            <field name="canonical_path_from_root" type="bool" descr="whether to identify the proto files from the root of the source tree (the original method in Android, useful for android-specific protos), or relative from where they were specified (useful for external/third party protos). This defaults to true today, but is expected to default to false in the future."/>
            <field name="export_proto_headers" type="bool" descr="export headers generated from .proto sources"/>
            <field name="static" type="bool" descr="Link statically against the protobuf runtime"/>
        </object-field>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="recovery_available" type="bool" descr="Make this module available when building for recovery"/>
        <field name="reexportedIncludeFlags" type="string[]"/>
        <object-field name="renderscript">
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the llvm-rs-cc include paths"/>
            <field name="flags" type="string[]" descr="list of flags that will be passed to llvm-rs-cc"/>
            <field name="target_api" type="string" descr="Renderscript API level to target"/>
        </object-field>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="rtti" type="bool" descr="pass -frtti instead of -fno-rtti"/>
        <field name="runtime_libs" type="blueprint[]" descr="list of modules that should be installed with this module.  This is similar to 'required' but '.vendor' suffix will be appended to the module names if the shared libraries have vendor variants and this module uses VNDK."/>
        <field name="sdclang" type="bool" descr="compile module with SDLLVM instead of AOSP LLVM"/>
        <field name="sdk_version" type="string" descr="Minimum sdk version supported when compiling against the ndk"/>
        <field name="shared" type="string[]"/>
        <field name="shared_libs" type="blueprint[]" descr="list of modules that should be dynamically linked into this module."/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="static" type="string[]"/>
        <field name="static_libs" type="blueprint[]" descr="list of modules that should be statically linked into this module."/>
        <field name="static_ndk_lib" type="bool"/>
        <field name="stem" type="string" descr="set the name of the output"/>
        <object-field name="strip">
            <field name="none" type="bool"/>
            <field name="all" type="bool"/>
            <field name="keep_symbols" type="bool"/>
            <field name="keep_symbols_list" type="string[]"/>
            <field name="use_gnu_strip" type="bool"/>
        </object-field>
        <object-field name="stubs">
            <field name="symbol_file" type="string" descr="Relative path to the symbol map. The symbol map provides the list of symbols that are exported for stubs variant of this library."/>
            <field name="versions" type="string[]" descr="List versions to generate stubs libs for."/>
        </object-field>
        <field name="symbol_ordering_file" type="string" descr="Local file name to pass to the linker as --symbol-ordering-file"/>
        <field name="system_shared_libs" type="blueprint[]" descr="list of system libraries that will be dynamically linked to shared library and executable modules.  If unset, generally defaults to libc, libm, and libdl.  Set to [] to prevent linking against the defaults."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
            <object-field name="recovery">
                <field name="srcs" type="string[]" descr="list of source files that should only be used in the recovery variant of the C/C++ module."/>
                <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="cflags" type="string[]" descr="List of additional cflags that should be used to build the recovery variant of the C/C++ module."/>
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the recovery variant of the C/C++ module."/>
            </object-field>
            <object-field name="vendor">
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_runtime_libs" type="blueprint[]" descr="list of runtime libs that should not be installed along with the vendor variant of the C/C++ module."/>
                <field name="version_script" type="string" descr="version script for this vendor variant"/>
                <field name="override_export_include_dirs" type="string[]" descr="list of exported include directories, like export_include_dirs, that will be applied to the vendor variant of this library. This will overwrite any other declarations."/>
                <field name="srcs" type="string[]" descr="list of source files that should only be used in the vendor variant of the C/C++ module."/>
                <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="cflags" type="string[]" descr="List of additional cflags that should be used to build the vendor variant of the C/C++ module."/>
            </object-field>
        </object-field>
        <field name="tidy" type="bool" descr="whether to run clang-tidy over C-like sources."/>
        <field name="tidy_checks" type="string[]" descr="Extra checks to enable or disable in clang-tidy"/>
        <field name="tidy_checks_as_errors" type="string[]" descr="Checks that should be treated as errors."/>
        <field name="tidy_flags" type="string[]" descr="Extra flags to pass to clang-tidy"/>
        <field name="unexported_symbols_list" type="string" descr="local file name to pass to the linker as -unexported_symbols_list"/>
        <field name="unique_host_soname" type="bool" descr="rename host libraries to prevent overlap with system installed libraries"/>
        <field name="use_clang_lld" type="bool" descr="Use clang lld instead of gnu ld."/>
        <field name="use_version_lib" type="bool" descr="make android::build:GetBuildNumber() available containing the build ID."/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vendor_available" type="bool" descr="whether this module should be allowed to be directly depended by other modules with `vendor: true`, `proprietary: true`, or `vendor_available:true`. If set to true, two variants will be built separately, one like normal, and the other limited to the set of libraries and headers that are exposed to /vendor modules. The vendor variant may be used with a different (newer) /system, so it shouldn't have any unversioned runtime dependencies, or make assumptions about the system that may not be true in the future. If set to false, this module becomes inaccessible from /vendor modules. Default value is true when vndk: {enabled: true} or vendor: true. Nothing happens if BOARD_VNDK_VERSION isn't set in the BoardConfig.mk"/>
        <field name="version_script" type="string" descr="local file name to pass to the linker as --version_script"/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
        <object-field name="vndk">
            <field name="enabled" type="bool" descr="declared as a VNDK or VNDK-SP module. The vendor variant will be installed in /system instead of /vendor partition. `vendor_vailable` must be explicitly set to either true or false together with `vndk: {enabled: true}`."/>
            <field name="support_system_process" type="bool" descr="declared as a VNDK-SP module, which is a subset of VNDK. `vndk: { enabled: true }` must set together. All these modules are allowed to link to VNDK-SP or LL-NDK modules only. Other dependency will cause link-type errors. If `support_system_process` is not set or set to false, the module is VNDK-core and can link to other VNDK-core, VNDK-SP or LL-NDK modules only."/>
            <field name="extends" type="string" descr="Extending another module"/>
        </object-field>
        <field name="whole_static_libs" type="blueprint[]" descr="list of modules whose object files should be linked into this module in their entirety.  For static library modules, all of the .o files from the intermediate directory of the dependency will be linked into this modules .a file.  For a shared library, the dependency's .a file will be linked into this module using -Wl,--whole-archive."/>
        <field name="xom" type="bool"/>
        <field name="yaccflags" type="string[]" descr="list of module-specific flags that will be used for .y and .yy compiles"/>
    </blueprint>
    <blueprint name="vendor_public_library">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="export_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the include path (using -I) for this module and any module that links against this module.  Directories listed in export_include_dirs do not need to be listed in local_include_dirs."/>
        <field name="export_public_headers" type="string[]" descr="list of header libs to re-export include directories from."/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="symbol_file" type="string" descr="Relative path to the symbol map."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
            <object-field name="vendor">
                <field name="override_export_include_dirs" type="string[]" descr="list of exported include directories, like export_include_dirs, that will be applied to the vendor variant of this library. This will overwrite any other declarations."/>
            </object-field>
        </object-field>
        <field name="unversioned" type="bool" descr="Whether the system library uses symbol versions."/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="versioned_ndk_headers">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="draft" type="bool" descr="True if this API is not yet ready to be shipped in the NDK. It will be available in the platform for testing, but will be excluded from the sysroot provided to the NDK proper."/>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="from" type="string" descr="Base directory of the headers being installed. As an example: versioned_ndk_headers { } Will install $SYSROOT/usr/include/foo/bar/baz.h. If `from` were instead &quot;include/foo&quot;, it would have installed $SYSROOT/usr/include/bar/baz.h."/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="license" type="string" descr="Path to the NOTICE file associated with the headers."/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
        </object-field>
        <field name="to" type="string" descr="Install path within the sysroot. This is relative to usr/include."/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
    </blueprint>
    <blueprint name="vndk_prebuilt_shared">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="Prebuilt files for each arch."/>
        <object-field name="aidl">
            <field name="export_aidl_headers" type="bool" descr="export headers generated from .aidl sources"/>
        </object-field>
        <field name="allow_undefined_symbols" type="bool" descr="allow the module to contain undefined symbols.  By default, modules cannot contain undefined symbols that are not satisified by their immediate dependencies.  Set this flag to true to remove --no-undefined from the linker flags. This flag should only be necessary for compiling low-level libraries like libc."/>
        <field name="binder32bit" type="bool" descr="If the prebuilt snapshot lib is built with 32 bit binder, this must be set to true. The lib with 64 bit binder does not need to set this property."/>
        <field name="bootstrap" type="bool" descr="Allows this module to use non-APEX version of libraries. Useful for building binaries that are started before APEXes are activated."/>
        <field name="check_elf_files" type="bool" descr="Check the prebuilt ELF files (e.g. DT_SONAME, DT_NEEDED, resolution of undefined symbols, etc)."/>
        <field name="clang" type="bool" descr="Deprecated. true is the default, false is invalid."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="double_loadable" type="bool" descr="whether this module is capable of being loaded with other instance (possibly an older version) of the same module in the same process. Currently, a shared library that is a member of VNDK (vndk: {enabled: true}) can be double loaded in a vendor process if the library is also a (direct and indirect) dependency of an LLNDK library. Such libraries must be explicitly marked as `double_loadable: true` by the owner, or the dependency from the LLNDK lib should be cut if the lib is not designed to be double loaded."/>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <field name="export_generated_headers" type="blueprint[]" descr="list of generated headers to re-export include directories from. Entries must be present in generated_headers."/>
        <field name="export_header_lib_headers" type="blueprint[]" descr="list of header libraries to re-export include directories from. Entries must be present in header_libs."/>
        <field name="export_include_dirs" type="string[]" descr="list of directories relative to the Blueprints file that will be added to the include path (using -I) for this module and any module that links against this module.  Directories listed in export_include_dirs do not need to be listed in local_include_dirs."/>
        <field name="export_shared_lib_headers" type="blueprint[]" descr="list of shared libraries to re-export include directories from. Entries must be present in shared_libs."/>
        <field name="export_static_lib_headers" type="blueprint[]" descr="list of static libraries to re-export include directories from. Entries must be present in static_libs."/>
        <field name="force_symbols_not_weak_list" type="string" descr="local file name to pass to the linker as -force_symbols_not_weak_list"/>
        <field name="force_symbols_weak_list" type="string" descr="local file name to pass to the linker as -force_symbols_weak_list"/>
        <field name="group_static_libs" type="bool" descr="group static libraries.  This can resolve missing symbols issues with interdependencies between static libraries, but it is generally better to order them correctly instead."/>
        <object-field name="header_abi_checker">
            <field name="symbol_file" type="string" descr="Path to a symbol file that specifies the symbols to be included in the generated ABI dump file"/>
            <field name="exclude_symbol_versions" type="string[]" descr="Symbol versions that should be ignored from the symbol file"/>
            <field name="exclude_symbol_tags" type="string[]" descr="Symbol tags that should be ignored from the symbol file"/>
        </object-field>
        <field name="header_libs" type="blueprint[]" descr="list of modules that should only provide headers for this module."/>
        <field name="host_ldlibs" type="string[]" descr="-l arguments to pass to linker for host-provided shared libraries"/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="ldflags" type="string[]" descr="list of module-specific flags that will be used for all link steps"/>
        <field name="logtags" type="string[]" descr="*.logtags files, to combine together in order to generate the /system/etc/event-log-tags file"/>
        <object-field name="lto">
            <field name="never" type="bool"/>
            <field name="full" type="bool"/>
            <field name="thin" type="bool"/>
        </object-field>
        <field name="native_coverage" type="bool"/>
        <field name="no_libcrt" type="bool" descr="don't link in libclang_rt.builtins-*.a"/>
        <field name="no_libgcc" type="bool" descr="don't link in libgcc.a"/>
        <field name="nocrt" type="bool" descr="don't link in crt_begin and crt_end.  This flag should only be necessary for compiling crt or libc."/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <field name="overrides" type="blueprint[]" descr="Names of modules to be overridden. Listed modules can only be other shared libraries (in Make or Soong). This does not completely prevent installation of the overridden libraries, but if both binaries would be installed by default (in PRODUCT_PACKAGES) the other library will be removed from PRODUCT_PACKAGES."/>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="pack_relocations" type="bool" descr="Generate compact dynamic relocation table, default true."/>
        <object-field name="pgo">
            <field name="instrumentation" type="bool"/>
            <field name="sampling" type="bool"/>
            <field name="profile_file" type="string"/>
            <field name="benchmarks" type="string[]"/>
            <field name="enable_profile_use" type="bool"/>
            <field name="cflags" type="string[]" descr="Additional compiler flags to use when building this module for profiling (either instrumentation or sampling)."/>
        </object-field>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <object-field name="proto">
            <field name="export_proto_headers" type="bool" descr="export headers generated from .proto sources"/>
        </object-field>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="recovery_available" type="bool" descr="Make this module available when building for recovery"/>
        <field name="reexportedIncludeFlags" type="string[]"/>
        <field name="relative_install_path" type="string" descr="install to a subdirectory of the default install path for the module"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="runtime_libs" type="blueprint[]" descr="list of modules that should be installed with this module.  This is similar to 'required' but '.vendor' suffix will be appended to the module names if the shared libraries have vendor variants and this module uses VNDK."/>
        <field name="sdclang" type="bool" descr="compile module with SDLLVM instead of AOSP LLVM"/>
        <field name="sdk_version" type="string" descr="Minimum sdk version supported when compiling against the ndk"/>
        <field name="shared" type="string[]"/>
        <field name="shared_libs" type="blueprint[]" descr="list of modules that should be dynamically linked into this module."/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="static" type="string[]"/>
        <field name="static_libs" type="blueprint[]" descr="list of modules that should be statically linked into this module."/>
        <field name="static_ndk_lib" type="bool"/>
        <field name="stem" type="string" descr="set the name of the output"/>
        <object-field name="strip">
            <field name="none" type="bool"/>
            <field name="all" type="bool"/>
            <field name="keep_symbols" type="bool"/>
            <field name="keep_symbols_list" type="string[]"/>
            <field name="use_gnu_strip" type="bool"/>
        </object-field>
        <object-field name="stubs">
            <field name="symbol_file" type="string" descr="Relative path to the symbol map. The symbol map provides the list of symbols that are exported for stubs variant of this library."/>
            <field name="versions" type="string[]" descr="List versions to generate stubs libs for."/>
        </object-field>
        <field name="symbol_ordering_file" type="string" descr="Local file name to pass to the linker as --symbol-ordering-file"/>
        <field name="system_shared_libs" type="blueprint[]" descr="list of system libraries that will be dynamically linked to shared library and executable modules.  If unset, generally defaults to libc, libm, and libdl.  Set to [] to prevent linking against the defaults."/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
            <object-field name="recovery">
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the recovery variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the recovery variant of the C/C++ module."/>
            </object-field>
            <object-field name="vendor">
                <field name="shared_libs" type="blueprint[]" descr="list of shared libs that only should be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_shared_libs" type="blueprint[]" descr="list of shared libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_static_libs" type="blueprint[]" descr="list of static libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_header_libs" type="blueprint[]" descr="list of header libs that should not be used to build the vendor variant of the C/C++ module."/>
                <field name="exclude_runtime_libs" type="blueprint[]" descr="list of runtime libs that should not be installed along with the vendor variant of the C/C++ module."/>
                <field name="version_script" type="string" descr="version script for this vendor variant"/>
                <field name="override_export_include_dirs" type="string[]" descr="list of exported include directories, like export_include_dirs, that will be applied to the vendor variant of this library. This will overwrite any other declarations."/>
            </object-field>
        </object-field>
        <field name="target_arch" type="string" descr="Target arch name of the snapshot (e.g. 'arm64' for variant 'aosp_arm64_ab')"/>
        <field name="tidy" type="bool" descr="whether to run clang-tidy over C-like sources."/>
        <field name="tidy_checks" type="string[]" descr="Extra checks to enable or disable in clang-tidy"/>
        <field name="tidy_checks_as_errors" type="string[]" descr="Checks that should be treated as errors."/>
        <field name="tidy_flags" type="string[]" descr="Extra flags to pass to clang-tidy"/>
        <field name="unexported_symbols_list" type="string" descr="local file name to pass to the linker as -unexported_symbols_list"/>
        <field name="unique_host_soname" type="bool" descr="rename host libraries to prevent overlap with system installed libraries"/>
        <field name="use_clang_lld" type="bool" descr="Use clang lld instead of gnu ld."/>
        <field name="use_version_lib" type="bool" descr="make android::build:GetBuildNumber() available containing the build ID."/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="vendor_available" type="bool" descr="whether this module should be allowed to be directly depended by other modules with `vendor: true`, `proprietary: true`, or `vendor_available:true`. If set to true, two variants will be built separately, one like normal, and the other limited to the set of libraries and headers that are exposed to /vendor modules. The vendor variant may be used with a different (newer) /system, so it shouldn't have any unversioned runtime dependencies, or make assumptions about the system that may not be true in the future. If set to false, this module becomes inaccessible from /vendor modules. Default value is true when vndk: {enabled: true} or vendor: true. Nothing happens if BOARD_VNDK_VERSION isn't set in the BoardConfig.mk"/>
        <field name="version" type="string" descr="VNDK snapshot version."/>
        <field name="version_script" type="string" descr="local file name to pass to the linker as --version_script"/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
        <object-field name="vndk">
            <field name="enabled" type="bool" descr="declared as a VNDK or VNDK-SP module. The vendor variant will be installed in /system instead of /vendor partition. `vendor_vailable` must be explicitly set to either true or false together with `vndk: {enabled: true}`."/>
            <field name="support_system_process" type="bool" descr="declared as a VNDK-SP module, which is a subset of VNDK. `vndk: { enabled: true }` must set together. All these modules are allowed to link to VNDK-SP or LL-NDK modules only. Other dependency will cause link-type errors. If `support_system_process` is not set or set to false, the module is VNDK-core and can link to other VNDK-core, VNDK-SP or LL-NDK modules only."/>
            <field name="extends" type="string" descr="Extending another module"/>
        </object-field>
        <field name="whole_static_libs" type="blueprint[]" descr="list of modules whose object files should be linked into this module in their entirety.  For static library modules, all of the .o files from the intermediate directory of the dependency will be linked into this modules .a file.  For a shared library, the dependency's .a file will be linked into this module using -Wl,--whole-archive."/>
        <field name="xom" type="bool"/>
    </blueprint>
    <blueprint name="tradefed_binary_host">
        <field name="name" type="string" descr="The name of the module.  Must be unique across all modules."/>
        <field name="srcs" type="string[]" descr="list of source files used to compile the Java module.  May be .java, .logtags, .proto, or .aidl files."/>
        <field name="compile_multilib" type="string" descr="control whether this module compiles for 32-bit, 64-bit, or both.  Possible values are &quot;32&quot; (compile for 32-bit only), &quot;64&quot; (compile for 64-bit only), &quot;both&quot; (compile for both architectures), or &quot;first&quot; (compile for 64-bit on a 64-bit platform, and 32-bit on a 32-bit platform"/>
        <field name="defaults" type="blueprint[]"/>
        <field name="device_specific" type="bool" descr="whether this module is specific to a device, not only for SoC, but also for off-chip peripherals. When set to true, it is installed into /odm (or /vendor/odm if odm partition does not exist, or /system/vendor/odm if both odm and vendor partitions do not exist). This implies `soc_specific:true`."/>
        <object-field name="dist">
            <field name="targets" type="string[]" descr="copy the output of this module to the $DIST_DIR when `dist` is specified on the command line and  any of these targets are also on the command line, or otherwise built"/>
            <field name="dest" type="string" descr="The name of the output artifact. This defaults to the basename of the output of the module."/>
            <field name="dir" type="string" descr="The directory within the dist directory to store the artifact. Defaults to the top level directory (&quot;&quot;)."/>
            <field name="suffix" type="string" descr="A suffix to add to the artifact file name (before any extension)."/>
        </object-field>
        <field name="enabled" type="bool" descr="emit build rules for this module"/>
        <object-field name="errorprone">
            <field name="javacflags" type="string[]" descr="List of javac flags that should only be used when running errorprone."/>
        </object-field>
        <field name="exclude_java_resource_dirs" type="string[]" descr="list of directories that should be excluded from java_resource_dirs"/>
        <field name="exclude_java_resources" type="string[]" descr="list of files that should be excluded from java_resources and java_resource_dirs"/>
        <field name="exclude_srcs" type="string[]" descr="list of source files that should not be used to build the Java module. This is most useful in the arch/multilib variants to remove non-common files"/>
        <field name="full_name" type="string"/>
        <field name="include_srcs" type="bool" descr="If set to true, include sources used to compile the module in to the final jar"/>
        <field name="init_rc" type="string[]" descr="init.rc files to be installed if this module is installed"/>
        <field name="installable" type="bool" descr="If set to true, allow this module to be dexed and installed on devices.  Has no effect on host modules, which are always considered installable."/>
        <object-field name="jacoco">
            <field name="include_filter" type="string[]" descr="List of classes to include for instrumentation with jacoco to collect coverage information at runtime when building with coverage enabled.  If unset defaults to all classes. Supports '*' as the last character of an entry in the list as a wildcard match. If preceded by '.' it matches all classes in the package and subpackages, otherwise it matches classes in the package that have the class name as a prefix."/>
            <field name="exclude_filter" type="string[]" descr="List of classes to exclude from instrumentation with jacoco to collect coverage information at runtime when building with coverage enabled.  Overrides classes selected by the include_filter property. Supports '*' as the last character of an entry in the list as a wildcard match. If preceded by '.' it matches all classes in the package and subpackages, otherwise it matches classes in the package that have the class name as a prefix."/>
        </object-field>
        <field name="jarjar_rules" type="string" descr="if not blank, run jarjar using the specified rules file"/>
        <field name="java_resource_dirs" type="string[]" descr="list of directories containing Java resources"/>
        <field name="java_resources" type="string[]" descr="list of files to use as Java resources"/>
        <field name="java_version" type="string" descr="If not blank, set the java version passed to javac as -source and -target"/>
        <field name="javac_shard_size" type="number" descr="The number of Java source entries each Javac instance can process"/>
        <field name="javacflags" type="string[]" descr="list of module-specific flags that will be used for javac compiles"/>
        <field name="kotlincflags" type="string[]" descr="list of module-specific flags that will be used for kotlinc compiles"/>
        <field name="libs" type="blueprint[]" descr="list of of java libraries that will be in the classpath"/>
        <field name="main_class" type="string" descr="Name of the class containing main to be inserted into the manifest as Main-Class."/>
        <field name="manifest" type="string" descr="manifest file to be included in resulting jar"/>
        <field name="no_framework_libs" type="bool" descr="don't build against the framework libraries (ext, and framework for device targets)"/>
        <field name="no_standard_libs" type="bool" descr="don't build against the default libraries (bootclasspath, ext, and framework for device targets)"/>
        <field name="notice" type="string" descr="relative path to a file to include in the list of notices for the device"/>
        <object-field name="openjdk9">
            <field name="srcs" type="string[]" descr="List of source files that should only be used when passing -source 1.9"/>
            <field name="javacflags" type="string[]" descr="List of javac flags that should only be used when passing -source 1.9"/>
        </object-field>
        <field name="owner" type="string" descr="vendor who owns this module"/>
        <field name="patch_module" type="string" descr="When compiling language level 9+ .java code in packages that are part of a system module, patch_module names the module that your sources and dependencies should be patched into. The Android runtime currently doesn't implement the JEP 261 module system so this option is only supported at compile time. It should only be needed to compile tests in packages that exist in libcore and which are inconvenient to move elsewhere."/>
        <field name="permitted_packages" type="string[]" descr="If not empty, classes are restricted to the specified packages and their sub-packages. This restriction is checked after applying jarjar rules and including static libs."/>
        <field name="plugins" type="string[]" descr="List of modules to use as annotation processors"/>
        <field name="product_services_specific" type="bool" descr="whether this module provides services owned by the OS provider to the core platform. When set to true, it is installed into  /product_services (or /system/product_services if product_services partition does not exist)."/>
        <field name="product_specific" type="bool" descr="whether this module is specific to a software configuration of a product (e.g. country, network operator, etc). When set to true, it is installed into /product (or /system/product if product partition does not exist)."/>
        <object-field name="product_variables">
            <object-field name="arc">
                <field name="cflags" type="string[]"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="include_dirs" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="static_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
            </object-field>
            <object-field name="binder32bit">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="debuggable">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="required" type="blueprint[]"/>
            </object-field>
            <object-field name="device_support_hwfde">
                <field name="cflags" type="string[]"/>
                <field name="header_libs" type="blueprint[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="eng">
                <field name="cflags" type="string[]"/>
                <field name="cppflags" type="string[]"/>
                <object-field name="lto">
                    <field name="never" type="bool"/>
                </object-field>
                <object-field name="sanitize">
                    <field name="address" type="bool"/>
                </object-field>
            </object-field>
            <object-field name="malloc_not_svelte">
                <field name="cflags" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="platform_sdk_version">
                <field name="asflags" type="string[]"/>
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="product_is_iot">
                <field name="cflags" type="string[]"/>
                <field name="enabled" type="bool"/>
                <field name="exclude_srcs" type="string[]"/>
                <field name="init_rc" type="string[]"/>
                <field name="shared_libs" type="blueprint[]"/>
                <field name="srcs" type="string[]"/>
                <field name="static_libs" type="blueprint[]"/>
            </object-field>
            <object-field name="safestack">
                <field name="cflags" type="string[]"/>
            </object-field>
            <object-field name="uml">
                <field name="cppflags" type="string[]"/>
            </object-field>
            <object-field name="unbundled_build">
                <field name="enabled" type="bool"/>
            </object-field>
        </object-field>
        <field name="proprietary" type="bool" descr="whether this is a proprietary vendor module, and should be installed into /vendor"/>
        <object-field name="proto">
            <field name="type" type="string" descr="Proto generator type.  C++: full or lite.  Java: micro, nano, stream, or lite."/>
            <field name="plugin" type="string" descr="Proto plugin to use as the generator.  Must be a cc_binary_host module."/>
            <field name="include_dirs" type="string[]" descr="list of directories that will be added to the protoc include paths."/>
            <field name="local_include_dirs" type="string[]" descr="list of directories relative to the bp file that will be added to the protoc include paths."/>
            <field name="canonical_path_from_root" type="bool" descr="whether to identify the proto files from the root of the source tree (the original method in Android, useful for android-specific protos), or relative from where they were specified (useful for external/third party protos). This defaults to true today, but is expected to default to false in the future."/>
            <field name="output_params" type="string[]" descr="List of extra options that will be passed to the proto generator."/>
        </object-field>
        <field name="recovery" type="bool" descr="Whether this module is installed to recovery partition"/>
        <field name="required" type="blueprint[]" descr="names of other modules to install if this module is installed"/>
        <field name="services" type="string[]" descr="List of files to include in the META-INF/services folder of the resulting jar."/>
        <field name="short_name" type="string"/>
        <field name="soc_specific" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist)."/>
        <field name="static_libs" type="blueprint[]" descr="list of java libraries that will be compiled into the resulting jar"/>
        <object-field name="target">
            <object-field name="host">
                <field name="compile_multilib" type="string"/>
            </object-field>
        </object-field>
        <field name="use_tools_jar" type="bool" descr="Add host jdk tools.jar to bootclasspath"/>
        <field name="vendor" type="bool" descr="whether this module is specific to an SoC (System-On-a-Chip). When set to true, it is installed into /vendor (or /system/vendor if vendor partition does not exist). Use `soc_specific` instead for better meaning."/>
        <field name="version" type="string"/>
        <field name="vintf_fragments" type="string[]" descr="VINTF manifest fragments to be installed if this module is installed"/>
        <field name="wrapper" type="string" descr="installable script to execute the resulting jar"/>
    </blueprint>
</blueprints>
